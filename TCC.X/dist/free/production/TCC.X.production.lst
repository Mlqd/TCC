

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 21 12:07:39 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           ; Version 1.45
    38                           ; Generated 16/11/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4550 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     _TMR0H	set	4055
    72  0000                     _TMR0L	set	4054
    73  0000                     _LATB	set	3978
    74  0000                     _ADRESL	set	4035
    75  0000                     _ADRESH	set	4036
    76  0000                     _ADCON0bits	set	4034
    77  0000                     _ADCON0	set	4034
    78  0000                     _LATCbits	set	3979
    79  0000                     _LATDbits	set	3980
    80  0000                     _INTCONbits	set	4082
    81  0000                     _LATC	set	3979
    82  0000                     _LATD	set	3980
    83  0000                     _INTCON	set	4082
    84  0000                     _T0CON	set	4053
    85  0000                     _LATBbits	set	3978
    86  0000                     _TRISB	set	3987
    87  0000                     _ADCON2	set	4032
    88  0000                     _ADCON1	set	4033
    89  0000                     _TRISA	set	3986
    90  0000                     _TRISE	set	3990
    91  0000                     _TRISD	set	3989
    92  0000                     _TRISC	set	3988
    93  0000                     _CMCON	set	4020
    94  0000                     _UCON	set	3949
    95                           
    96                           	psect	smallconst
    97  000800                     __psmallconst:
    98                           	opt stack 0
    99  000800  00                 	db	0
   100  000801                     STR_2:
   101  000801  54                 	db	84	;'T'
   102  000802  65                 	db	101	;'e'
   103  000803  73                 	db	115	;'s'
   104  000804  74                 	db	116	;'t'
   105  000805  65                 	db	101	;'e'
   106  000806  20                 	db	32
   107  000807  43                 	db	67	;'C'
   108  000808  6F                 	db	111	;'o'
   109  000809  6E                 	db	110	;'n'
   110  00080A  76                 	db	118	;'v'
   111  00080B  2E                 	db	46
   112  00080C  20                 	db	32
   113  00080D  41                 	db	65	;'A'
   114  00080E  44                 	db	68	;'D'
   115  00080F  43                 	db	67	;'C'
   116  000810  20                 	db	32
   117  000811  00                 	db	0
   118  000812                     STR_3:
   119  000812  53                 	db	83	;'S'
   120  000813  69                 	db	105	;'i'
   121  000814  6E                 	db	110	;'n'
   122  000815  61                 	db	97	;'a'
   123  000816  6C                 	db	108	;'l'
   124  000817  20                 	db	32
   125  000818  49                 	db	73	;'I'
   126  000819  72                 	db	114	;'r'
   127  00081A  20                 	db	32
   128  00081B  00                 	db	0
   129  00081C                     STR_9:
   130  00081C  53                 	db	83	;'S'
   131  00081D  69                 	db	105	;'i'
   132  00081E  6E                 	db	110	;'n'
   133  00081F  61                 	db	97	;'a'
   134  000820  6C                 	db	108	;'l'
   135  000821  20                 	db	32
   136  000822  56                 	db	86	;'V'
   137  000823  72                 	db	114	;'r'
   138  000824  20                 	db	32
   139  000825  00                 	db	0
   140  000826                     STR_5:
   141  000826  53                 	db	83	;'S'
   142  000827  69                 	db	105	;'i'
   143  000828  6E                 	db	110	;'n'
   144  000829  61                 	db	97	;'a'
   145  00082A  6C                 	db	108	;'l'
   146  00082B  20                 	db	32
   147  00082C  49                 	db	73	;'I'
   148  00082D  73                 	db	115	;'s'
   149  00082E  20                 	db	32
   150  00082F  00                 	db	0
   151  000830                     STR_11:
   152  000830  53                 	db	83	;'S'
   153  000831  69                 	db	105	;'i'
   154  000832  6E                 	db	110	;'n'
   155  000833  61                 	db	97	;'a'
   156  000834  6C                 	db	108	;'l'
   157  000835  20                 	db	32
   158  000836  56                 	db	86	;'V'
   159  000837  73                 	db	115	;'s'
   160  000838  20                 	db	32
   161  000839  00                 	db	0
   162  00083A                     STR_7:
   163  00083A  53                 	db	83	;'S'
   164  00083B  69                 	db	105	;'i'
   165  00083C  6E                 	db	110	;'n'
   166  00083D  61                 	db	97	;'a'
   167  00083E  6C                 	db	108	;'l'
   168  00083F  20                 	db	32
   169  000840  49                 	db	73	;'I'
   170  000841  74                 	db	116	;'t'
   171  000842  20                 	db	32
   172  000843  00                 	db	0
   173  000844                     STR_13:
   174  000844  53                 	db	83	;'S'
   175  000845  69                 	db	105	;'i'
   176  000846  6E                 	db	110	;'n'
   177  000847  61                 	db	97	;'a'
   178  000848  6C                 	db	108	;'l'
   179  000849  20                 	db	32
   180  00084A  56                 	db	86	;'V'
   181  00084B  74                 	db	116	;'t'
   182  00084C  20                 	db	32
   183  00084D  00                 	db	0
   184  00084E                     STR_1:
   185  00084E  4E                 	db	78	;'N'
   186  00084F  72                 	db	114	;'r'
   187  000850  3A                 	db	58	;':'
   188  000851  20                 	db	32
   189  000852  00                 	db	0
   190  000853                     STR_4:
   191  000853  56                 	db	86	;'V'
   192  000854  00                 	db	0
   193  0000                     
   194                           ; #config settings
   195  000855  00                 	db	0	; dummy byte at the end
   196  0000                     
   197                           	psect	cinit
   198  001AEE                     __pcinit:
   199                           	opt stack 0
   200  001AEE                     start_initialization:
   201                           	opt stack 0
   202  001AEE                     __initialization:
   203                           	opt stack 0
   204  001AEE                     end_of_initialization:
   205                           	opt stack 0
   206  001AEE                     __end_of__initialization:
   207                           	opt stack 0
   208  001AEE  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   209  001AF0  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   210  001AF2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   211  001AF4  6EF8               	movwf	tblptru,c
   212  001AF6  0100               	movlb	0
   213  001AF8  EF2B  F004         	goto	_main	;jump to C main() function
   214                           tblptru	equ	0xFF8
   215                           
   216                           	psect	cstackBANK0
   217  000060                     __pcstackBANK0:
   218                           	opt stack 0
   219  000060                     ??_writeLcd:
   220  000060                     ?_adc_read:
   221                           	opt stack 0
   222  000060                     ?___ftpack:
   223                           	opt stack 0
   224  000060                     ?___lmul:
   225                           	opt stack 0
   226  000060                     ?___almod:
   227                           	opt stack 0
   228  000060                     ___ftpack@arg:
   229                           	opt stack 0
   230  000060                     ___lmul@multiplier:
   231                           	opt stack 0
   232  000060                     ___almod@dividend:
   233                           	opt stack 0
   234                           
   235                           ; 4 bytes @ 0x0
   236  000060                     	ds	1
   237  000061                     writeLcd@c:
   238                           	opt stack 0
   239                           
   240                           ; 1 bytes @ 0x1
   241  000061                     	ds	1
   242  000062                     ??_clearLcd:
   243  000062                     ??_adc_read:
   244  000062                     gotoLcd@pos:
   245                           	opt stack 0
   246  000062                     writeCStringLcd@s:
   247                           	opt stack 0
   248  000062                     writeStringLcd@s:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x2
   252  000062                     	ds	1
   253  000063                     ??_initConfigs:
   254  000063                     ___ftpack@exp:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x3
   258  000063                     	ds	1
   259  000064                     adc_read@canal:
   260                           	opt stack 0
   261  000064                     ___ftpack@sign:
   262                           	opt stack 0
   263  000064                     ___lmul@multiplicand:
   264                           	opt stack 0
   265  000064                     ___almod@divisor:
   266                           	opt stack 0
   267                           
   268                           ; 4 bytes @ 0x4
   269  000064                     	ds	1
   270  000065                     ??___ftpack:
   271  000065                     adc_read@x:
   272                           	opt stack 0
   273                           
   274                           ; 1 bytes @ 0x5
   275  000065                     	ds	1
   276  000066                     adc_read@y:
   277                           	opt stack 0
   278                           
   279                           ; 1 bytes @ 0x6
   280  000066                     	ds	2
   281  000068                     ?___lwtoft:
   282                           	opt stack 0
   283  000068                     ___almod@counter:
   284                           	opt stack 0
   285  000068                     ___lwtoft@c:
   286                           	opt stack 0
   287  000068                     ___lmul@product:
   288                           	opt stack 0
   289                           
   290                           ; 4 bytes @ 0x8
   291  000068                     	ds	1
   292  000069                     ___almod@sign:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0x9
   296  000069                     	ds	1
   297  00006A                     ?___aldiv:
   298                           	opt stack 0
   299  00006A                     ___aldiv@dividend:
   300                           	opt stack 0
   301                           
   302                           ; 4 bytes @ 0xA
   303  00006A                     	ds	1
   304  00006B                     ?___ftmul:
   305                           	opt stack 0
   306  00006B                     ___ftmul@f1:
   307                           	opt stack 0
   308                           
   309                           ; 3 bytes @ 0xB
   310  00006B                     	ds	3
   311  00006E                     ___ftmul@f2:
   312                           	opt stack 0
   313  00006E                     ___aldiv@divisor:
   314                           	opt stack 0
   315                           
   316                           ; 4 bytes @ 0xE
   317  00006E                     	ds	3
   318  000071                     ??___ftmul:
   319                           
   320                           ; 1 bytes @ 0x11
   321  000071                     	ds	1
   322  000072                     ___aldiv@counter:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x12
   326  000072                     	ds	1
   327  000073                     ___aldiv@sign:
   328                           	opt stack 0
   329                           
   330                           ; 1 bytes @ 0x13
   331  000073                     	ds	1
   332  000074                     ___ftmul@exp:
   333                           	opt stack 0
   334  000074                     ___aldiv@quotient:
   335                           	opt stack 0
   336                           
   337                           ; 4 bytes @ 0x14
   338  000074                     	ds	1
   339  000075                     ___ftmul@f3_as_product:
   340                           	opt stack 0
   341                           
   342                           ; 3 bytes @ 0x15
   343  000075                     	ds	3
   344  000078                     ___ftmul@cntr:
   345                           	opt stack 0
   346                           
   347                           ; 1 bytes @ 0x18
   348  000078                     	ds	1
   349  000079                     ___ftmul@sign:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0x19
   353  000079                     	ds	1
   354  00007A                     ?___ftdiv:
   355                           	opt stack 0
   356  00007A                     ?___fttol:
   357                           	opt stack 0
   358  00007A                     ___ftdiv@f1:
   359                           	opt stack 0
   360  00007A                     ___fttol@f1:
   361                           	opt stack 0
   362                           
   363                           ; 3 bytes @ 0x1A
   364  00007A                     	ds	3
   365  00007D                     ___ftdiv@f2:
   366                           	opt stack 0
   367                           
   368                           ; 3 bytes @ 0x1D
   369  00007D                     	ds	1
   370  00007E                     ??___fttol:
   371                           
   372                           ; 1 bytes @ 0x1E
   373  00007E                     	ds	2
   374  000080                     ??___ftdiv:
   375                           
   376                           ; 1 bytes @ 0x20
   377  000080                     	ds	3
   378  000083                     ___ftdiv@cntr:
   379                           	opt stack 0
   380  000083                     ___fttol@sign1:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x23
   384  000083                     	ds	1
   385  000084                     ___ftdiv@f3:
   386                           	opt stack 0
   387  000084                     ___fttol@lval:
   388                           	opt stack 0
   389                           
   390                           ; 4 bytes @ 0x24
   391  000084                     	ds	3
   392  000087                     ___ftdiv@exp:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x27
   396  000087                     	ds	1
   397  000088                     ___ftdiv@sign:
   398                           	opt stack 0
   399  000088                     ___fttol@exp1:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x28
   403  000088                     	ds	1
   404  000089                     writeValueLcd@val:
   405                           	opt stack 0
   406                           
   407                           ; 3 bytes @ 0x29
   408  000089                     	ds	3
   409  00008C                     ??_writeValueLcd:
   410                           
   411                           ; 1 bytes @ 0x2C
   412  00008C                     	ds	4
   413  000090                     writeValueLcd@x:
   414                           	opt stack 0
   415                           
   416                           ; 4 bytes @ 0x30
   417  000090                     	ds	4
   418  000094                     ??_main:
   419                           
   420                           ; 1 bytes @ 0x34
   421  000094                     	ds	2
   422  000096                     main@valor:
   423                           	opt stack 0
   424                           
   425                           ; 3 bytes @ 0x36
   426  000096                     	ds	3
   427                           tblptru	equ	0xFF8
   428                           
   429                           	psect	cstackCOMRAM
   430  000001                     __pcstackCOMRAM:
   431                           	opt stack 0
   432  000001                     ?i2_adc_read:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x0
   436  000001                     	ds	2
   437  000003                     ??i2_adc_read:
   438                           
   439                           ; 1 bytes @ 0x2
   440  000003                     	ds	2
   441  000005                     i2adc_read@canal:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x4
   445  000005                     	ds	1
   446  000006                     i2adc_read@x:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x5
   450  000006                     	ds	1
   451  000007                     i2adc_read@y:
   452                           	opt stack 0
   453                           
   454                           ; 1 bytes @ 0x6
   455  000007                     	ds	1
   456  000008                     ?___wmul:
   457                           	opt stack 0
   458  000008                     ___wmul@multiplier:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x7
   462  000008                     	ds	2
   463  00000A                     ___wmul@multiplicand:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x9
   467  00000A                     	ds	2
   468  00000C                     ___wmul@product:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0xB
   472  00000C                     	ds	2
   473  00000E                     ?___lwdiv:
   474                           	opt stack 0
   475  00000E                     ___lwdiv@dividend:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0xD
   479  00000E                     	ds	2
   480  000010                     ___lwdiv@divisor:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0xF
   484  000010                     	ds	2
   485  000012                     ___lwdiv@quotient:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x11
   489  000012                     	ds	2
   490  000014                     ___lwdiv@counter:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x13
   494  000014                     	ds	1
   495  000015                     tmr0_flag@Vr:
   496                           	opt stack 0
   497                           
   498                           ; 4 bytes @ 0x14
   499  000015                     	ds	4
   500  000019                     tmr0_flag@Vs:
   501                           	opt stack 0
   502                           
   503                           ; 4 bytes @ 0x18
   504  000019                     	ds	4
   505  00001D                     tmr0_flag@Vt:
   506                           	opt stack 0
   507                           
   508                           ; 4 bytes @ 0x1C
   509  00001D                     	ds	4
   510  000021                     tmr0_flag@Ir:
   511                           	opt stack 0
   512                           
   513                           ; 4 bytes @ 0x20
   514  000021                     	ds	4
   515  000025                     tmr0_flag@Is:
   516                           	opt stack 0
   517                           
   518                           ; 4 bytes @ 0x24
   519  000025                     	ds	4
   520  000029                     tmr0_flag@It:
   521                           	opt stack 0
   522                           
   523                           ; 4 bytes @ 0x28
   524  000029                     	ds	4
   525  00002D                     ??_high_priority_interrupt:
   526                           
   527                           ; 1 bytes @ 0x2C
   528  00002D                     	ds	18
   529                           tblptru	equ	0xFF8
   530                           
   531 ;;
   532 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   533 ;;
   534 ;; *************** function _main *****************
   535 ;; Defined at:
   536 ;;		line 16 in file "main.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;		None
   539 ;; Auto vars:     Size  Location     Type
   540 ;;  str             7    0        unsigned char [7]
   541 ;;  valor           3   54[BANK0 ] float 
   542 ;;  val             2    0        unsigned char [2]
   543 ;; Return value:  Size  Location     Type
   544 ;;                  1    wreg      void 
   545 ;; Registers used:
   546 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   547 ;; Tracked objects:
   548 ;;		On entry : 0/0
   549 ;;		On exit  : 0/0
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   552 ;;      Params:         0       0       0       0       0       0       0       0       0
   553 ;;      Locals:         0       3       0       0       0       0       0       0       0
   554 ;;      Temps:          0       2       0       0       0       0       0       0       0
   555 ;;      Totals:         0       5       0       0       0       0       0       0       0
   556 ;;Total ram usage:        5 bytes
   557 ;; Hardware stack levels required when called:    7
   558 ;; This function calls:
   559 ;;		___ftdiv
   560 ;;		___ftmul
   561 ;;		___lwtoft
   562 ;;		_adc_read
   563 ;;		_clearLcd
   564 ;;		_gotoLcd
   565 ;;		_initConfigs
   566 ;;		_writeCStringLcd
   567 ;;		_writeStringLcd
   568 ;;		_writeValueLcd
   569 ;; This function is called by:
   570 ;;		Startup code after reset
   571 ;; This function uses a non-reentrant model
   572 ;;
   573                           
   574                           	psect	text0
   575  000856                     __ptext0:
   576                           	opt stack 0
   577  000856                     _main:
   578                           	opt stack 24
   579                           
   580                           ;main.c: 17: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   581                           
   582                           ;incstack = 0
   583  000856  0E15               	movlw	21
   584  000858  0100               	movlb	0	; () banked
   585  00085A  6F95               	movwf	(??_main+1)& (0+255),b
   586  00085C  0E4B               	movlw	75
   587  00085E  6F94               	movwf	??_main& (0+255),b
   588  000860  0EBE               	movlw	190
   589  000862                     u1167:
   590  000862  2EE8               	decfsz	wreg,f,c
   591  000864  D7FE               	bra	u1167
   592  000866  2F94               	decfsz	??_main& (0+255),f,b
   593  000868  D7FC               	bra	u1167
   594  00086A  2F95               	decfsz	(??_main+1)& (0+255),f,b
   595  00086C  D7FA               	bra	u1167
   596  00086E  F000               	nop	
   597                           
   598                           ;main.c: 18: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   599  000870  0E15               	movlw	21
   600  000872  0100               	movlb	0	; () banked
   601  000874  6F95               	movwf	(??_main+1)& (0+255),b
   602  000876  0E4B               	movlw	75
   603  000878  6F94               	movwf	??_main& (0+255),b
   604  00087A  0EBE               	movlw	190
   605  00087C                     u1177:
   606  00087C  2EE8               	decfsz	wreg,f,c
   607  00087E  D7FE               	bra	u1177
   608  000880  2F94               	decfsz	??_main& (0+255),f,b
   609  000882  D7FC               	bra	u1177
   610  000884  2F95               	decfsz	(??_main+1)& (0+255),f,b
   611  000886  D7FA               	bra	u1177
   612  000888  F000               	nop	
   613                           
   614                           ;main.c: 19: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   615  00088A  0E15               	movlw	21
   616  00088C  0100               	movlb	0	; () banked
   617  00088E  6F95               	movwf	(??_main+1)& (0+255),b
   618  000890  0E4B               	movlw	75
   619  000892  6F94               	movwf	??_main& (0+255),b
   620  000894  0EBE               	movlw	190
   621  000896                     u1187:
   622  000896  2EE8               	decfsz	wreg,f,c
   623  000898  D7FE               	bra	u1187
   624  00089A  2F94               	decfsz	??_main& (0+255),f,b
   625  00089C  D7FC               	bra	u1187
   626  00089E  2F95               	decfsz	(??_main+1)& (0+255),f,b
   627  0008A0  D7FA               	bra	u1187
   628  0008A2  F000               	nop	
   629                           
   630                           ;main.c: 20: initConfigs();
   631  0008A4  EC10  F00C         	call	_initConfigs	;wreg free
   632                           
   633                           ;main.c: 21: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   634  0008A8  0E15               	movlw	21
   635  0008AA  0100               	movlb	0	; () banked
   636  0008AC  6F95               	movwf	(??_main+1)& (0+255),b
   637  0008AE  0E4B               	movlw	75
   638  0008B0  6F94               	movwf	??_main& (0+255),b
   639  0008B2  0EBE               	movlw	190
   640  0008B4                     u1197:
   641  0008B4  2EE8               	decfsz	wreg,f,c
   642  0008B6  D7FE               	bra	u1197
   643  0008B8  2F94               	decfsz	??_main& (0+255),f,b
   644  0008BA  D7FC               	bra	u1197
   645  0008BC  2F95               	decfsz	(??_main+1)& (0+255),f,b
   646  0008BE  D7FA               	bra	u1197
   647  0008C0  F000               	nop	
   648                           
   649                           ;main.c: 22: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   650  0008C2  0E15               	movlw	21
   651  0008C4  0100               	movlb	0	; () banked
   652  0008C6  6F95               	movwf	(??_main+1)& (0+255),b
   653  0008C8  0E4B               	movlw	75
   654  0008CA  6F94               	movwf	??_main& (0+255),b
   655  0008CC  0EBE               	movlw	190
   656  0008CE                     u1207:
   657  0008CE  2EE8               	decfsz	wreg,f,c
   658  0008D0  D7FE               	bra	u1207
   659  0008D2  2F94               	decfsz	??_main& (0+255),f,b
   660  0008D4  D7FC               	bra	u1207
   661  0008D6  2F95               	decfsz	(??_main+1)& (0+255),f,b
   662  0008D8  D7FA               	bra	u1207
   663  0008DA  F000               	nop	
   664                           
   665                           ;main.c: 23: clearLcd();
   666  0008DC  EC61  F00D         	call	_clearLcd	;wreg free
   667                           
   668                           ;main.c: 24: gotoLcd(0x80);
   669  0008E0  0E80               	movlw	128
   670  0008E2  EC6F  F00D         	call	_gotoLcd
   671                           
   672                           ;main.c: 25: writeCStringLcd("Nr: ");
   673  0008E6  0E4E               	movlw	low STR_1
   674  0008E8  0100               	movlb	0	; () banked
   675  0008EA  6F62               	movwf	writeCStringLcd@s& (0+255),b
   676  0008EC  0E08               	movlw	high STR_1
   677  0008EE  6F63               	movwf	(writeCStringLcd@s+1)& (0+255),b
   678  0008F0  EC24  F00D         	call	_writeCStringLcd	;wreg free
   679                           
   680                           ;main.c: 26: writeValueLcd(0.92);
   681  0008F4  0E85               	movlw	133
   682  0008F6  0100               	movlb	0	; () banked
   683  0008F8  6F89               	movwf	writeValueLcd@val& (0+255),b
   684  0008FA  0E6B               	movlw	107
   685  0008FC  6F8A               	movwf	(writeValueLcd@val+1)& (0+255),b
   686  0008FE  0E3F               	movlw	63
   687  000900  6F8B               	movwf	(writeValueLcd@val+2)& (0+255),b
   688  000902  EC99  F006         	call	_writeValueLcd	;wreg free
   689                           
   690                           ;main.c: 27: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   691  000906  0E15               	movlw	21
   692  000908  0100               	movlb	0	; () banked
   693  00090A  6F95               	movwf	(??_main+1)& (0+255),b
   694  00090C  0E4B               	movlw	75
   695  00090E  6F94               	movwf	??_main& (0+255),b
   696  000910  0EBE               	movlw	190
   697  000912                     u1217:
   698  000912  2EE8               	decfsz	wreg,f,c
   699  000914  D7FE               	bra	u1217
   700  000916  2F94               	decfsz	??_main& (0+255),f,b
   701  000918  D7FC               	bra	u1217
   702  00091A  2F95               	decfsz	(??_main+1)& (0+255),f,b
   703  00091C  D7FA               	bra	u1217
   704  00091E  F000               	nop	
   705                           
   706                           ;main.c: 28: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   707  000920  0E15               	movlw	21
   708  000922  0100               	movlb	0	; () banked
   709  000924  6F95               	movwf	(??_main+1)& (0+255),b
   710  000926  0E4B               	movlw	75
   711  000928  6F94               	movwf	??_main& (0+255),b
   712  00092A  0EBE               	movlw	190
   713  00092C                     u1227:
   714  00092C  2EE8               	decfsz	wreg,f,c
   715  00092E  D7FE               	bra	u1227
   716  000930  2F94               	decfsz	??_main& (0+255),f,b
   717  000932  D7FC               	bra	u1227
   718  000934  2F95               	decfsz	(??_main+1)& (0+255),f,b
   719  000936  D7FA               	bra	u1227
   720  000938  F000               	nop	
   721                           
   722                           ;main.c: 31: gotoLcd(0x80);
   723                           
   724                           ;main.c: 30: while(1) {
   725  00093A  0E80               	movlw	128
   726  00093C  EC6F  F00D         	call	_gotoLcd
   727                           
   728                           ;main.c: 32: writeCStringLcd("Teste Conv. ADC ");
   729  000940  0E01               	movlw	low STR_2
   730  000942  0100               	movlb	0	; () banked
   731  000944  6F62               	movwf	writeCStringLcd@s& (0+255),b
   732  000946  0E08               	movlw	high STR_2
   733  000948  6F63               	movwf	(writeCStringLcd@s+1)& (0+255),b
   734  00094A  EC24  F00D         	call	_writeCStringLcd	;wreg free
   735                           
   736                           ;main.c: 34: float valor;
   737                           ;main.c: 35: unsigned char str[7];
   738                           ;main.c: 36: unsigned char val[2];
   739                           ;main.c: 38: valor = ((float) (adc_read(0))*5) / 1023;
   740  00094E  0E00               	movlw	0
   741  000950  0100               	movlb	0	; () banked
   742  000952  6F6E               	movwf	___ftmul@f2& (0+255),b
   743  000954  0EA0               	movlw	160
   744  000956  6F6F               	movwf	(___ftmul@f2+1)& (0+255),b
   745  000958  0E40               	movlw	64
   746  00095A  6F70               	movwf	(___ftmul@f2+2)& (0+255),b
   747  00095C  0E00               	movlw	0
   748  00095E  ECD6  F00C         	call	_adc_read
   749  000962  C060  F068         	movff	?_adc_read,___lwtoft@c
   750  000966  C061  F069         	movff	?_adc_read+1,___lwtoft@c+1
   751  00096A  EC3B  F00D         	call	___lwtoft	;wreg free
   752  00096E  C068  F06B         	movff	?___lwtoft,___ftmul@f1
   753  000972  C069  F06C         	movff	?___lwtoft+1,___ftmul@f1+1
   754  000976  C06A  F06D         	movff	?___lwtoft+2,___ftmul@f1+2
   755  00097A  ECBD  F009         	call	___ftmul	;wreg free
   756  00097E  C06B  F07A         	movff	?___ftmul,___ftdiv@f1
   757  000982  C06C  F07B         	movff	?___ftmul+1,___ftdiv@f1+1
   758  000986  C06D  F07C         	movff	?___ftmul+2,___ftdiv@f1+2
   759  00098A  0EC0               	movlw	192
   760  00098C  0100               	movlb	0	; () banked
   761  00098E  6F7D               	movwf	___ftdiv@f2& (0+255),b
   762  000990  0E7F               	movlw	127
   763  000992  6F7E               	movwf	(___ftdiv@f2+1)& (0+255),b
   764  000994  0E44               	movlw	68
   765  000996  6F7F               	movwf	(___ftdiv@f2+2)& (0+255),b
   766  000998  EC38  F00A         	call	___ftdiv	;wreg free
   767  00099C  C07A  F096         	movff	?___ftdiv,main@valor
   768  0009A0  C07B  F097         	movff	?___ftdiv+1,main@valor+1
   769  0009A4  C07C  F098         	movff	?___ftdiv+2,main@valor+2
   770                           
   771                           ;main.c: 39: gotoLcd(0xC0);
   772  0009A8  0EC0               	movlw	192
   773  0009AA  EC6F  F00D         	call	_gotoLcd
   774                           
   775                           ;main.c: 40: writeStringLcd("Sinal Ir ");
   776  0009AE  0E12               	movlw	low STR_3
   777  0009B0  0100               	movlb	0	; () banked
   778  0009B2  6F62               	movwf	writeStringLcd@s& (0+255),b
   779  0009B4  0E08               	movlw	high STR_3
   780  0009B6  6F63               	movwf	(writeStringLcd@s+1)& (0+255),b
   781  0009B8  EC0D  F00D         	call	_writeStringLcd	;wreg free
   782                           
   783                           ;main.c: 41: writeValueLcd(valor);
   784  0009BC  C096  F089         	movff	main@valor,writeValueLcd@val
   785  0009C0  C097  F08A         	movff	main@valor+1,writeValueLcd@val+1
   786  0009C4  C098  F08B         	movff	main@valor+2,writeValueLcd@val+2
   787  0009C8  EC99  F006         	call	_writeValueLcd	;wreg free
   788                           
   789                           ;main.c: 42: writeStringLcd("V");
   790  0009CC  0E53               	movlw	low STR_4
   791  0009CE  0100               	movlb	0	; () banked
   792  0009D0  6F62               	movwf	writeStringLcd@s& (0+255),b
   793  0009D2  0E08               	movlw	high STR_4
   794  0009D4  6F63               	movwf	(writeStringLcd@s+1)& (0+255),b
   795  0009D6  EC0D  F00D         	call	_writeStringLcd	;wreg free
   796                           
   797                           ;main.c: 43: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   798  0009DA  0E15               	movlw	21
   799  0009DC  0100               	movlb	0	; () banked
   800  0009DE  6F95               	movwf	(??_main+1)& (0+255),b
   801  0009E0  0E4B               	movlw	75
   802  0009E2  6F94               	movwf	??_main& (0+255),b
   803  0009E4  0EBE               	movlw	190
   804  0009E6                     u1237:
   805  0009E6  2EE8               	decfsz	wreg,f,c
   806  0009E8  D7FE               	bra	u1237
   807  0009EA  2F94               	decfsz	??_main& (0+255),f,b
   808  0009EC  D7FC               	bra	u1237
   809  0009EE  2F95               	decfsz	(??_main+1)& (0+255),f,b
   810  0009F0  D7FA               	bra	u1237
   811  0009F2  F000               	nop	
   812                           
   813                           ;main.c: 45: valor = ((float) (adc_read(1))*5) / 1023;
   814  0009F4  0E00               	movlw	0
   815  0009F6  0100               	movlb	0	; () banked
   816  0009F8  6F6E               	movwf	___ftmul@f2& (0+255),b
   817  0009FA  0EA0               	movlw	160
   818  0009FC  6F6F               	movwf	(___ftmul@f2+1)& (0+255),b
   819  0009FE  0E40               	movlw	64
   820  000A00  6F70               	movwf	(___ftmul@f2+2)& (0+255),b
   821  000A02  0E01               	movlw	1
   822  000A04  ECD6  F00C         	call	_adc_read
   823  000A08  C060  F068         	movff	?_adc_read,___lwtoft@c
   824  000A0C  C061  F069         	movff	?_adc_read+1,___lwtoft@c+1
   825  000A10  EC3B  F00D         	call	___lwtoft	;wreg free
   826  000A14  C068  F06B         	movff	?___lwtoft,___ftmul@f1
   827  000A18  C069  F06C         	movff	?___lwtoft+1,___ftmul@f1+1
   828  000A1C  C06A  F06D         	movff	?___lwtoft+2,___ftmul@f1+2
   829  000A20  ECBD  F009         	call	___ftmul	;wreg free
   830  000A24  C06B  F07A         	movff	?___ftmul,___ftdiv@f1
   831  000A28  C06C  F07B         	movff	?___ftmul+1,___ftdiv@f1+1
   832  000A2C  C06D  F07C         	movff	?___ftmul+2,___ftdiv@f1+2
   833  000A30  0EC0               	movlw	192
   834  000A32  0100               	movlb	0	; () banked
   835  000A34  6F7D               	movwf	___ftdiv@f2& (0+255),b
   836  000A36  0E7F               	movlw	127
   837  000A38  6F7E               	movwf	(___ftdiv@f2+1)& (0+255),b
   838  000A3A  0E44               	movlw	68
   839  000A3C  6F7F               	movwf	(___ftdiv@f2+2)& (0+255),b
   840  000A3E  EC38  F00A         	call	___ftdiv	;wreg free
   841  000A42  C07A  F096         	movff	?___ftdiv,main@valor
   842  000A46  C07B  F097         	movff	?___ftdiv+1,main@valor+1
   843  000A4A  C07C  F098         	movff	?___ftdiv+2,main@valor+2
   844                           
   845                           ;main.c: 46: gotoLcd(0xC0);
   846  000A4E  0EC0               	movlw	192
   847  000A50  EC6F  F00D         	call	_gotoLcd
   848                           
   849                           ;main.c: 47: writeStringLcd("Sinal Is ");
   850  000A54  0E26               	movlw	low STR_5
   851  000A56  0100               	movlb	0	; () banked
   852  000A58  6F62               	movwf	writeStringLcd@s& (0+255),b
   853  000A5A  0E08               	movlw	high STR_5
   854  000A5C  6F63               	movwf	(writeStringLcd@s+1)& (0+255),b
   855  000A5E  EC0D  F00D         	call	_writeStringLcd	;wreg free
   856                           
   857                           ;main.c: 48: writeValueLcd(valor);
   858  000A62  C096  F089         	movff	main@valor,writeValueLcd@val
   859  000A66  C097  F08A         	movff	main@valor+1,writeValueLcd@val+1
   860  000A6A  C098  F08B         	movff	main@valor+2,writeValueLcd@val+2
   861  000A6E  EC99  F006         	call	_writeValueLcd	;wreg free
   862                           
   863                           ;main.c: 49: writeStringLcd("V");
   864  000A72  0E53               	movlw	low STR_4
   865  000A74  0100               	movlb	0	; () banked
   866  000A76  6F62               	movwf	writeStringLcd@s& (0+255),b
   867  000A78  0E08               	movlw	high STR_4
   868  000A7A  6F63               	movwf	(writeStringLcd@s+1)& (0+255),b
   869  000A7C  EC0D  F00D         	call	_writeStringLcd	;wreg free
   870                           
   871                           ;main.c: 50: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   872  000A80  0E15               	movlw	21
   873  000A82  0100               	movlb	0	; () banked
   874  000A84  6F95               	movwf	(??_main+1)& (0+255),b
   875  000A86  0E4B               	movlw	75
   876  000A88  6F94               	movwf	??_main& (0+255),b
   877  000A8A  0EBE               	movlw	190
   878  000A8C                     u1247:
   879  000A8C  2EE8               	decfsz	wreg,f,c
   880  000A8E  D7FE               	bra	u1247
   881  000A90  2F94               	decfsz	??_main& (0+255),f,b
   882  000A92  D7FC               	bra	u1247
   883  000A94  2F95               	decfsz	(??_main+1)& (0+255),f,b
   884  000A96  D7FA               	bra	u1247
   885  000A98  F000               	nop	
   886                           
   887                           ;main.c: 52: valor = ((float) (adc_read(2))*5) / 1023;
   888  000A9A  0E00               	movlw	0
   889  000A9C  0100               	movlb	0	; () banked
   890  000A9E  6F6E               	movwf	___ftmul@f2& (0+255),b
   891  000AA0  0EA0               	movlw	160
   892  000AA2  6F6F               	movwf	(___ftmul@f2+1)& (0+255),b
   893  000AA4  0E40               	movlw	64
   894  000AA6  6F70               	movwf	(___ftmul@f2+2)& (0+255),b
   895  000AA8  0E02               	movlw	2
   896  000AAA  ECD6  F00C         	call	_adc_read
   897  000AAE  C060  F068         	movff	?_adc_read,___lwtoft@c
   898  000AB2  C061  F069         	movff	?_adc_read+1,___lwtoft@c+1
   899  000AB6  EC3B  F00D         	call	___lwtoft	;wreg free
   900  000ABA  C068  F06B         	movff	?___lwtoft,___ftmul@f1
   901  000ABE  C069  F06C         	movff	?___lwtoft+1,___ftmul@f1+1
   902  000AC2  C06A  F06D         	movff	?___lwtoft+2,___ftmul@f1+2
   903  000AC6  ECBD  F009         	call	___ftmul	;wreg free
   904  000ACA  C06B  F07A         	movff	?___ftmul,___ftdiv@f1
   905  000ACE  C06C  F07B         	movff	?___ftmul+1,___ftdiv@f1+1
   906  000AD2  C06D  F07C         	movff	?___ftmul+2,___ftdiv@f1+2
   907  000AD6  0EC0               	movlw	192
   908  000AD8  0100               	movlb	0	; () banked
   909  000ADA  6F7D               	movwf	___ftdiv@f2& (0+255),b
   910  000ADC  0E7F               	movlw	127
   911  000ADE  6F7E               	movwf	(___ftdiv@f2+1)& (0+255),b
   912  000AE0  0E44               	movlw	68
   913  000AE2  6F7F               	movwf	(___ftdiv@f2+2)& (0+255),b
   914  000AE4  EC38  F00A         	call	___ftdiv	;wreg free
   915  000AE8  C07A  F096         	movff	?___ftdiv,main@valor
   916  000AEC  C07B  F097         	movff	?___ftdiv+1,main@valor+1
   917  000AF0  C07C  F098         	movff	?___ftdiv+2,main@valor+2
   918                           
   919                           ;main.c: 53: gotoLcd(0xC0);
   920  000AF4  0EC0               	movlw	192
   921  000AF6  EC6F  F00D         	call	_gotoLcd
   922                           
   923                           ;main.c: 54: writeStringLcd("Sinal It ");
   924  000AFA  0E3A               	movlw	low STR_7
   925  000AFC  0100               	movlb	0	; () banked
   926  000AFE  6F62               	movwf	writeStringLcd@s& (0+255),b
   927  000B00  0E08               	movlw	high STR_7
   928  000B02  6F63               	movwf	(writeStringLcd@s+1)& (0+255),b
   929  000B04  EC0D  F00D         	call	_writeStringLcd	;wreg free
   930                           
   931                           ;main.c: 55: writeValueLcd(valor);
   932  000B08  C096  F089         	movff	main@valor,writeValueLcd@val
   933  000B0C  C097  F08A         	movff	main@valor+1,writeValueLcd@val+1
   934  000B10  C098  F08B         	movff	main@valor+2,writeValueLcd@val+2
   935  000B14  EC99  F006         	call	_writeValueLcd	;wreg free
   936                           
   937                           ;main.c: 56: writeStringLcd("V");
   938  000B18  0E53               	movlw	low STR_4
   939  000B1A  0100               	movlb	0	; () banked
   940  000B1C  6F62               	movwf	writeStringLcd@s& (0+255),b
   941  000B1E  0E08               	movlw	high STR_4
   942  000B20  6F63               	movwf	(writeStringLcd@s+1)& (0+255),b
   943  000B22  EC0D  F00D         	call	_writeStringLcd	;wreg free
   944                           
   945                           ;main.c: 57: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   946  000B26  0E15               	movlw	21
   947  000B28  0100               	movlb	0	; () banked
   948  000B2A  6F95               	movwf	(??_main+1)& (0+255),b
   949  000B2C  0E4B               	movlw	75
   950  000B2E  6F94               	movwf	??_main& (0+255),b
   951  000B30  0EBE               	movlw	190
   952  000B32                     u1257:
   953  000B32  2EE8               	decfsz	wreg,f,c
   954  000B34  D7FE               	bra	u1257
   955  000B36  2F94               	decfsz	??_main& (0+255),f,b
   956  000B38  D7FC               	bra	u1257
   957  000B3A  2F95               	decfsz	(??_main+1)& (0+255),f,b
   958  000B3C  D7FA               	bra	u1257
   959  000B3E  F000               	nop	
   960                           
   961                           ;main.c: 59: valor = ((float) (adc_read(3))*5) / 1023;
   962  000B40  0E00               	movlw	0
   963  000B42  0100               	movlb	0	; () banked
   964  000B44  6F6E               	movwf	___ftmul@f2& (0+255),b
   965  000B46  0EA0               	movlw	160
   966  000B48  6F6F               	movwf	(___ftmul@f2+1)& (0+255),b
   967  000B4A  0E40               	movlw	64
   968  000B4C  6F70               	movwf	(___ftmul@f2+2)& (0+255),b
   969  000B4E  0E03               	movlw	3
   970  000B50  ECD6  F00C         	call	_adc_read
   971  000B54  C060  F068         	movff	?_adc_read,___lwtoft@c
   972  000B58  C061  F069         	movff	?_adc_read+1,___lwtoft@c+1
   973  000B5C  EC3B  F00D         	call	___lwtoft	;wreg free
   974  000B60  C068  F06B         	movff	?___lwtoft,___ftmul@f1
   975  000B64  C069  F06C         	movff	?___lwtoft+1,___ftmul@f1+1
   976  000B68  C06A  F06D         	movff	?___lwtoft+2,___ftmul@f1+2
   977  000B6C  ECBD  F009         	call	___ftmul	;wreg free
   978  000B70  C06B  F07A         	movff	?___ftmul,___ftdiv@f1
   979  000B74  C06C  F07B         	movff	?___ftmul+1,___ftdiv@f1+1
   980  000B78  C06D  F07C         	movff	?___ftmul+2,___ftdiv@f1+2
   981  000B7C  0EC0               	movlw	192
   982  000B7E  0100               	movlb	0	; () banked
   983  000B80  6F7D               	movwf	___ftdiv@f2& (0+255),b
   984  000B82  0E7F               	movlw	127
   985  000B84  6F7E               	movwf	(___ftdiv@f2+1)& (0+255),b
   986  000B86  0E44               	movlw	68
   987  000B88  6F7F               	movwf	(___ftdiv@f2+2)& (0+255),b
   988  000B8A  EC38  F00A         	call	___ftdiv	;wreg free
   989  000B8E  C07A  F096         	movff	?___ftdiv,main@valor
   990  000B92  C07B  F097         	movff	?___ftdiv+1,main@valor+1
   991  000B96  C07C  F098         	movff	?___ftdiv+2,main@valor+2
   992                           
   993                           ;main.c: 60: gotoLcd(0xC0);
   994  000B9A  0EC0               	movlw	192
   995  000B9C  EC6F  F00D         	call	_gotoLcd
   996                           
   997                           ;main.c: 61: writeStringLcd("Sinal Vr ");
   998  000BA0  0E1C               	movlw	low STR_9
   999  000BA2  0100               	movlb	0	; () banked
  1000  000BA4  6F62               	movwf	writeStringLcd@s& (0+255),b
  1001  000BA6  0E08               	movlw	high STR_9
  1002  000BA8  6F63               	movwf	(writeStringLcd@s+1)& (0+255),b
  1003  000BAA  EC0D  F00D         	call	_writeStringLcd	;wreg free
  1004                           
  1005                           ;main.c: 62: writeValueLcd(valor);
  1006  000BAE  C096  F089         	movff	main@valor,writeValueLcd@val
  1007  000BB2  C097  F08A         	movff	main@valor+1,writeValueLcd@val+1
  1008  000BB6  C098  F08B         	movff	main@valor+2,writeValueLcd@val+2
  1009  000BBA  EC99  F006         	call	_writeValueLcd	;wreg free
  1010                           
  1011                           ;main.c: 63: writeStringLcd("V");
  1012  000BBE  0E53               	movlw	low STR_4
  1013  000BC0  0100               	movlb	0	; () banked
  1014  000BC2  6F62               	movwf	writeStringLcd@s& (0+255),b
  1015  000BC4  0E08               	movlw	high STR_4
  1016  000BC6  6F63               	movwf	(writeStringLcd@s+1)& (0+255),b
  1017  000BC8  EC0D  F00D         	call	_writeStringLcd	;wreg free
  1018                           
  1019                           ;main.c: 64: _delay((unsigned long)((1000)*((16000000)/4000.0)));
  1020  000BCC  0E15               	movlw	21
  1021  000BCE  0100               	movlb	0	; () banked
  1022  000BD0  6F95               	movwf	(??_main+1)& (0+255),b
  1023  000BD2  0E4B               	movlw	75
  1024  000BD4  6F94               	movwf	??_main& (0+255),b
  1025  000BD6  0EBE               	movlw	190
  1026  000BD8                     u1267:
  1027  000BD8  2EE8               	decfsz	wreg,f,c
  1028  000BDA  D7FE               	bra	u1267
  1029  000BDC  2F94               	decfsz	??_main& (0+255),f,b
  1030  000BDE  D7FC               	bra	u1267
  1031  000BE0  2F95               	decfsz	(??_main+1)& (0+255),f,b
  1032  000BE2  D7FA               	bra	u1267
  1033  000BE4  F000               	nop	
  1034                           
  1035                           ;main.c: 66: valor = ((float) (adc_read(4))*5) / 1023;
  1036  000BE6  0E00               	movlw	0
  1037  000BE8  0100               	movlb	0	; () banked
  1038  000BEA  6F6E               	movwf	___ftmul@f2& (0+255),b
  1039  000BEC  0EA0               	movlw	160
  1040  000BEE  6F6F               	movwf	(___ftmul@f2+1)& (0+255),b
  1041  000BF0  0E40               	movlw	64
  1042  000BF2  6F70               	movwf	(___ftmul@f2+2)& (0+255),b
  1043  000BF4  0E04               	movlw	4
  1044  000BF6  ECD6  F00C         	call	_adc_read
  1045  000BFA  C060  F068         	movff	?_adc_read,___lwtoft@c
  1046  000BFE  C061  F069         	movff	?_adc_read+1,___lwtoft@c+1
  1047  000C02  EC3B  F00D         	call	___lwtoft	;wreg free
  1048  000C06  C068  F06B         	movff	?___lwtoft,___ftmul@f1
  1049  000C0A  C069  F06C         	movff	?___lwtoft+1,___ftmul@f1+1
  1050  000C0E  C06A  F06D         	movff	?___lwtoft+2,___ftmul@f1+2
  1051  000C12  ECBD  F009         	call	___ftmul	;wreg free
  1052  000C16  C06B  F07A         	movff	?___ftmul,___ftdiv@f1
  1053  000C1A  C06C  F07B         	movff	?___ftmul+1,___ftdiv@f1+1
  1054  000C1E  C06D  F07C         	movff	?___ftmul+2,___ftdiv@f1+2
  1055  000C22  0EC0               	movlw	192
  1056  000C24  0100               	movlb	0	; () banked
  1057  000C26  6F7D               	movwf	___ftdiv@f2& (0+255),b
  1058  000C28  0E7F               	movlw	127
  1059  000C2A  6F7E               	movwf	(___ftdiv@f2+1)& (0+255),b
  1060  000C2C  0E44               	movlw	68
  1061  000C2E  6F7F               	movwf	(___ftdiv@f2+2)& (0+255),b
  1062  000C30  EC38  F00A         	call	___ftdiv	;wreg free
  1063  000C34  C07A  F096         	movff	?___ftdiv,main@valor
  1064  000C38  C07B  F097         	movff	?___ftdiv+1,main@valor+1
  1065  000C3C  C07C  F098         	movff	?___ftdiv+2,main@valor+2
  1066                           
  1067                           ;main.c: 67: gotoLcd(0xC0);
  1068  000C40  0EC0               	movlw	192
  1069  000C42  EC6F  F00D         	call	_gotoLcd
  1070                           
  1071                           ;main.c: 68: writeStringLcd("Sinal Vs ");
  1072  000C46  0E30               	movlw	low STR_11
  1073  000C48  0100               	movlb	0	; () banked
  1074  000C4A  6F62               	movwf	writeStringLcd@s& (0+255),b
  1075  000C4C  0E08               	movlw	high STR_11
  1076  000C4E  6F63               	movwf	(writeStringLcd@s+1)& (0+255),b
  1077  000C50  EC0D  F00D         	call	_writeStringLcd	;wreg free
  1078                           
  1079                           ;main.c: 69: writeValueLcd(valor);
  1080  000C54  C096  F089         	movff	main@valor,writeValueLcd@val
  1081  000C58  C097  F08A         	movff	main@valor+1,writeValueLcd@val+1
  1082  000C5C  C098  F08B         	movff	main@valor+2,writeValueLcd@val+2
  1083  000C60  EC99  F006         	call	_writeValueLcd	;wreg free
  1084                           
  1085                           ;main.c: 70: writeStringLcd("V");
  1086  000C64  0E53               	movlw	low STR_4
  1087  000C66  0100               	movlb	0	; () banked
  1088  000C68  6F62               	movwf	writeStringLcd@s& (0+255),b
  1089  000C6A  0E08               	movlw	high STR_4
  1090  000C6C  6F63               	movwf	(writeStringLcd@s+1)& (0+255),b
  1091  000C6E  EC0D  F00D         	call	_writeStringLcd	;wreg free
  1092                           
  1093                           ;main.c: 71: _delay((unsigned long)((1000)*((16000000)/4000.0)));
  1094  000C72  0E15               	movlw	21
  1095  000C74  0100               	movlb	0	; () banked
  1096  000C76  6F95               	movwf	(??_main+1)& (0+255),b
  1097  000C78  0E4B               	movlw	75
  1098  000C7A  6F94               	movwf	??_main& (0+255),b
  1099  000C7C  0EBE               	movlw	190
  1100  000C7E                     u1277:
  1101  000C7E  2EE8               	decfsz	wreg,f,c
  1102  000C80  D7FE               	bra	u1277
  1103  000C82  2F94               	decfsz	??_main& (0+255),f,b
  1104  000C84  D7FC               	bra	u1277
  1105  000C86  2F95               	decfsz	(??_main+1)& (0+255),f,b
  1106  000C88  D7FA               	bra	u1277
  1107  000C8A  F000               	nop	
  1108                           
  1109                           ;main.c: 73: valor = ((float) (adc_read(5))*5) / 1023;
  1110  000C8C  0E00               	movlw	0
  1111  000C8E  0100               	movlb	0	; () banked
  1112  000C90  6F6E               	movwf	___ftmul@f2& (0+255),b
  1113  000C92  0EA0               	movlw	160
  1114  000C94  6F6F               	movwf	(___ftmul@f2+1)& (0+255),b
  1115  000C96  0E40               	movlw	64
  1116  000C98  6F70               	movwf	(___ftmul@f2+2)& (0+255),b
  1117  000C9A  0E05               	movlw	5
  1118  000C9C  ECD6  F00C         	call	_adc_read
  1119  000CA0  C060  F068         	movff	?_adc_read,___lwtoft@c
  1120  000CA4  C061  F069         	movff	?_adc_read+1,___lwtoft@c+1
  1121  000CA8  EC3B  F00D         	call	___lwtoft	;wreg free
  1122  000CAC  C068  F06B         	movff	?___lwtoft,___ftmul@f1
  1123  000CB0  C069  F06C         	movff	?___lwtoft+1,___ftmul@f1+1
  1124  000CB4  C06A  F06D         	movff	?___lwtoft+2,___ftmul@f1+2
  1125  000CB8  ECBD  F009         	call	___ftmul	;wreg free
  1126  000CBC  C06B  F07A         	movff	?___ftmul,___ftdiv@f1
  1127  000CC0  C06C  F07B         	movff	?___ftmul+1,___ftdiv@f1+1
  1128  000CC4  C06D  F07C         	movff	?___ftmul+2,___ftdiv@f1+2
  1129  000CC8  0EC0               	movlw	192
  1130  000CCA  0100               	movlb	0	; () banked
  1131  000CCC  6F7D               	movwf	___ftdiv@f2& (0+255),b
  1132  000CCE  0E7F               	movlw	127
  1133  000CD0  6F7E               	movwf	(___ftdiv@f2+1)& (0+255),b
  1134  000CD2  0E44               	movlw	68
  1135  000CD4  6F7F               	movwf	(___ftdiv@f2+2)& (0+255),b
  1136  000CD6  EC38  F00A         	call	___ftdiv	;wreg free
  1137  000CDA  C07A  F096         	movff	?___ftdiv,main@valor
  1138  000CDE  C07B  F097         	movff	?___ftdiv+1,main@valor+1
  1139  000CE2  C07C  F098         	movff	?___ftdiv+2,main@valor+2
  1140                           
  1141                           ;main.c: 74: gotoLcd(0xC0);
  1142  000CE6  0EC0               	movlw	192
  1143  000CE8  EC6F  F00D         	call	_gotoLcd
  1144                           
  1145                           ;main.c: 75: writeStringLcd("Sinal Vt ");
  1146  000CEC  0E44               	movlw	low STR_13
  1147  000CEE  0100               	movlb	0	; () banked
  1148  000CF0  6F62               	movwf	writeStringLcd@s& (0+255),b
  1149  000CF2  0E08               	movlw	high STR_13
  1150  000CF4  6F63               	movwf	(writeStringLcd@s+1)& (0+255),b
  1151  000CF6  EC0D  F00D         	call	_writeStringLcd	;wreg free
  1152                           
  1153                           ;main.c: 76: writeValueLcd(valor);
  1154  000CFA  C096  F089         	movff	main@valor,writeValueLcd@val
  1155  000CFE  C097  F08A         	movff	main@valor+1,writeValueLcd@val+1
  1156  000D02  C098  F08B         	movff	main@valor+2,writeValueLcd@val+2
  1157  000D06  EC99  F006         	call	_writeValueLcd	;wreg free
  1158                           
  1159                           ;main.c: 77: writeStringLcd("V");
  1160  000D0A  0E53               	movlw	low STR_4
  1161  000D0C  0100               	movlb	0	; () banked
  1162  000D0E  6F62               	movwf	writeStringLcd@s& (0+255),b
  1163  000D10  0E08               	movlw	high STR_4
  1164  000D12  6F63               	movwf	(writeStringLcd@s+1)& (0+255),b
  1165  000D14  EC0D  F00D         	call	_writeStringLcd	;wreg free
  1166                           
  1167                           ;main.c: 78: _delay((unsigned long)((1000)*((16000000)/4000.0)));
  1168  000D18  0E15               	movlw	21
  1169  000D1A  0100               	movlb	0	; () banked
  1170  000D1C  6F95               	movwf	(??_main+1)& (0+255),b
  1171  000D1E  0E4B               	movlw	75
  1172  000D20  6F94               	movwf	??_main& (0+255),b
  1173  000D22  0EBE               	movlw	190
  1174  000D24                     u1287:
  1175  000D24  2EE8               	decfsz	wreg,f,c
  1176  000D26  D7FE               	bra	u1287
  1177  000D28  2F94               	decfsz	??_main& (0+255),f,b
  1178  000D2A  D7FC               	bra	u1287
  1179  000D2C  2F95               	decfsz	(??_main+1)& (0+255),f,b
  1180  000D2E  D7FA               	bra	u1287
  1181  000D30  D603               	goto	L1
  1182  000D32                     __end_of_main:
  1183                           	opt stack 0
  1184                           tblptru	equ	0xFF8
  1185                           wreg	equ	0xFE8
  1186                           
  1187 ;; *************** function _writeValueLcd *****************
  1188 ;; Defined at:
  1189 ;;		line 53 in file "lcd.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;  val             3   41[BANK0 ] float 
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;  x               4   48[BANK0 ] long 
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  1    wreg      void 
  1196 ;; Registers used:
  1197 ;;		wreg, status,2, status,0, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1203 ;;      Params:         0       3       0       0       0       0       0       0       0
  1204 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1205 ;;      Temps:          0       4       0       0       0       0       0       0       0
  1206 ;;      Totals:         0      11       0       0       0       0       0       0       0
  1207 ;;Total ram usage:       11 bytes
  1208 ;; Hardware stack levels used:    1
  1209 ;; Hardware stack levels required when called:    5
  1210 ;; This function calls:
  1211 ;;		___aldiv
  1212 ;;		___almod
  1213 ;;		___ftmul
  1214 ;;		___fttol
  1215 ;;		___lmul
  1216 ;;		_writeLcd
  1217 ;; This function is called by:
  1218 ;;		_main
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text1
  1223  000D32                     __ptext1:
  1224                           	opt stack 0
  1225  000D32                     _writeValueLcd:
  1226                           	opt stack 25
  1227                           
  1228                           ;lcd.c: 54: LATBbits.LATB4 = 1;
  1229                           
  1230                           ;incstack = 0
  1231  000D32  888A               	bsf	3978,4,c	;volatile
  1232                           
  1233                           ;lcd.c: 55: long x = val*100;
  1234  000D34  0E00               	movlw	0
  1235  000D36  0100               	movlb	0	; () banked
  1236  000D38  6F6E               	movwf	___ftmul@f2& (0+255),b
  1237  000D3A  0EC8               	movlw	200
  1238  000D3C  6F6F               	movwf	(___ftmul@f2+1)& (0+255),b
  1239  000D3E  0E42               	movlw	66
  1240  000D40  6F70               	movwf	(___ftmul@f2+2)& (0+255),b
  1241  000D42  C089  F06B         	movff	writeValueLcd@val,___ftmul@f1
  1242  000D46  C08A  F06C         	movff	writeValueLcd@val+1,___ftmul@f1+1
  1243  000D4A  C08B  F06D         	movff	writeValueLcd@val+2,___ftmul@f1+2
  1244  000D4E  ECBD  F009         	call	___ftmul	;wreg free
  1245  000D52  C06B  F07A         	movff	?___ftmul,___fttol@f1
  1246  000D56  C06C  F07B         	movff	?___ftmul+1,___fttol@f1+1
  1247  000D5A  C06D  F07C         	movff	?___ftmul+2,___fttol@f1+2
  1248  000D5E  EC41  F009         	call	___fttol	;wreg free
  1249  000D62  C07A  F090         	movff	?___fttol,writeValueLcd@x
  1250  000D66  C07B  F091         	movff	?___fttol+1,writeValueLcd@x+1
  1251  000D6A  C07C  F092         	movff	?___fttol+2,writeValueLcd@x+2
  1252  000D6E  C07D  F093         	movff	?___fttol+3,writeValueLcd@x+3
  1253                           
  1254                           ;lcd.c: 56: if(val<0.0) { x *= -1; writeLcd('-');}
  1255  000D72  0100               	movlb	0	; () banked
  1256  000D74  AF8B               	btfss	(writeValueLcd@val+2)& (0+255),7,b
  1257  000D76  D01D               	goto	l137
  1258                           
  1259                           ; BSR set to: 0
  1260  000D78  C090  F060         	movff	writeValueLcd@x,___lmul@multiplier
  1261  000D7C  C091  F061         	movff	writeValueLcd@x+1,___lmul@multiplier+1
  1262  000D80  C092  F062         	movff	writeValueLcd@x+2,___lmul@multiplier+2
  1263  000D84  C093  F063         	movff	writeValueLcd@x+3,___lmul@multiplier+3
  1264  000D88  0EFF               	movlw	255
  1265  000D8A  6F64               	movwf	___lmul@multiplicand& (0+255),b
  1266  000D8C  0EFF               	movlw	255
  1267  000D8E  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  1268  000D90  0EFF               	movlw	255
  1269  000D92  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
  1270  000D94  0EFF               	movlw	255
  1271  000D96  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
  1272  000D98  EC58  F00C         	call	___lmul	;wreg free
  1273  000D9C  C060  F090         	movff	?___lmul,writeValueLcd@x
  1274  000DA0  C061  F091         	movff	?___lmul+1,writeValueLcd@x+1
  1275  000DA4  C062  F092         	movff	?___lmul+2,writeValueLcd@x+2
  1276  000DA8  C063  F093         	movff	?___lmul+3,writeValueLcd@x+3
  1277  000DAC  0E2D               	movlw	45
  1278  000DAE  EC84  F00C         	call	_writeLcd
  1279  000DB2                     l137:
  1280                           
  1281                           ;lcd.c: 57: if(x > 1000) {
  1282  000DB2  0100               	movlb	0	; () banked
  1283  000DB4  BF93               	btfsc	(writeValueLcd@x+3)& (0+255),7,b
  1284  000DB6  D0B9               	goto	l138
  1285  000DB8  5193               	movf	(writeValueLcd@x+3)& (0+255),w,b
  1286  000DBA  1192               	iorwf	(writeValueLcd@x+2)& (0+255),w,b
  1287  000DBC  E106               	bnz	u1060
  1288  000DBE  0EE9               	movlw	233
  1289  000DC0  5D90               	subwf	writeValueLcd@x& (0+255),w,b
  1290  000DC2  0E03               	movlw	3
  1291  000DC4  5991               	subwfb	(writeValueLcd@x+1)& (0+255),w,b
  1292  000DC6  A0D8               	btfss	status,0,c
  1293  000DC8  D0B0               	goto	l138
  1294  000DCA                     u1060:
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;lcd.c: 58: if(x > 10000) writeLcd(((x%100000-x%10000)/10000)+48);
  1298  000DCA  BF93               	btfsc	(writeValueLcd@x+3)& (0+255),7,b
  1299  000DCC  D05B               	goto	l139
  1300  000DCE  5193               	movf	(writeValueLcd@x+3)& (0+255),w,b
  1301  000DD0  1192               	iorwf	(writeValueLcd@x+2)& (0+255),w,b
  1302  000DD2  E106               	bnz	u1070
  1303  000DD4  0E11               	movlw	17
  1304  000DD6  5D90               	subwf	writeValueLcd@x& (0+255),w,b
  1305  000DD8  0E27               	movlw	39
  1306  000DDA  5991               	subwfb	(writeValueLcd@x+1)& (0+255),w,b
  1307  000DDC  A0D8               	btfss	status,0,c
  1308  000DDE  D052               	goto	l139
  1309  000DE0                     u1070:
  1310                           
  1311                           ; BSR set to: 0
  1312  000DE0  0EA0               	movlw	160
  1313  000DE2  6F64               	movwf	___almod@divisor& (0+255),b
  1314  000DE4  0E86               	movlw	134
  1315  000DE6  6F65               	movwf	(___almod@divisor+1)& (0+255),b
  1316  000DE8  0E01               	movlw	1
  1317  000DEA  6F66               	movwf	(___almod@divisor+2)& (0+255),b
  1318  000DEC  0E00               	movlw	0
  1319  000DEE  6F67               	movwf	(___almod@divisor+3)& (0+255),b
  1320  000DF0  C090  F060         	movff	writeValueLcd@x,___almod@dividend
  1321  000DF4  C091  F061         	movff	writeValueLcd@x+1,___almod@dividend+1
  1322  000DF8  C092  F062         	movff	writeValueLcd@x+2,___almod@dividend+2
  1323  000DFC  C093  F063         	movff	writeValueLcd@x+3,___almod@dividend+3
  1324  000E00  EC6B  F00B         	call	___almod	;wreg free
  1325  000E04  C060  F08C         	movff	?___almod,??_writeValueLcd
  1326  000E08  C061  F08D         	movff	?___almod+1,??_writeValueLcd+1
  1327  000E0C  C062  F08E         	movff	?___almod+2,??_writeValueLcd+2
  1328  000E10  C063  F08F         	movff	?___almod+3,??_writeValueLcd+3
  1329  000E14  0E10               	movlw	16
  1330  000E16  0100               	movlb	0	; () banked
  1331  000E18  6F64               	movwf	___almod@divisor& (0+255),b
  1332  000E1A  0E27               	movlw	39
  1333  000E1C  6F65               	movwf	(___almod@divisor+1)& (0+255),b
  1334  000E1E  0E00               	movlw	0
  1335  000E20  6F66               	movwf	(___almod@divisor+2)& (0+255),b
  1336  000E22  0E00               	movlw	0
  1337  000E24  6F67               	movwf	(___almod@divisor+3)& (0+255),b
  1338  000E26  C090  F060         	movff	writeValueLcd@x,___almod@dividend
  1339  000E2A  C091  F061         	movff	writeValueLcd@x+1,___almod@dividend+1
  1340  000E2E  C092  F062         	movff	writeValueLcd@x+2,___almod@dividend+2
  1341  000E32  C093  F063         	movff	writeValueLcd@x+3,___almod@dividend+3
  1342  000E36  EC6B  F00B         	call	___almod	;wreg free
  1343  000E3A  0100               	movlb	0	; () banked
  1344  000E3C  1F60               	comf	?___almod& (0+255),f,b
  1345  000E3E  1F61               	comf	(?___almod+1)& (0+255),f,b
  1346  000E40  1F62               	comf	(?___almod+2)& (0+255),f,b
  1347  000E42  1F63               	comf	(?___almod+3)& (0+255),f,b
  1348  000E44  2B60               	incf	?___almod& (0+255),f,b
  1349  000E46  0E00               	movlw	0
  1350  000E48  2361               	addwfc	(?___almod+1)& (0+255),f,b
  1351  000E4A  2362               	addwfc	(?___almod+2)& (0+255),f,b
  1352  000E4C  2363               	addwfc	(?___almod+3)& (0+255),f,b
  1353  000E4E  5160               	movf	?___almod& (0+255),w,b
  1354  000E50  258C               	addwf	??_writeValueLcd& (0+255),w,b
  1355  000E52  6F6A               	movwf	___aldiv@dividend& (0+255),b
  1356  000E54  5161               	movf	(?___almod+1)& (0+255),w,b
  1357  000E56  218D               	addwfc	(??_writeValueLcd+1)& (0+255),w,b
  1358  000E58  6F6B               	movwf	(___aldiv@dividend+1)& (0+255),b
  1359  000E5A  5162               	movf	(?___almod+2)& (0+255),w,b
  1360  000E5C  218E               	addwfc	(??_writeValueLcd+2)& (0+255),w,b
  1361  000E5E  6F6C               	movwf	(___aldiv@dividend+2)& (0+255),b
  1362  000E60  5163               	movf	(?___almod+3)& (0+255),w,b
  1363  000E62  218F               	addwfc	(??_writeValueLcd+3)& (0+255),w,b
  1364  000E64  6F6D               	movwf	(___aldiv@dividend+3)& (0+255),b
  1365  000E66  0E10               	movlw	16
  1366  000E68  6F6E               	movwf	___aldiv@divisor& (0+255),b
  1367  000E6A  0E27               	movlw	39
  1368  000E6C  6F6F               	movwf	(___aldiv@divisor+1)& (0+255),b
  1369  000E6E  0E00               	movlw	0
  1370  000E70  6F70               	movwf	(___aldiv@divisor+2)& (0+255),b
  1371  000E72  0E00               	movlw	0
  1372  000E74  6F71               	movwf	(___aldiv@divisor+3)& (0+255),b
  1373  000E76  ECAC  F00A         	call	___aldiv	;wreg free
  1374  000E7A  0100               	movlb	0	; () banked
  1375  000E7C  516A               	movf	?___aldiv& (0+255),w,b
  1376  000E7E  0F30               	addlw	48
  1377  000E80  EC84  F00C         	call	_writeLcd
  1378  000E84                     l139:
  1379                           
  1380                           ;lcd.c: 59: writeLcd(((x%10000-x%1000)/1000)+48);
  1381  000E84  0E10               	movlw	16
  1382  000E86  0100               	movlb	0	; () banked
  1383  000E88  6F64               	movwf	___almod@divisor& (0+255),b
  1384  000E8A  0E27               	movlw	39
  1385  000E8C  6F65               	movwf	(___almod@divisor+1)& (0+255),b
  1386  000E8E  0E00               	movlw	0
  1387  000E90  6F66               	movwf	(___almod@divisor+2)& (0+255),b
  1388  000E92  0E00               	movlw	0
  1389  000E94  6F67               	movwf	(___almod@divisor+3)& (0+255),b
  1390  000E96  C090  F060         	movff	writeValueLcd@x,___almod@dividend
  1391  000E9A  C091  F061         	movff	writeValueLcd@x+1,___almod@dividend+1
  1392  000E9E  C092  F062         	movff	writeValueLcd@x+2,___almod@dividend+2
  1393  000EA2  C093  F063         	movff	writeValueLcd@x+3,___almod@dividend+3
  1394  000EA6  EC6B  F00B         	call	___almod	;wreg free
  1395  000EAA  C060  F08C         	movff	?___almod,??_writeValueLcd
  1396  000EAE  C061  F08D         	movff	?___almod+1,??_writeValueLcd+1
  1397  000EB2  C062  F08E         	movff	?___almod+2,??_writeValueLcd+2
  1398  000EB6  C063  F08F         	movff	?___almod+3,??_writeValueLcd+3
  1399  000EBA  0EE8               	movlw	232
  1400  000EBC  0100               	movlb	0	; () banked
  1401  000EBE  6F64               	movwf	___almod@divisor& (0+255),b
  1402  000EC0  0E03               	movlw	3
  1403  000EC2  6F65               	movwf	(___almod@divisor+1)& (0+255),b
  1404  000EC4  0E00               	movlw	0
  1405  000EC6  6F66               	movwf	(___almod@divisor+2)& (0+255),b
  1406  000EC8  0E00               	movlw	0
  1407  000ECA  6F67               	movwf	(___almod@divisor+3)& (0+255),b
  1408  000ECC  C090  F060         	movff	writeValueLcd@x,___almod@dividend
  1409  000ED0  C091  F061         	movff	writeValueLcd@x+1,___almod@dividend+1
  1410  000ED4  C092  F062         	movff	writeValueLcd@x+2,___almod@dividend+2
  1411  000ED8  C093  F063         	movff	writeValueLcd@x+3,___almod@dividend+3
  1412  000EDC  EC6B  F00B         	call	___almod	;wreg free
  1413  000EE0  0100               	movlb	0	; () banked
  1414  000EE2  1F60               	comf	?___almod& (0+255),f,b
  1415  000EE4  1F61               	comf	(?___almod+1)& (0+255),f,b
  1416  000EE6  1F62               	comf	(?___almod+2)& (0+255),f,b
  1417  000EE8  1F63               	comf	(?___almod+3)& (0+255),f,b
  1418  000EEA  2B60               	incf	?___almod& (0+255),f,b
  1419  000EEC  0E00               	movlw	0
  1420  000EEE  2361               	addwfc	(?___almod+1)& (0+255),f,b
  1421  000EF0  2362               	addwfc	(?___almod+2)& (0+255),f,b
  1422  000EF2  2363               	addwfc	(?___almod+3)& (0+255),f,b
  1423  000EF4  5160               	movf	?___almod& (0+255),w,b
  1424  000EF6  258C               	addwf	??_writeValueLcd& (0+255),w,b
  1425  000EF8  6F6A               	movwf	___aldiv@dividend& (0+255),b
  1426  000EFA  5161               	movf	(?___almod+1)& (0+255),w,b
  1427  000EFC  218D               	addwfc	(??_writeValueLcd+1)& (0+255),w,b
  1428  000EFE  6F6B               	movwf	(___aldiv@dividend+1)& (0+255),b
  1429  000F00  5162               	movf	(?___almod+2)& (0+255),w,b
  1430  000F02  218E               	addwfc	(??_writeValueLcd+2)& (0+255),w,b
  1431  000F04  6F6C               	movwf	(___aldiv@dividend+2)& (0+255),b
  1432  000F06  5163               	movf	(?___almod+3)& (0+255),w,b
  1433  000F08  218F               	addwfc	(??_writeValueLcd+3)& (0+255),w,b
  1434  000F0A  6F6D               	movwf	(___aldiv@dividend+3)& (0+255),b
  1435  000F0C  0EE8               	movlw	232
  1436  000F0E  6F6E               	movwf	___aldiv@divisor& (0+255),b
  1437  000F10  0E03               	movlw	3
  1438  000F12  6F6F               	movwf	(___aldiv@divisor+1)& (0+255),b
  1439  000F14  0E00               	movlw	0
  1440  000F16  6F70               	movwf	(___aldiv@divisor+2)& (0+255),b
  1441  000F18  0E00               	movlw	0
  1442  000F1A  6F71               	movwf	(___aldiv@divisor+3)& (0+255),b
  1443  000F1C  ECAC  F00A         	call	___aldiv	;wreg free
  1444  000F20  0100               	movlb	0	; () banked
  1445  000F22  516A               	movf	?___aldiv& (0+255),w,b
  1446  000F24  0F30               	addlw	48
  1447  000F26  EC84  F00C         	call	_writeLcd
  1448  000F2A                     l138:
  1449                           
  1450                           ;lcd.c: 60: }
  1451                           ;lcd.c: 61: writeLcd(((x%1000-x%100)/100)+48);
  1452  000F2A  0EE8               	movlw	232
  1453  000F2C  0100               	movlb	0	; () banked
  1454  000F2E  6F64               	movwf	___almod@divisor& (0+255),b
  1455  000F30  0E03               	movlw	3
  1456  000F32  6F65               	movwf	(___almod@divisor+1)& (0+255),b
  1457  000F34  0E00               	movlw	0
  1458  000F36  6F66               	movwf	(___almod@divisor+2)& (0+255),b
  1459  000F38  0E00               	movlw	0
  1460  000F3A  6F67               	movwf	(___almod@divisor+3)& (0+255),b
  1461  000F3C  C090  F060         	movff	writeValueLcd@x,___almod@dividend
  1462  000F40  C091  F061         	movff	writeValueLcd@x+1,___almod@dividend+1
  1463  000F44  C092  F062         	movff	writeValueLcd@x+2,___almod@dividend+2
  1464  000F48  C093  F063         	movff	writeValueLcd@x+3,___almod@dividend+3
  1465  000F4C  EC6B  F00B         	call	___almod	;wreg free
  1466  000F50  C060  F08C         	movff	?___almod,??_writeValueLcd
  1467  000F54  C061  F08D         	movff	?___almod+1,??_writeValueLcd+1
  1468  000F58  C062  F08E         	movff	?___almod+2,??_writeValueLcd+2
  1469  000F5C  C063  F08F         	movff	?___almod+3,??_writeValueLcd+3
  1470  000F60  0E64               	movlw	100
  1471  000F62  0100               	movlb	0	; () banked
  1472  000F64  6F64               	movwf	___almod@divisor& (0+255),b
  1473  000F66  0E00               	movlw	0
  1474  000F68  6F65               	movwf	(___almod@divisor+1)& (0+255),b
  1475  000F6A  0E00               	movlw	0
  1476  000F6C  6F66               	movwf	(___almod@divisor+2)& (0+255),b
  1477  000F6E  0E00               	movlw	0
  1478  000F70  6F67               	movwf	(___almod@divisor+3)& (0+255),b
  1479  000F72  C090  F060         	movff	writeValueLcd@x,___almod@dividend
  1480  000F76  C091  F061         	movff	writeValueLcd@x+1,___almod@dividend+1
  1481  000F7A  C092  F062         	movff	writeValueLcd@x+2,___almod@dividend+2
  1482  000F7E  C093  F063         	movff	writeValueLcd@x+3,___almod@dividend+3
  1483  000F82  EC6B  F00B         	call	___almod	;wreg free
  1484  000F86  0100               	movlb	0	; () banked
  1485  000F88  1F60               	comf	?___almod& (0+255),f,b
  1486  000F8A  1F61               	comf	(?___almod+1)& (0+255),f,b
  1487  000F8C  1F62               	comf	(?___almod+2)& (0+255),f,b
  1488  000F8E  1F63               	comf	(?___almod+3)& (0+255),f,b
  1489  000F90  2B60               	incf	?___almod& (0+255),f,b
  1490  000F92  0E00               	movlw	0
  1491  000F94  2361               	addwfc	(?___almod+1)& (0+255),f,b
  1492  000F96  2362               	addwfc	(?___almod+2)& (0+255),f,b
  1493  000F98  2363               	addwfc	(?___almod+3)& (0+255),f,b
  1494  000F9A  5160               	movf	?___almod& (0+255),w,b
  1495  000F9C  258C               	addwf	??_writeValueLcd& (0+255),w,b
  1496  000F9E  6F6A               	movwf	___aldiv@dividend& (0+255),b
  1497  000FA0  5161               	movf	(?___almod+1)& (0+255),w,b
  1498  000FA2  218D               	addwfc	(??_writeValueLcd+1)& (0+255),w,b
  1499  000FA4  6F6B               	movwf	(___aldiv@dividend+1)& (0+255),b
  1500  000FA6  5162               	movf	(?___almod+2)& (0+255),w,b
  1501  000FA8  218E               	addwfc	(??_writeValueLcd+2)& (0+255),w,b
  1502  000FAA  6F6C               	movwf	(___aldiv@dividend+2)& (0+255),b
  1503  000FAC  5163               	movf	(?___almod+3)& (0+255),w,b
  1504  000FAE  218F               	addwfc	(??_writeValueLcd+3)& (0+255),w,b
  1505  000FB0  6F6D               	movwf	(___aldiv@dividend+3)& (0+255),b
  1506  000FB2  0E64               	movlw	100
  1507  000FB4  6F6E               	movwf	___aldiv@divisor& (0+255),b
  1508  000FB6  0E00               	movlw	0
  1509  000FB8  6F6F               	movwf	(___aldiv@divisor+1)& (0+255),b
  1510  000FBA  0E00               	movlw	0
  1511  000FBC  6F70               	movwf	(___aldiv@divisor+2)& (0+255),b
  1512  000FBE  0E00               	movlw	0
  1513  000FC0  6F71               	movwf	(___aldiv@divisor+3)& (0+255),b
  1514  000FC2  ECAC  F00A         	call	___aldiv	;wreg free
  1515  000FC6  0100               	movlb	0	; () banked
  1516  000FC8  516A               	movf	?___aldiv& (0+255),w,b
  1517  000FCA  0F30               	addlw	48
  1518  000FCC  EC84  F00C         	call	_writeLcd
  1519                           
  1520                           ;lcd.c: 62: writeLcd('.');
  1521  000FD0  0E2E               	movlw	46
  1522  000FD2  EC84  F00C         	call	_writeLcd
  1523                           
  1524                           ;lcd.c: 63: writeLcd(((x%100-x%10)/10)+48);
  1525  000FD6  0E64               	movlw	100
  1526  000FD8  0100               	movlb	0	; () banked
  1527  000FDA  6F64               	movwf	___almod@divisor& (0+255),b
  1528  000FDC  0E00               	movlw	0
  1529  000FDE  6F65               	movwf	(___almod@divisor+1)& (0+255),b
  1530  000FE0  0E00               	movlw	0
  1531  000FE2  6F66               	movwf	(___almod@divisor+2)& (0+255),b
  1532  000FE4  0E00               	movlw	0
  1533  000FE6  6F67               	movwf	(___almod@divisor+3)& (0+255),b
  1534  000FE8  C090  F060         	movff	writeValueLcd@x,___almod@dividend
  1535  000FEC  C091  F061         	movff	writeValueLcd@x+1,___almod@dividend+1
  1536  000FF0  C092  F062         	movff	writeValueLcd@x+2,___almod@dividend+2
  1537  000FF4  C093  F063         	movff	writeValueLcd@x+3,___almod@dividend+3
  1538  000FF8  EC6B  F00B         	call	___almod	;wreg free
  1539  000FFC  C060  F08C         	movff	?___almod,??_writeValueLcd
  1540  001000  C061  F08D         	movff	?___almod+1,??_writeValueLcd+1
  1541  001004  C062  F08E         	movff	?___almod+2,??_writeValueLcd+2
  1542  001008  C063  F08F         	movff	?___almod+3,??_writeValueLcd+3
  1543  00100C  0E0A               	movlw	10
  1544  00100E  0100               	movlb	0	; () banked
  1545  001010  6F64               	movwf	___almod@divisor& (0+255),b
  1546  001012  0E00               	movlw	0
  1547  001014  6F65               	movwf	(___almod@divisor+1)& (0+255),b
  1548  001016  0E00               	movlw	0
  1549  001018  6F66               	movwf	(___almod@divisor+2)& (0+255),b
  1550  00101A  0E00               	movlw	0
  1551  00101C  6F67               	movwf	(___almod@divisor+3)& (0+255),b
  1552  00101E  C090  F060         	movff	writeValueLcd@x,___almod@dividend
  1553  001022  C091  F061         	movff	writeValueLcd@x+1,___almod@dividend+1
  1554  001026  C092  F062         	movff	writeValueLcd@x+2,___almod@dividend+2
  1555  00102A  C093  F063         	movff	writeValueLcd@x+3,___almod@dividend+3
  1556  00102E  EC6B  F00B         	call	___almod	;wreg free
  1557  001032  0100               	movlb	0	; () banked
  1558  001034  1F60               	comf	?___almod& (0+255),f,b
  1559  001036  1F61               	comf	(?___almod+1)& (0+255),f,b
  1560  001038  1F62               	comf	(?___almod+2)& (0+255),f,b
  1561  00103A  1F63               	comf	(?___almod+3)& (0+255),f,b
  1562  00103C  2B60               	incf	?___almod& (0+255),f,b
  1563  00103E  0E00               	movlw	0
  1564  001040  2361               	addwfc	(?___almod+1)& (0+255),f,b
  1565  001042  2362               	addwfc	(?___almod+2)& (0+255),f,b
  1566  001044  2363               	addwfc	(?___almod+3)& (0+255),f,b
  1567  001046  5160               	movf	?___almod& (0+255),w,b
  1568  001048  258C               	addwf	??_writeValueLcd& (0+255),w,b
  1569  00104A  6F6A               	movwf	___aldiv@dividend& (0+255),b
  1570  00104C  5161               	movf	(?___almod+1)& (0+255),w,b
  1571  00104E  218D               	addwfc	(??_writeValueLcd+1)& (0+255),w,b
  1572  001050  6F6B               	movwf	(___aldiv@dividend+1)& (0+255),b
  1573  001052  5162               	movf	(?___almod+2)& (0+255),w,b
  1574  001054  218E               	addwfc	(??_writeValueLcd+2)& (0+255),w,b
  1575  001056  6F6C               	movwf	(___aldiv@dividend+2)& (0+255),b
  1576  001058  5163               	movf	(?___almod+3)& (0+255),w,b
  1577  00105A  218F               	addwfc	(??_writeValueLcd+3)& (0+255),w,b
  1578  00105C  6F6D               	movwf	(___aldiv@dividend+3)& (0+255),b
  1579  00105E  0E0A               	movlw	10
  1580  001060  6F6E               	movwf	___aldiv@divisor& (0+255),b
  1581  001062  0E00               	movlw	0
  1582  001064  6F6F               	movwf	(___aldiv@divisor+1)& (0+255),b
  1583  001066  0E00               	movlw	0
  1584  001068  6F70               	movwf	(___aldiv@divisor+2)& (0+255),b
  1585  00106A  0E00               	movlw	0
  1586  00106C  6F71               	movwf	(___aldiv@divisor+3)& (0+255),b
  1587  00106E  ECAC  F00A         	call	___aldiv	;wreg free
  1588  001072  0100               	movlb	0	; () banked
  1589  001074  516A               	movf	?___aldiv& (0+255),w,b
  1590  001076  0F30               	addlw	48
  1591  001078  EC84  F00C         	call	_writeLcd
  1592                           
  1593                           ;lcd.c: 64: writeLcd((x%10)+48);
  1594  00107C  C090  F060         	movff	writeValueLcd@x,___almod@dividend
  1595  001080  C091  F061         	movff	writeValueLcd@x+1,___almod@dividend+1
  1596  001084  C092  F062         	movff	writeValueLcd@x+2,___almod@dividend+2
  1597  001088  C093  F063         	movff	writeValueLcd@x+3,___almod@dividend+3
  1598  00108C  0E0A               	movlw	10
  1599  00108E  0100               	movlb	0	; () banked
  1600  001090  6F64               	movwf	___almod@divisor& (0+255),b
  1601  001092  0E00               	movlw	0
  1602  001094  6F65               	movwf	(___almod@divisor+1)& (0+255),b
  1603  001096  0E00               	movlw	0
  1604  001098  6F66               	movwf	(___almod@divisor+2)& (0+255),b
  1605  00109A  0E00               	movlw	0
  1606  00109C  6F67               	movwf	(___almod@divisor+3)& (0+255),b
  1607  00109E  EC6B  F00B         	call	___almod	;wreg free
  1608  0010A2  0100               	movlb	0	; () banked
  1609  0010A4  5160               	movf	?___almod& (0+255),w,b
  1610  0010A6  0F30               	addlw	48
  1611  0010A8  EC84  F00C         	call	_writeLcd
  1612  0010AC  0012               	return		;funcret
  1613  0010AE                     __end_of_writeValueLcd:
  1614                           	opt stack 0
  1615                           tblptru	equ	0xFF8
  1616                           wreg	equ	0xFE8
  1617                           status	equ	0xFD8
  1618                           
  1619 ;; *************** function ___lmul *****************
  1620 ;; Defined at:
  1621 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1624 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;  product         4    8[BANK0 ] unsigned long 
  1627 ;; Return value:  Size  Location     Type
  1628 ;;                  4    0[BANK0 ] unsigned long 
  1629 ;; Registers used:
  1630 ;;		wreg, status,2, status,0
  1631 ;; Tracked objects:
  1632 ;;		On entry : 0/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1636 ;;      Params:         0       8       0       0       0       0       0       0       0
  1637 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1638 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1639 ;;      Totals:         0      12       0       0       0       0       0       0       0
  1640 ;;Total ram usage:       12 bytes
  1641 ;; Hardware stack levels used:    1
  1642 ;; Hardware stack levels required when called:    3
  1643 ;; This function calls:
  1644 ;;		Nothing
  1645 ;; This function is called by:
  1646 ;;		_writeValueLcd
  1647 ;; This function uses a non-reentrant model
  1648 ;;
  1649                           
  1650                           	psect	text2
  1651  0018B0                     __ptext2:
  1652                           	opt stack 0
  1653  0018B0                     ___lmul:
  1654                           	opt stack 26
  1655                           
  1656                           ;incstack = 0
  1657  0018B0  0E00               	movlw	0
  1658  0018B2  0100               	movlb	0	; () banked
  1659  0018B4  6F68               	movwf	___lmul@product& (0+255),b
  1660  0018B6  0E00               	movlw	0
  1661  0018B8  6F69               	movwf	(___lmul@product+1)& (0+255),b
  1662  0018BA  0E00               	movlw	0
  1663  0018BC  6F6A               	movwf	(___lmul@product+2)& (0+255),b
  1664  0018BE  0E00               	movlw	0
  1665  0018C0  6F6B               	movwf	(___lmul@product+3)& (0+255),b
  1666  0018C2                     
  1667                           ; BSR set to: 0
  1668                           
  1669                           ; BSR set to: 0
  1670  0018C2  A160               	btfss	___lmul@multiplier& (0+255),0,b
  1671  0018C4  D008               	goto	l171
  1672                           
  1673                           ; BSR set to: 0
  1674  0018C6  5164               	movf	___lmul@multiplicand& (0+255),w,b
  1675  0018C8  2768               	addwf	___lmul@product& (0+255),f,b
  1676  0018CA  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  1677  0018CC  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
  1678  0018CE  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  1679  0018D0  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
  1680  0018D2  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  1681  0018D4  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
  1682  0018D6                     l171:
  1683                           
  1684                           ; BSR set to: 0
  1685                           
  1686                           ; BSR set to: 0
  1687  0018D6  90D8               	bcf	status,0,c
  1688  0018D8  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
  1689  0018DA  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  1690  0018DC  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  1691  0018DE  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  1692                           
  1693                           ; BSR set to: 0
  1694  0018E0  90D8               	bcf	status,0,c
  1695  0018E2  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  1696  0018E4  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  1697  0018E6  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  1698  0018E8  3360               	rrcf	___lmul@multiplier& (0+255),f,b
  1699  0018EA  5160               	movf	___lmul@multiplier& (0+255),w,b
  1700  0018EC  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  1701  0018EE  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  1702  0018F0  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  1703  0018F2  A4D8               	btfss	status,2,c
  1704  0018F4  D7E6               	goto	l170
  1705                           
  1706                           ; BSR set to: 0
  1707  0018F6  C068  F060         	movff	___lmul@product,?___lmul
  1708  0018FA  C069  F061         	movff	___lmul@product+1,?___lmul+1
  1709  0018FE  C06A  F062         	movff	___lmul@product+2,?___lmul+2
  1710  001902  C06B  F063         	movff	___lmul@product+3,?___lmul+3
  1711                           
  1712                           ; BSR set to: 0
  1713  001906  0012               	return		;funcret
  1714  001908                     __end_of___lmul:
  1715                           	opt stack 0
  1716                           tblptru	equ	0xFF8
  1717                           wreg	equ	0xFE8
  1718                           status	equ	0xFD8
  1719                           
  1720 ;; *************** function ___fttol *****************
  1721 ;; Defined at:
  1722 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;  f1              3   26[BANK0 ] float 
  1725 ;; Auto vars:     Size  Location     Type
  1726 ;;  lval            4   36[BANK0 ] unsigned long 
  1727 ;;  exp1            1   40[BANK0 ] unsigned char 
  1728 ;;  sign1           1   35[BANK0 ] unsigned char 
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  4   26[BANK0 ] long 
  1731 ;; Registers used:
  1732 ;;		wreg, status,2, status,0
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1738 ;;      Params:         0       4       0       0       0       0       0       0       0
  1739 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1740 ;;      Temps:          0       5       0       0       0       0       0       0       0
  1741 ;;      Totals:         0      15       0       0       0       0       0       0       0
  1742 ;;Total ram usage:       15 bytes
  1743 ;; Hardware stack levels used:    1
  1744 ;; Hardware stack levels required when called:    3
  1745 ;; This function calls:
  1746 ;;		Nothing
  1747 ;; This function is called by:
  1748 ;;		_writeValueLcd
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text3
  1753  001282                     __ptext3:
  1754                           	opt stack 0
  1755  001282                     ___fttol:
  1756                           	opt stack 26
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;incstack = 0
  1760  001282  C07C  F07E         	movff	___fttol@f1+2,??___fttol
  1761  001286  0100               	movlb	0	; () banked
  1762  001288  6B7F               	clrf	(??___fttol+1)& (0+255),b
  1763  00128A  6B80               	clrf	(??___fttol+2)& (0+255),b
  1764  00128C  357B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  1765  00128E  377E               	rlcf	??___fttol& (0+255),f,b
  1766  001290  E301               	bnc	u921
  1767  001292  817F               	bsf	(??___fttol+1)& (0+255),0,b
  1768  001294                     u921:
  1769  001294  517E               	movf	??___fttol& (0+255),w,b
  1770  001296  6F88               	movwf	___fttol@exp1& (0+255),b
  1771  001298  5188               	movf	___fttol@exp1& (0+255),w,b
  1772  00129A  A4D8               	btfss	status,2,c
  1773  00129C  D009               	goto	l473
  1774                           
  1775                           ; BSR set to: 0
  1776  00129E  0E00               	movlw	0
  1777  0012A0  6F7A               	movwf	?___fttol& (0+255),b
  1778  0012A2  0E00               	movlw	0
  1779  0012A4  6F7B               	movwf	(?___fttol+1)& (0+255),b
  1780  0012A6  0E00               	movlw	0
  1781  0012A8  6F7C               	movwf	(?___fttol+2)& (0+255),b
  1782  0012AA  0E00               	movlw	0
  1783  0012AC  6F7D               	movwf	(?___fttol+3)& (0+255),b
  1784                           
  1785                           ; BSR set to: 0
  1786  0012AE  0012               	return	
  1787  0012B0                     l473:
  1788                           
  1789                           ; BSR set to: 0
  1790                           
  1791                           ; BSR set to: 0
  1792  0012B0  0E17               	movlw	23
  1793  0012B2  6F7E               	movwf	??___fttol& (0+255),b
  1794  0012B4  C07A  F07F         	movff	___fttol@f1,??___fttol+1
  1795  0012B8  C07B  F080         	movff	___fttol@f1+1,??___fttol+2
  1796  0012BC  C07C  F081         	movff	___fttol@f1+2,??___fttol+3
  1797  0012C0  297E               	incf	??___fttol& (0+255),w,b
  1798  0012C2  6F82               	movwf	(??___fttol+4)& (0+255),b
  1799  0012C4  D004               	goto	u940
  1800  0012C6                     u945:
  1801  0012C6  90D8               	bcf	status,0,c
  1802  0012C8  3381               	rrcf	(??___fttol+3)& (0+255),f,b
  1803  0012CA  3380               	rrcf	(??___fttol+2)& (0+255),f,b
  1804  0012CC  337F               	rrcf	(??___fttol+1)& (0+255),f,b
  1805  0012CE                     u940:
  1806  0012CE  2F82               	decfsz	(??___fttol+4)& (0+255),f,b
  1807  0012D0  D7FA               	goto	u945
  1808  0012D2  0100               	movlb	0	; () banked
  1809  0012D4  517F               	movf	(??___fttol+1)& (0+255),w,b
  1810  0012D6  6F83               	movwf	___fttol@sign1& (0+255),b
  1811                           
  1812                           ; BSR set to: 0
  1813  0012D8  8F7B               	bsf	(___fttol@f1+1)& (0+255),7,b
  1814                           
  1815                           ; BSR set to: 0
  1816  0012DA  0EFF               	movlw	255
  1817  0012DC  177A               	andwf	___fttol@f1& (0+255),f,b
  1818  0012DE  0EFF               	movlw	255
  1819  0012E0  177B               	andwf	(___fttol@f1+1)& (0+255),f,b
  1820  0012E2  0E00               	movlw	0
  1821  0012E4  177C               	andwf	(___fttol@f1+2)& (0+255),f,b
  1822                           
  1823                           ; BSR set to: 0
  1824  0012E6  517A               	movf	___fttol@f1& (0+255),w,b
  1825  0012E8  6F84               	movwf	___fttol@lval& (0+255),b
  1826  0012EA  517B               	movf	(___fttol@f1+1)& (0+255),w,b
  1827  0012EC  6F85               	movwf	(___fttol@lval+1)& (0+255),b
  1828  0012EE  517C               	movf	(___fttol@f1+2)& (0+255),w,b
  1829  0012F0  6F86               	movwf	(___fttol@lval+2)& (0+255),b
  1830  0012F2  6B87               	clrf	(___fttol@lval+3)& (0+255),b
  1831                           
  1832                           ; BSR set to: 0
  1833  0012F4  0E8E               	movlw	142
  1834  0012F6  5F88               	subwf	___fttol@exp1& (0+255),f,b
  1835                           
  1836                           ; BSR set to: 0
  1837  0012F8  AF88               	btfss	___fttol@exp1& (0+255),7,b
  1838  0012FA  D016               	goto	l475
  1839                           
  1840                           ; BSR set to: 0
  1841  0012FC  5188               	movf	___fttol@exp1& (0+255),w,b
  1842  0012FE  0A80               	xorlw	128
  1843  001300  0F8F               	addlw	143
  1844  001302  B0D8               	btfsc	status,0,c
  1845  001304  D009               	goto	l476
  1846                           
  1847                           ; BSR set to: 0
  1848  001306  0E00               	movlw	0
  1849  001308  6F7A               	movwf	?___fttol& (0+255),b
  1850  00130A  0E00               	movlw	0
  1851  00130C  6F7B               	movwf	(?___fttol+1)& (0+255),b
  1852  00130E  0E00               	movlw	0
  1853  001310  6F7C               	movwf	(?___fttol+2)& (0+255),b
  1854  001312  0E00               	movlw	0
  1855  001314  6F7D               	movwf	(?___fttol+3)& (0+255),b
  1856                           
  1857                           ; BSR set to: 0
  1858  001316  0012               	return	
  1859  001318                     l476:
  1860                           
  1861                           ; BSR set to: 0
  1862                           
  1863                           ; BSR set to: 0
  1864                           
  1865                           ; BSR set to: 0
  1866  001318  90D8               	bcf	status,0,c
  1867  00131A  3387               	rrcf	(___fttol@lval+3)& (0+255),f,b
  1868  00131C  3386               	rrcf	(___fttol@lval+2)& (0+255),f,b
  1869  00131E  3385               	rrcf	(___fttol@lval+1)& (0+255),f,b
  1870  001320  3384               	rrcf	___fttol@lval& (0+255),f,b
  1871                           
  1872                           ; BSR set to: 0
  1873  001322  3F88               	incfsz	___fttol@exp1& (0+255),f,b
  1874  001324  D7F9               	goto	l476
  1875                           
  1876                           ; BSR set to: 0
  1877  001326  D015               	goto	u980
  1878  001328                     l475:
  1879                           
  1880                           ; BSR set to: 0
  1881                           
  1882                           ; BSR set to: 0
  1883  001328  0E17               	movlw	23
  1884  00132A  6588               	cpfsgt	___fttol@exp1& (0+255),b
  1885  00132C  D00F               	goto	l481
  1886                           
  1887                           ; BSR set to: 0
  1888  00132E  0E00               	movlw	0
  1889  001330  6F7A               	movwf	?___fttol& (0+255),b
  1890  001332  0E00               	movlw	0
  1891  001334  6F7B               	movwf	(?___fttol+1)& (0+255),b
  1892  001336  0E00               	movlw	0
  1893  001338  6F7C               	movwf	(?___fttol+2)& (0+255),b
  1894  00133A  0E00               	movlw	0
  1895  00133C  6F7D               	movwf	(?___fttol+3)& (0+255),b
  1896                           
  1897                           ; BSR set to: 0
  1898  00133E  0012               	return	
  1899  001340                     
  1900                           ; BSR set to: 0
  1901                           
  1902                           ; BSR set to: 0
  1903  001340  90D8               	bcf	status,0,c
  1904  001342  3784               	rlcf	___fttol@lval& (0+255),f,b
  1905  001344  3785               	rlcf	(___fttol@lval+1)& (0+255),f,b
  1906  001346  3786               	rlcf	(___fttol@lval+2)& (0+255),f,b
  1907  001348  3787               	rlcf	(___fttol@lval+3)& (0+255),f,b
  1908  00134A  0788               	decf	___fttol@exp1& (0+255),f,b
  1909  00134C                     l481:
  1910                           
  1911                           ; BSR set to: 0
  1912                           
  1913                           ; BSR set to: 0
  1914  00134C  5188               	movf	___fttol@exp1& (0+255),w,b
  1915  00134E  A4D8               	btfss	status,2,c
  1916  001350  D7F7               	goto	l482
  1917  001352                     u980:
  1918                           
  1919                           ; BSR set to: 0
  1920                           
  1921                           ; BSR set to: 0
  1922                           
  1923                           ; BSR set to: 0
  1924  001352  5183               	movf	___fttol@sign1& (0+255),w,b
  1925  001354  B4D8               	btfsc	status,2,c
  1926  001356  D008               	goto	l484
  1927                           
  1928                           ; BSR set to: 0
  1929  001358  1F87               	comf	(___fttol@lval+3)& (0+255),f,b
  1930  00135A  1F86               	comf	(___fttol@lval+2)& (0+255),f,b
  1931  00135C  1F85               	comf	(___fttol@lval+1)& (0+255),f,b
  1932  00135E  6D84               	negf	___fttol@lval& (0+255),b
  1933  001360  0E00               	movlw	0
  1934  001362  2385               	addwfc	(___fttol@lval+1)& (0+255),f,b
  1935  001364  2386               	addwfc	(___fttol@lval+2)& (0+255),f,b
  1936  001366  2387               	addwfc	(___fttol@lval+3)& (0+255),f,b
  1937  001368                     l484:
  1938                           
  1939                           ; BSR set to: 0
  1940                           
  1941                           ; BSR set to: 0
  1942  001368  C084  F07A         	movff	___fttol@lval,?___fttol
  1943  00136C  C085  F07B         	movff	___fttol@lval+1,?___fttol+1
  1944  001370  C086  F07C         	movff	___fttol@lval+2,?___fttol+2
  1945  001374  C087  F07D         	movff	___fttol@lval+3,?___fttol+3
  1946  001378  0012               	return	
  1947  00137A                     __end_of___fttol:
  1948                           	opt stack 0
  1949                           tblptru	equ	0xFF8
  1950                           wreg	equ	0xFE8
  1951                           status	equ	0xFD8
  1952                           
  1953 ;; *************** function ___ftmul *****************
  1954 ;; Defined at:
  1955 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;  f1              3   11[BANK0 ] float 
  1958 ;;  f2              3   14[BANK0 ] float 
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;  f3_as_produc    3   21[BANK0 ] unsigned um
  1961 ;;  sign            1   25[BANK0 ] unsigned char 
  1962 ;;  cntr            1   24[BANK0 ] unsigned char 
  1963 ;;  exp             1   20[BANK0 ] unsigned char 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  3   11[BANK0 ] float 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1973 ;;      Params:         0       6       0       0       0       0       0       0       0
  1974 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1975 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1976 ;;      Totals:         0      15       0       0       0       0       0       0       0
  1977 ;;Total ram usage:       15 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    4
  1980 ;; This function calls:
  1981 ;;		___ftpack
  1982 ;; This function is called by:
  1983 ;;		_main
  1984 ;;		_writeValueLcd
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           	psect	text4
  1989  00137A                     __ptext4:
  1990                           	opt stack 0
  1991  00137A                     ___ftmul:
  1992                           	opt stack 25
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;incstack = 0
  1996  00137A  C06D  F071         	movff	___ftmul@f1+2,??___ftmul
  1997  00137E  0100               	movlb	0	; () banked
  1998  001380  6B72               	clrf	(??___ftmul+1)& (0+255),b
  1999  001382  6B73               	clrf	(??___ftmul+2)& (0+255),b
  2000  001384  356C               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  2001  001386  3771               	rlcf	??___ftmul& (0+255),f,b
  2002  001388  E301               	bnc	u861
  2003  00138A  8172               	bsf	(??___ftmul+1)& (0+255),0,b
  2004  00138C                     u861:
  2005  00138C  5171               	movf	??___ftmul& (0+255),w,b
  2006  00138E  6F74               	movwf	___ftmul@exp& (0+255),b
  2007  001390  5174               	movf	___ftmul@exp& (0+255),w,b
  2008  001392  A4D8               	btfss	status,2,c
  2009  001394  D007               	goto	l452
  2010                           
  2011                           ; BSR set to: 0
  2012  001396  0E00               	movlw	0
  2013  001398  6F6B               	movwf	?___ftmul& (0+255),b
  2014  00139A  0E00               	movlw	0
  2015  00139C  6F6C               	movwf	(?___ftmul+1)& (0+255),b
  2016  00139E  0E00               	movlw	0
  2017  0013A0  6F6D               	movwf	(?___ftmul+2)& (0+255),b
  2018                           
  2019                           ; BSR set to: 0
  2020  0013A2  0012               	return	
  2021  0013A4                     l452:
  2022                           
  2023                           ; BSR set to: 0
  2024                           
  2025                           ; BSR set to: 0
  2026  0013A4  C070  F071         	movff	___ftmul@f2+2,??___ftmul
  2027  0013A8  6B72               	clrf	(??___ftmul+1)& (0+255),b
  2028  0013AA  6B73               	clrf	(??___ftmul+2)& (0+255),b
  2029  0013AC  356F               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  2030  0013AE  3771               	rlcf	??___ftmul& (0+255),f,b
  2031  0013B0  E301               	bnc	u881
  2032  0013B2  8172               	bsf	(??___ftmul+1)& (0+255),0,b
  2033  0013B4                     u881:
  2034  0013B4  5171               	movf	??___ftmul& (0+255),w,b
  2035  0013B6  6F79               	movwf	___ftmul@sign& (0+255),b
  2036  0013B8  5179               	movf	___ftmul@sign& (0+255),w,b
  2037  0013BA  A4D8               	btfss	status,2,c
  2038  0013BC  D007               	goto	l454
  2039                           
  2040                           ; BSR set to: 0
  2041  0013BE  0E00               	movlw	0
  2042  0013C0  6F6B               	movwf	?___ftmul& (0+255),b
  2043  0013C2  0E00               	movlw	0
  2044  0013C4  6F6C               	movwf	(?___ftmul+1)& (0+255),b
  2045  0013C6  0E00               	movlw	0
  2046  0013C8  6F6D               	movwf	(?___ftmul+2)& (0+255),b
  2047                           
  2048                           ; BSR set to: 0
  2049  0013CA  0012               	return	
  2050  0013CC                     l454:
  2051                           
  2052                           ; BSR set to: 0
  2053                           
  2054                           ; BSR set to: 0
  2055  0013CC  5179               	movf	___ftmul@sign& (0+255),w,b
  2056  0013CE  0F7B               	addlw	123
  2057  0013D0  2774               	addwf	___ftmul@exp& (0+255),f,b
  2058                           
  2059                           ; BSR set to: 0
  2060  0013D2  C06D  F079         	movff	___ftmul@f1+2,___ftmul@sign
  2061  0013D6  5170               	movf	(___ftmul@f2+2)& (0+255),w,b
  2062  0013D8  1B79               	xorwf	___ftmul@sign& (0+255),f,b
  2063  0013DA  0E80               	movlw	128
  2064  0013DC  1779               	andwf	___ftmul@sign& (0+255),f,b
  2065                           
  2066                           ; BSR set to: 0
  2067  0013DE  8F6C               	bsf	(___ftmul@f1+1)& (0+255),7,b
  2068                           
  2069                           ; BSR set to: 0
  2070  0013E0  8F6F               	bsf	(___ftmul@f2+1)& (0+255),7,b
  2071                           
  2072                           ; BSR set to: 0
  2073  0013E2  0EFF               	movlw	255
  2074  0013E4  176E               	andwf	___ftmul@f2& (0+255),f,b
  2075  0013E6  0EFF               	movlw	255
  2076  0013E8  176F               	andwf	(___ftmul@f2+1)& (0+255),f,b
  2077  0013EA  0E00               	movlw	0
  2078  0013EC  1770               	andwf	(___ftmul@f2+2)& (0+255),f,b
  2079                           
  2080                           ; BSR set to: 0
  2081  0013EE  0E00               	movlw	0
  2082  0013F0  6F75               	movwf	___ftmul@f3_as_product& (0+255),b
  2083  0013F2  0E00               	movlw	0
  2084  0013F4  6F76               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  2085  0013F6  0E00               	movlw	0
  2086  0013F8  6F77               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  2087                           
  2088                           ; BSR set to: 0
  2089  0013FA  0E07               	movlw	7
  2090  0013FC  6F78               	movwf	___ftmul@cntr& (0+255),b
  2091  0013FE                     
  2092                           ; BSR set to: 0
  2093                           
  2094                           ; BSR set to: 0
  2095  0013FE  A16B               	btfss	___ftmul@f1& (0+255),0,b
  2096  001400  D006               	goto	l456
  2097                           
  2098                           ; BSR set to: 0
  2099  001402  516E               	movf	___ftmul@f2& (0+255),w,b
  2100  001404  2775               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2101  001406  516F               	movf	(___ftmul@f2+1)& (0+255),w,b
  2102  001408  2376               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2103  00140A  5170               	movf	(___ftmul@f2+2)& (0+255),w,b
  2104  00140C  2377               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2105  00140E                     l456:
  2106                           
  2107                           ; BSR set to: 0
  2108                           
  2109                           ; BSR set to: 0
  2110  00140E  90D8               	bcf	status,0,c
  2111  001410  336D               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  2112  001412  336C               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  2113  001414  336B               	rrcf	___ftmul@f1& (0+255),f,b
  2114  001416  90D8               	bcf	status,0,c
  2115  001418  376E               	rlcf	___ftmul@f2& (0+255),f,b
  2116  00141A  376F               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  2117  00141C  3770               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  2118                           
  2119                           ; BSR set to: 0
  2120  00141E  2F78               	decfsz	___ftmul@cntr& (0+255),f,b
  2121  001420  D7EE               	goto	l455
  2122                           
  2123                           ; BSR set to: 0
  2124                           
  2125                           ; BSR set to: 0
  2126  001422  0E09               	movlw	9
  2127  001424  6F78               	movwf	___ftmul@cntr& (0+255),b
  2128  001426                     
  2129                           ; BSR set to: 0
  2130                           
  2131                           ; BSR set to: 0
  2132  001426  A16B               	btfss	___ftmul@f1& (0+255),0,b
  2133  001428  D006               	goto	l459
  2134                           
  2135                           ; BSR set to: 0
  2136  00142A  516E               	movf	___ftmul@f2& (0+255),w,b
  2137  00142C  2775               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2138  00142E  516F               	movf	(___ftmul@f2+1)& (0+255),w,b
  2139  001430  2376               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2140  001432  5170               	movf	(___ftmul@f2+2)& (0+255),w,b
  2141  001434  2377               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2142  001436                     l459:
  2143                           
  2144                           ; BSR set to: 0
  2145                           
  2146                           ; BSR set to: 0
  2147  001436  90D8               	bcf	status,0,c
  2148  001438  336D               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  2149  00143A  336C               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  2150  00143C  336B               	rrcf	___ftmul@f1& (0+255),f,b
  2151  00143E  90D8               	bcf	status,0,c
  2152  001440  3377               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  2153  001442  3376               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  2154  001444  3375               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  2155                           
  2156                           ; BSR set to: 0
  2157  001446  2F78               	decfsz	___ftmul@cntr& (0+255),f,b
  2158  001448  D7EE               	goto	l458
  2159                           
  2160                           ; BSR set to: 0
  2161                           
  2162                           ; BSR set to: 0
  2163  00144A  C075  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  2164  00144E  C076  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2165  001452  C077  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2166  001456  C074  F063         	movff	___ftmul@exp,___ftpack@exp
  2167  00145A  C079  F064         	movff	___ftmul@sign,___ftpack@sign
  2168  00145E  EC13  F00B         	call	___ftpack	;wreg free
  2169  001462  C060  F06B         	movff	?___ftpack,?___ftmul
  2170  001466  C061  F06C         	movff	?___ftpack+1,?___ftmul+1
  2171  00146A  C062  F06D         	movff	?___ftpack+2,?___ftmul+2
  2172  00146E  0012               	return	
  2173  001470                     __end_of___ftmul:
  2174                           	opt stack 0
  2175                           tblptru	equ	0xFF8
  2176                           wreg	equ	0xFE8
  2177                           status	equ	0xFD8
  2178                           
  2179 ;; *************** function ___almod *****************
  2180 ;; Defined at:
  2181 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\almod.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  dividend        4    0[BANK0 ] long 
  2184 ;;  divisor         4    4[BANK0 ] long 
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;  sign            1    9[BANK0 ] unsigned char 
  2187 ;;  counter         1    8[BANK0 ] unsigned char 
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  4    0[BANK0 ] long 
  2190 ;; Registers used:
  2191 ;;		wreg, status,2, status,0
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2197 ;;      Params:         0       8       0       0       0       0       0       0       0
  2198 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2199 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2200 ;;      Totals:         0      10       0       0       0       0       0       0       0
  2201 ;;Total ram usage:       10 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    3
  2204 ;; This function calls:
  2205 ;;		Nothing
  2206 ;; This function is called by:
  2207 ;;		_writeValueLcd
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text5
  2212  0016D6                     __ptext5:
  2213                           	opt stack 0
  2214  0016D6                     ___almod:
  2215                           	opt stack 26
  2216                           
  2217                           ;incstack = 0
  2218  0016D6  0E00               	movlw	0
  2219  0016D8  0100               	movlb	0	; () banked
  2220  0016DA  6F69               	movwf	___almod@sign& (0+255),b
  2221                           
  2222                           ; BSR set to: 0
  2223  0016DC  AF63               	btfss	(___almod@dividend+3)& (0+255),7,b
  2224  0016DE  D00A               	goto	l227
  2225                           
  2226                           ; BSR set to: 0
  2227  0016E0  1F63               	comf	(___almod@dividend+3)& (0+255),f,b
  2228  0016E2  1F62               	comf	(___almod@dividend+2)& (0+255),f,b
  2229  0016E4  1F61               	comf	(___almod@dividend+1)& (0+255),f,b
  2230  0016E6  6D60               	negf	___almod@dividend& (0+255),b
  2231  0016E8  0E00               	movlw	0
  2232  0016EA  2361               	addwfc	(___almod@dividend+1)& (0+255),f,b
  2233  0016EC  2362               	addwfc	(___almod@dividend+2)& (0+255),f,b
  2234  0016EE  2363               	addwfc	(___almod@dividend+3)& (0+255),f,b
  2235                           
  2236                           ; BSR set to: 0
  2237  0016F0  0E01               	movlw	1
  2238  0016F2  6F69               	movwf	___almod@sign& (0+255),b
  2239  0016F4                     l227:
  2240                           
  2241                           ; BSR set to: 0
  2242                           
  2243                           ; BSR set to: 0
  2244  0016F4  AF67               	btfss	(___almod@divisor+3)& (0+255),7,b
  2245  0016F6  D008               	goto	l228
  2246                           
  2247                           ; BSR set to: 0
  2248  0016F8  1F67               	comf	(___almod@divisor+3)& (0+255),f,b
  2249  0016FA  1F66               	comf	(___almod@divisor+2)& (0+255),f,b
  2250  0016FC  1F65               	comf	(___almod@divisor+1)& (0+255),f,b
  2251  0016FE  6D64               	negf	___almod@divisor& (0+255),b
  2252  001700  0E00               	movlw	0
  2253  001702  2365               	addwfc	(___almod@divisor+1)& (0+255),f,b
  2254  001704  2366               	addwfc	(___almod@divisor+2)& (0+255),f,b
  2255  001706  2367               	addwfc	(___almod@divisor+3)& (0+255),f,b
  2256  001708                     l228:
  2257                           
  2258                           ; BSR set to: 0
  2259                           
  2260                           ; BSR set to: 0
  2261  001708  5164               	movf	___almod@divisor& (0+255),w,b
  2262  00170A  1165               	iorwf	(___almod@divisor+1)& (0+255),w,b
  2263  00170C  1166               	iorwf	(___almod@divisor+2)& (0+255),w,b
  2264  00170E  1167               	iorwf	(___almod@divisor+3)& (0+255),w,b
  2265  001710  B4D8               	btfsc	status,2,c
  2266  001712  D024               	goto	l235
  2267                           
  2268                           ; BSR set to: 0
  2269  001714  0E01               	movlw	1
  2270  001716  6F68               	movwf	___almod@counter& (0+255),b
  2271  001718  D006               	goto	l230
  2272  00171A                     
  2273                           ; BSR set to: 0
  2274                           
  2275                           ; BSR set to: 0
  2276  00171A  90D8               	bcf	status,0,c
  2277  00171C  3764               	rlcf	___almod@divisor& (0+255),f,b
  2278  00171E  3765               	rlcf	(___almod@divisor+1)& (0+255),f,b
  2279  001720  3766               	rlcf	(___almod@divisor+2)& (0+255),f,b
  2280  001722  3767               	rlcf	(___almod@divisor+3)& (0+255),f,b
  2281  001724  2B68               	incf	___almod@counter& (0+255),f,b
  2282  001726                     l230:
  2283                           
  2284                           ; BSR set to: 0
  2285                           
  2286                           ; BSR set to: 0
  2287  001726  AF67               	btfss	(___almod@divisor+3)& (0+255),7,b
  2288  001728  D7F8               	goto	l231
  2289  00172A                     u830:
  2290                           
  2291                           ; BSR set to: 0
  2292                           
  2293                           ; BSR set to: 0
  2294                           
  2295                           ; BSR set to: 0
  2296  00172A  5164               	movf	___almod@divisor& (0+255),w,b
  2297  00172C  5D60               	subwf	___almod@dividend& (0+255),w,b
  2298  00172E  5165               	movf	(___almod@divisor+1)& (0+255),w,b
  2299  001730  5961               	subwfb	(___almod@dividend+1)& (0+255),w,b
  2300  001732  5166               	movf	(___almod@divisor+2)& (0+255),w,b
  2301  001734  5962               	subwfb	(___almod@dividend+2)& (0+255),w,b
  2302  001736  5167               	movf	(___almod@divisor+3)& (0+255),w,b
  2303  001738  5963               	subwfb	(___almod@dividend+3)& (0+255),w,b
  2304  00173A  A0D8               	btfss	status,0,c
  2305  00173C  D008               	goto	l234
  2306                           
  2307                           ; BSR set to: 0
  2308  00173E  5164               	movf	___almod@divisor& (0+255),w,b
  2309  001740  5F60               	subwf	___almod@dividend& (0+255),f,b
  2310  001742  5165               	movf	(___almod@divisor+1)& (0+255),w,b
  2311  001744  5B61               	subwfb	(___almod@dividend+1)& (0+255),f,b
  2312  001746  5166               	movf	(___almod@divisor+2)& (0+255),w,b
  2313  001748  5B62               	subwfb	(___almod@dividend+2)& (0+255),f,b
  2314  00174A  5167               	movf	(___almod@divisor+3)& (0+255),w,b
  2315  00174C  5B63               	subwfb	(___almod@dividend+3)& (0+255),f,b
  2316  00174E                     l234:
  2317                           
  2318                           ; BSR set to: 0
  2319                           
  2320                           ; BSR set to: 0
  2321  00174E  90D8               	bcf	status,0,c
  2322  001750  3367               	rrcf	(___almod@divisor+3)& (0+255),f,b
  2323  001752  3366               	rrcf	(___almod@divisor+2)& (0+255),f,b
  2324  001754  3365               	rrcf	(___almod@divisor+1)& (0+255),f,b
  2325  001756  3364               	rrcf	___almod@divisor& (0+255),f,b
  2326                           
  2327                           ; BSR set to: 0
  2328  001758  2F68               	decfsz	___almod@counter& (0+255),f,b
  2329  00175A  D7E7               	goto	u830
  2330  00175C                     l235:
  2331                           
  2332                           ; BSR set to: 0
  2333                           
  2334                           ; BSR set to: 0
  2335                           
  2336                           ; BSR set to: 0
  2337  00175C  5169               	movf	___almod@sign& (0+255),w,b
  2338  00175E  B4D8               	btfsc	status,2,c
  2339  001760  D008               	goto	l236
  2340                           
  2341                           ; BSR set to: 0
  2342  001762  1F63               	comf	(___almod@dividend+3)& (0+255),f,b
  2343  001764  1F62               	comf	(___almod@dividend+2)& (0+255),f,b
  2344  001766  1F61               	comf	(___almod@dividend+1)& (0+255),f,b
  2345  001768  6D60               	negf	___almod@dividend& (0+255),b
  2346  00176A  0E00               	movlw	0
  2347  00176C  2361               	addwfc	(___almod@dividend+1)& (0+255),f,b
  2348  00176E  2362               	addwfc	(___almod@dividend+2)& (0+255),f,b
  2349  001770  2363               	addwfc	(___almod@dividend+3)& (0+255),f,b
  2350  001772                     l236:
  2351                           
  2352                           ; BSR set to: 0
  2353                           
  2354                           ; BSR set to: 0
  2355  001772  C060  F060         	movff	___almod@dividend,?___almod
  2356  001776  C061  F061         	movff	___almod@dividend+1,?___almod+1
  2357  00177A  C062  F062         	movff	___almod@dividend+2,?___almod+2
  2358  00177E  C063  F063         	movff	___almod@dividend+3,?___almod+3
  2359  001782  0012               	return	
  2360  001784                     __end_of___almod:
  2361                           	opt stack 0
  2362                           tblptru	equ	0xFF8
  2363                           wreg	equ	0xFE8
  2364                           status	equ	0xFD8
  2365                           
  2366 ;; *************** function ___aldiv *****************
  2367 ;; Defined at:
  2368 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;  dividend        4   10[BANK0 ] long 
  2371 ;;  divisor         4   14[BANK0 ] long 
  2372 ;; Auto vars:     Size  Location     Type
  2373 ;;  quotient        4   20[BANK0 ] long 
  2374 ;;  sign            1   19[BANK0 ] unsigned char 
  2375 ;;  counter         1   18[BANK0 ] unsigned char 
  2376 ;; Return value:  Size  Location     Type
  2377 ;;                  4   10[BANK0 ] long 
  2378 ;; Registers used:
  2379 ;;		wreg, status,2, status,0
  2380 ;; Tracked objects:
  2381 ;;		On entry : 0/0
  2382 ;;		On exit  : 0/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2385 ;;      Params:         0       8       0       0       0       0       0       0       0
  2386 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2387 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2388 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2389 ;;Total ram usage:       14 bytes
  2390 ;; Hardware stack levels used:    1
  2391 ;; Hardware stack levels required when called:    3
  2392 ;; This function calls:
  2393 ;;		Nothing
  2394 ;; This function is called by:
  2395 ;;		_writeValueLcd
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text6
  2400  001558                     __ptext6:
  2401                           	opt stack 0
  2402  001558                     ___aldiv:
  2403                           	opt stack 26
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;incstack = 0
  2407  001558  0E00               	movlw	0
  2408  00155A  0100               	movlb	0	; () banked
  2409  00155C  6F73               	movwf	___aldiv@sign& (0+255),b
  2410                           
  2411                           ; BSR set to: 0
  2412  00155E  AF71               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2413  001560  D00A               	goto	l214
  2414                           
  2415                           ; BSR set to: 0
  2416  001562  1F71               	comf	(___aldiv@divisor+3)& (0+255),f,b
  2417  001564  1F70               	comf	(___aldiv@divisor+2)& (0+255),f,b
  2418  001566  1F6F               	comf	(___aldiv@divisor+1)& (0+255),f,b
  2419  001568  6D6E               	negf	___aldiv@divisor& (0+255),b
  2420  00156A  0E00               	movlw	0
  2421  00156C  236F               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  2422  00156E  2370               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  2423  001570  2371               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  2424                           
  2425                           ; BSR set to: 0
  2426  001572  0E01               	movlw	1
  2427  001574  6F73               	movwf	___aldiv@sign& (0+255),b
  2428  001576                     l214:
  2429                           
  2430                           ; BSR set to: 0
  2431                           
  2432                           ; BSR set to: 0
  2433  001576  AF6D               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  2434  001578  D00A               	goto	l215
  2435                           
  2436                           ; BSR set to: 0
  2437  00157A  1F6D               	comf	(___aldiv@dividend+3)& (0+255),f,b
  2438  00157C  1F6C               	comf	(___aldiv@dividend+2)& (0+255),f,b
  2439  00157E  1F6B               	comf	(___aldiv@dividend+1)& (0+255),f,b
  2440  001580  6D6A               	negf	___aldiv@dividend& (0+255),b
  2441  001582  0E00               	movlw	0
  2442  001584  236B               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  2443  001586  236C               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  2444  001588  236D               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  2445                           
  2446                           ; BSR set to: 0
  2447  00158A  0E01               	movlw	1
  2448  00158C  1B73               	xorwf	___aldiv@sign& (0+255),f,b
  2449  00158E                     l215:
  2450                           
  2451                           ; BSR set to: 0
  2452                           
  2453                           ; BSR set to: 0
  2454  00158E  0E00               	movlw	0
  2455  001590  6F74               	movwf	___aldiv@quotient& (0+255),b
  2456  001592  0E00               	movlw	0
  2457  001594  6F75               	movwf	(___aldiv@quotient+1)& (0+255),b
  2458  001596  0E00               	movlw	0
  2459  001598  6F76               	movwf	(___aldiv@quotient+2)& (0+255),b
  2460  00159A  0E00               	movlw	0
  2461  00159C  6F77               	movwf	(___aldiv@quotient+3)& (0+255),b
  2462                           
  2463                           ; BSR set to: 0
  2464  00159E  516E               	movf	___aldiv@divisor& (0+255),w,b
  2465  0015A0  116F               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  2466  0015A2  1170               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  2467  0015A4  1171               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  2468  0015A6  B4D8               	btfsc	status,2,c
  2469  0015A8  D02A               	goto	l222
  2470                           
  2471                           ; BSR set to: 0
  2472  0015AA  0E01               	movlw	1
  2473  0015AC  6F72               	movwf	___aldiv@counter& (0+255),b
  2474  0015AE  D006               	goto	l217
  2475  0015B0                     
  2476                           ; BSR set to: 0
  2477                           
  2478                           ; BSR set to: 0
  2479  0015B0  90D8               	bcf	status,0,c
  2480  0015B2  376E               	rlcf	___aldiv@divisor& (0+255),f,b
  2481  0015B4  376F               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  2482  0015B6  3770               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  2483  0015B8  3771               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  2484  0015BA  2B72               	incf	___aldiv@counter& (0+255),f,b
  2485  0015BC                     l217:
  2486                           
  2487                           ; BSR set to: 0
  2488                           
  2489                           ; BSR set to: 0
  2490  0015BC  AF71               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2491  0015BE  D7F8               	goto	l218
  2492  0015C0                     u770:
  2493                           
  2494                           ; BSR set to: 0
  2495                           
  2496                           ; BSR set to: 0
  2497                           
  2498                           ; BSR set to: 0
  2499  0015C0  90D8               	bcf	status,0,c
  2500  0015C2  3774               	rlcf	___aldiv@quotient& (0+255),f,b
  2501  0015C4  3775               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  2502  0015C6  3776               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  2503  0015C8  3777               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  2504                           
  2505                           ; BSR set to: 0
  2506  0015CA  516E               	movf	___aldiv@divisor& (0+255),w,b
  2507  0015CC  5D6A               	subwf	___aldiv@dividend& (0+255),w,b
  2508  0015CE  516F               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2509  0015D0  596B               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  2510  0015D2  5170               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2511  0015D4  596C               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  2512  0015D6  5171               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2513  0015D8  596D               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  2514  0015DA  A0D8               	btfss	status,0,c
  2515  0015DC  D009               	goto	l221
  2516                           
  2517                           ; BSR set to: 0
  2518  0015DE  516E               	movf	___aldiv@divisor& (0+255),w,b
  2519  0015E0  5F6A               	subwf	___aldiv@dividend& (0+255),f,b
  2520  0015E2  516F               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2521  0015E4  5B6B               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  2522  0015E6  5170               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2523  0015E8  5B6C               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  2524  0015EA  5171               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2525  0015EC  5B6D               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  2526                           
  2527                           ; BSR set to: 0
  2528  0015EE  8174               	bsf	___aldiv@quotient& (0+255),0,b
  2529  0015F0                     l221:
  2530                           
  2531                           ; BSR set to: 0
  2532                           
  2533                           ; BSR set to: 0
  2534  0015F0  90D8               	bcf	status,0,c
  2535  0015F2  3371               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  2536  0015F4  3370               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  2537  0015F6  336F               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  2538  0015F8  336E               	rrcf	___aldiv@divisor& (0+255),f,b
  2539                           
  2540                           ; BSR set to: 0
  2541  0015FA  2F72               	decfsz	___aldiv@counter& (0+255),f,b
  2542  0015FC  D7E1               	goto	u770
  2543  0015FE                     l222:
  2544                           
  2545                           ; BSR set to: 0
  2546                           
  2547                           ; BSR set to: 0
  2548                           
  2549                           ; BSR set to: 0
  2550  0015FE  5173               	movf	___aldiv@sign& (0+255),w,b
  2551  001600  B4D8               	btfsc	status,2,c
  2552  001602  D008               	goto	l223
  2553                           
  2554                           ; BSR set to: 0
  2555  001604  1F77               	comf	(___aldiv@quotient+3)& (0+255),f,b
  2556  001606  1F76               	comf	(___aldiv@quotient+2)& (0+255),f,b
  2557  001608  1F75               	comf	(___aldiv@quotient+1)& (0+255),f,b
  2558  00160A  6D74               	negf	___aldiv@quotient& (0+255),b
  2559  00160C  0E00               	movlw	0
  2560  00160E  2375               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  2561  001610  2376               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  2562  001612  2377               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  2563  001614                     l223:
  2564                           
  2565                           ; BSR set to: 0
  2566                           
  2567                           ; BSR set to: 0
  2568  001614  C074  F06A         	movff	___aldiv@quotient,?___aldiv
  2569  001618  C075  F06B         	movff	___aldiv@quotient+1,?___aldiv+1
  2570  00161C  C076  F06C         	movff	___aldiv@quotient+2,?___aldiv+2
  2571  001620  C077  F06D         	movff	___aldiv@quotient+3,?___aldiv+3
  2572  001624  0012               	return	
  2573  001626                     __end_of___aldiv:
  2574                           	opt stack 0
  2575                           tblptru	equ	0xFF8
  2576                           wreg	equ	0xFE8
  2577                           status	equ	0xFD8
  2578                           
  2579 ;; *************** function _writeStringLcd *****************
  2580 ;; Defined at:
  2581 ;;		line 47 in file "lcd.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;  s               2    2[BANK0 ] PTR unsigned char 
  2584 ;;		 -> STR_14(2), STR_13(10), STR_12(2), STR_11(10), 
  2585 ;;		 -> STR_10(2), STR_9(10), STR_8(2), STR_7(10), 
  2586 ;;		 -> STR_6(2), STR_5(10), STR_4(2), STR_3(10), 
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;		None
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      void 
  2591 ;; Registers used:
  2592 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2598 ;;      Params:         0       2       0       0       0       0       0       0       0
  2599 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2600 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2601 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2602 ;;Total ram usage:        2 bytes
  2603 ;; Hardware stack levels used:    1
  2604 ;; Hardware stack levels required when called:    5
  2605 ;; This function calls:
  2606 ;;		_writeLcd
  2607 ;; This function is called by:
  2608 ;;		_main
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           	psect	text7
  2613  001A1A                     __ptext7:
  2614                           	opt stack 0
  2615  001A1A                     _writeStringLcd:
  2616                           	opt stack 25
  2617                           
  2618                           ;lcd.c: 48: LATBbits.LATB4 = 1;
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;incstack = 0
  2622  001A1A  888A               	bsf	3978,4,c	;volatile
  2623                           
  2624                           ;lcd.c: 49: while (*s)
  2625  001A1C  D00B               	goto	l131
  2626  001A1E                     
  2627                           ;lcd.c: 50: writeLcd(*s++);
  2628  001A1E  C062  FFF6         	movff	writeStringLcd@s,tblptrl
  2629  001A22  C063  FFF7         	movff	writeStringLcd@s+1,tblptrh
  2630  001A26                     	if	0	;tblptru may be non-zero
  2631  001A26                     	endif
  2632  001A26                     	if	0	;tblptru may be non-zero
  2633  001A26                     	endif
  2634  001A26  0008               	tblrd		*
  2635  001A28  50F5               	movf	tablat,w,c
  2636  001A2A  EC84  F00C         	call	_writeLcd
  2637  001A2E  0100               	movlb	0	; () banked
  2638  001A30  4B62               	infsnz	writeStringLcd@s& (0+255),f,b
  2639  001A32  2B63               	incf	(writeStringLcd@s+1)& (0+255),f,b
  2640  001A34                     l131:
  2641                           
  2642                           ; BSR set to: 0
  2643  001A34  C062  FFF6         	movff	writeStringLcd@s,tblptrl
  2644  001A38  C063  FFF7         	movff	writeStringLcd@s+1,tblptrh
  2645  001A3C                     	if	0	;tblptru may be non-zero
  2646  001A3C                     	endif
  2647  001A3C                     	if	0	;tblptru may be non-zero
  2648  001A3C                     	endif
  2649  001A3C  0008               	tblrd		*
  2650  001A3E  50F5               	movf	tablat,w,c
  2651  001A40  0900               	iorlw	0
  2652  001A42  B4D8               	btfsc	status,2,c
  2653  001A44  0012               	return	
  2654  001A46  D7EB               	goto	l132
  2655  001A48                     __end_of_writeStringLcd:
  2656                           	opt stack 0
  2657                           tblptru	equ	0xFF8
  2658                           tblptrh	equ	0xFF7
  2659                           tblptrl	equ	0xFF6
  2660                           tablat	equ	0xFF5
  2661                           wreg	equ	0xFE8
  2662                           status	equ	0xFD8
  2663                           
  2664 ;; *************** function _writeCStringLcd *****************
  2665 ;; Defined at:
  2666 ;;		line 41 in file "lcd.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  s               2    2[BANK0 ] PTR const unsigned char 
  2669 ;;		 -> STR_2(17), STR_1(5), 
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;		None
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  1    wreg      void 
  2674 ;; Registers used:
  2675 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2681 ;;      Params:         0       2       0       0       0       0       0       0       0
  2682 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2683 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2684 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2685 ;;Total ram usage:        2 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:    5
  2688 ;; This function calls:
  2689 ;;		_writeLcd
  2690 ;; This function is called by:
  2691 ;;		_main
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text8
  2696  001A48                     __ptext8:
  2697                           	opt stack 0
  2698  001A48                     _writeCStringLcd:
  2699                           	opt stack 25
  2700                           
  2701                           ;lcd.c: 42: LATBbits.LATB4 = 1;
  2702                           
  2703                           ;incstack = 0
  2704  001A48  888A               	bsf	3978,4,c	;volatile
  2705                           
  2706                           ;lcd.c: 43: while (*s)
  2707  001A4A  D00B               	goto	l125
  2708  001A4C                     
  2709                           ;lcd.c: 44: writeLcd(*s++);
  2710  001A4C  C062  FFF6         	movff	writeCStringLcd@s,tblptrl
  2711  001A50  C063  FFF7         	movff	writeCStringLcd@s+1,tblptrh
  2712  001A54                     	if	0	;tblptru may be non-zero
  2713  001A54                     	endif
  2714  001A54                     	if	0	;tblptru may be non-zero
  2715  001A54                     	endif
  2716  001A54  0008               	tblrd		*
  2717  001A56  50F5               	movf	tablat,w,c
  2718  001A58  EC84  F00C         	call	_writeLcd
  2719  001A5C  0100               	movlb	0	; () banked
  2720  001A5E  4B62               	infsnz	writeCStringLcd@s& (0+255),f,b
  2721  001A60  2B63               	incf	(writeCStringLcd@s+1)& (0+255),f,b
  2722  001A62                     l125:
  2723                           
  2724                           ; BSR set to: 0
  2725  001A62  C062  FFF6         	movff	writeCStringLcd@s,tblptrl
  2726  001A66  C063  FFF7         	movff	writeCStringLcd@s+1,tblptrh
  2727  001A6A                     	if	0	;tblptru may be non-zero
  2728  001A6A                     	endif
  2729  001A6A                     	if	0	;tblptru may be non-zero
  2730  001A6A                     	endif
  2731  001A6A  0008               	tblrd		*
  2732  001A6C  50F5               	movf	tablat,w,c
  2733  001A6E  0900               	iorlw	0
  2734  001A70  B4D8               	btfsc	status,2,c
  2735  001A72  0012               	return	
  2736  001A74  D7EB               	goto	l126
  2737  001A76                     __end_of_writeCStringLcd:
  2738                           	opt stack 0
  2739                           tblptru	equ	0xFF8
  2740                           tblptrh	equ	0xFF7
  2741                           tblptrl	equ	0xFF6
  2742                           tablat	equ	0xFF5
  2743                           wreg	equ	0xFE8
  2744                           status	equ	0xFD8
  2745                           
  2746 ;; *************** function _initConfigs *****************
  2747 ;; Defined at:
  2748 ;;		line 13 in file "preset.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;		None
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;		None
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  1    wreg      void 
  2755 ;; Registers used:
  2756 ;;		wreg, status,2, status,0, cstack
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2762 ;;      Params:         0       0       0       0       0       0       0       0       0
  2763 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2764 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2765 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2766 ;;Total ram usage:        2 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; Hardware stack levels required when called:    6
  2769 ;; This function calls:
  2770 ;;		_clearLcd
  2771 ;;		_writeLcd
  2772 ;; This function is called by:
  2773 ;;		_main
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text9
  2778  001820                     __ptext9:
  2779                           	opt stack 0
  2780  001820                     _initConfigs:
  2781                           	opt stack 24
  2782                           
  2783                           ;preset.c: 14: UCON<3>=0;
  2784                           
  2785                           ;incstack = 0
  2786  001820  506D               	movf	3949,w,c	;volatile
  2787                           
  2788                           ;preset.c: 15: CMCON = 0b00000111;
  2789  001822  0E07               	movlw	7
  2790  001824  6EB4               	movwf	4020,c	;volatile
  2791                           
  2792                           ;preset.c: 16: TRISC = 0b11111000;
  2793  001826  0EF8               	movlw	248
  2794  001828  6E94               	movwf	3988,c	;volatile
  2795                           
  2796                           ;preset.c: 17: TRISD = 0b00000001;
  2797  00182A  0E01               	movlw	1
  2798  00182C  6E95               	movwf	3989,c	;volatile
  2799                           
  2800                           ;preset.c: 18: TRISE = 0b1111;
  2801  00182E  0E0F               	movlw	15
  2802  001830  6E96               	movwf	3990,c	;volatile
  2803                           
  2804                           ;preset.c: 20: TRISA = 0b10111111;
  2805  001832  0EBF               	movlw	191
  2806  001834  6E92               	movwf	3986,c	;volatile
  2807                           
  2808                           ;preset.c: 21: ADCON1 = 0b00001001;
  2809  001836  0E09               	movlw	9
  2810  001838  6EC1               	movwf	4033,c	;volatile
  2811                           
  2812                           ;preset.c: 22: ADCON2 = 0b10000101;
  2813  00183A  0E85               	movlw	133
  2814  00183C  6EC0               	movwf	4032,c	;volatile
  2815                           
  2816                           ;preset.c: 24: TRISB = 0b11000000;
  2817  00183E  0EC0               	movlw	192
  2818  001840  6E93               	movwf	3987,c	;volatile
  2819                           
  2820                           ;preset.c: 25: LATBbits.LATB5 = 0;
  2821  001842  9A8A               	bcf	3978,5,c	;volatile
  2822                           
  2823                           ;preset.c: 26: LATBbits.LATB4 = 0;
  2824  001844  988A               	bcf	3978,4,c	;volatile
  2825                           
  2826                           ;preset.c: 27: _delay((unsigned long)((50)*((16000000)/4000.0)));
  2827  001846  0E02               	movlw	2
  2828  001848  0100               	movlb	0	; () banked
  2829  00184A  6F64               	movwf	(??_initConfigs+1)& (0+255),b
  2830  00184C  0E04               	movlw	4
  2831  00184E  6F63               	movwf	??_initConfigs& (0+255),b
  2832  001850  0EBA               	movlw	186
  2833  001852                     u1297:
  2834  001852  2EE8               	decfsz	wreg,f,c
  2835  001854  D7FE               	bra	u1297
  2836  001856  2F63               	decfsz	??_initConfigs& (0+255),f,b
  2837  001858  D7FC               	bra	u1297
  2838  00185A  2F64               	decfsz	(??_initConfigs+1)& (0+255),f,b
  2839  00185C  D7FA               	bra	u1297
  2840  00185E  F000               	nop	
  2841                           
  2842                           ;preset.c: 28: writeLcd(0x02);
  2843  001860  0E02               	movlw	2
  2844  001862  EC84  F00C         	call	_writeLcd
  2845                           
  2846                           ;preset.c: 29: _delay((unsigned long)((5)*((16000000)/4000.0)));
  2847  001866  0E1A               	movlw	26
  2848  001868  0100               	movlb	0	; () banked
  2849  00186A  6F63               	movwf	??_initConfigs& (0+255),b
  2850  00186C  0EF8               	movlw	248
  2851  00186E                     u1307:
  2852  00186E  2EE8               	decfsz	wreg,f,c
  2853  001870  D7FE               	bra	u1307
  2854  001872  2F63               	decfsz	??_initConfigs& (0+255),f,b
  2855  001874  D7FC               	bra	u1307
  2856  001876  F000               	nop	
  2857                           
  2858                           ;preset.c: 30: writeLcd(0x28);
  2859  001878  0E28               	movlw	40
  2860  00187A  EC84  F00C         	call	_writeLcd
  2861                           
  2862                           ;preset.c: 31: writeLcd(0x01);
  2863  00187E  0E01               	movlw	1
  2864  001880  EC84  F00C         	call	_writeLcd
  2865                           
  2866                           ;preset.c: 32: writeLcd(0x0c);
  2867  001884  0E0C               	movlw	12
  2868  001886  EC84  F00C         	call	_writeLcd
  2869                           
  2870                           ;preset.c: 33: writeLcd(0x06);
  2871  00188A  0E06               	movlw	6
  2872  00188C  EC84  F00C         	call	_writeLcd
  2873                           
  2874                           ;preset.c: 34: clearLcd();
  2875  001890  EC61  F00D         	call	_clearLcd	;wreg free
  2876                           
  2877                           ;preset.c: 35: writeLcd(0x0C);
  2878  001894  0E0C               	movlw	12
  2879  001896  EC84  F00C         	call	_writeLcd
  2880                           
  2881                           ;preset.c: 37: T0CON = 0b00000111;
  2882  00189A  0E07               	movlw	7
  2883  00189C  6ED5               	movwf	4053,c	;volatile
  2884                           
  2885                           ;preset.c: 38: INTCON = 0b11100000;
  2886  00189E  0EE0               	movlw	224
  2887  0018A0  6EF2               	movwf	intcon,c	;volatile
  2888                           
  2889                           ;preset.c: 51: LATD = LATD & 0b00000001;
  2890  0018A2  508C               	movf	3980,w,c	;volatile
  2891  0018A4  0B01               	andlw	1
  2892  0018A6  6E8C               	movwf	3980,c	;volatile
  2893                           
  2894                           ;preset.c: 52: LATC = LATC & 0b11111000;
  2895  0018A8  508B               	movf	3979,w,c	;volatile
  2896  0018AA  0BF8               	andlw	248
  2897  0018AC  6E8B               	movwf	3979,c	;volatile
  2898  0018AE  0012               	return		;funcret
  2899  0018B0                     __end_of_initConfigs:
  2900                           	opt stack 0
  2901                           tblptru	equ	0xFF8
  2902                           tblptrh	equ	0xFF7
  2903                           tblptrl	equ	0xFF6
  2904                           tablat	equ	0xFF5
  2905                           intcon	equ	0xFF2
  2906                           wreg	equ	0xFE8
  2907                           status	equ	0xFD8
  2908                           
  2909 ;; *************** function _clearLcd *****************
  2910 ;; Defined at:
  2911 ;;		line 25 in file "lcd.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;		None
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;		None
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      void 
  2918 ;; Registers used:
  2919 ;;		wreg, status,2, status,0, cstack
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2925 ;;      Params:         0       0       0       0       0       0       0       0       0
  2926 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2927 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2928 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2929 ;;Total ram usage:        1 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    5
  2932 ;; This function calls:
  2933 ;;		_writeLcd
  2934 ;; This function is called by:
  2935 ;;		_main
  2936 ;;		_initConfigs
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           	psect	text10
  2941  001AC2                     __ptext10:
  2942                           	opt stack 0
  2943  001AC2                     _clearLcd:
  2944                           	opt stack 24
  2945                           
  2946                           ;lcd.c: 26: LATBbits.LATB4 = 0;
  2947                           
  2948                           ;incstack = 0
  2949  001AC2  988A               	bcf	3978,4,c	;volatile
  2950                           
  2951                           ;lcd.c: 27: writeLcd(0x1);
  2952  001AC4  0E01               	movlw	1
  2953  001AC6  EC84  F00C         	call	_writeLcd
  2954                           
  2955                           ;lcd.c: 28: _delay((unsigned long)((2)*((16000000)/4000.0)));
  2956  001ACA  0E0B               	movlw	11
  2957  001ACC  0100               	movlb	0	; () banked
  2958  001ACE  6F62               	movwf	??_clearLcd& (0+255),b
  2959  001AD0  0E62               	movlw	98
  2960  001AD2                     u1317:
  2961  001AD2  2EE8               	decfsz	wreg,f,c
  2962  001AD4  D7FE               	bra	u1317
  2963  001AD6  2F62               	decfsz	??_clearLcd& (0+255),f,b
  2964  001AD8  D7FC               	bra	u1317
  2965  001ADA  F000               	nop	
  2966  001ADC  0012               	return		;funcret
  2967  001ADE                     __end_of_clearLcd:
  2968                           	opt stack 0
  2969                           tblptru	equ	0xFF8
  2970                           tblptrh	equ	0xFF7
  2971                           tblptrl	equ	0xFF6
  2972                           tablat	equ	0xFF5
  2973                           intcon	equ	0xFF2
  2974                           wreg	equ	0xFE8
  2975                           status	equ	0xFD8
  2976                           
  2977 ;; *************** function _gotoLcd *****************
  2978 ;; Defined at:
  2979 ;;		line 31 in file "lcd.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;  pos             1    wreg     unsigned char 
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;  pos             1    2[BANK0 ] unsigned char 
  2984 ;; Return value:  Size  Location     Type
  2985 ;;                  1    wreg      void 
  2986 ;; Registers used:
  2987 ;;		wreg, status,2, status,0, cstack
  2988 ;; Tracked objects:
  2989 ;;		On entry : 0/0
  2990 ;;		On exit  : 0/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2993 ;;      Params:         0       0       0       0       0       0       0       0       0
  2994 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2995 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2996 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2997 ;;Total ram usage:        1 bytes
  2998 ;; Hardware stack levels used:    1
  2999 ;; Hardware stack levels required when called:    5
  3000 ;; This function calls:
  3001 ;;		_writeLcd
  3002 ;; This function is called by:
  3003 ;;		_main
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           	psect	text11
  3008  001ADE                     __ptext11:
  3009                           	opt stack 0
  3010  001ADE                     _gotoLcd:
  3011                           	opt stack 25
  3012                           
  3013                           ;incstack = 0
  3014                           ;gotoLcd@pos stored from wreg
  3015  001ADE  0100               	movlb	0	; () banked
  3016  001AE0  6F62               	movwf	gotoLcd@pos& (0+255),b
  3017                           
  3018                           ;lcd.c: 32: LATBbits.LATB4 = 0;
  3019  001AE2  988A               	bcf	3978,4,c	;volatile
  3020                           
  3021                           ;lcd.c: 33: writeLcd(pos);
  3022  001AE4  0100               	movlb	0	; () banked
  3023  001AE6  5162               	movf	gotoLcd@pos& (0+255),w,b
  3024  001AE8  EC84  F00C         	call	_writeLcd
  3025  001AEC  0012               	return		;funcret
  3026  001AEE                     __end_of_gotoLcd:
  3027                           	opt stack 0
  3028                           tblptru	equ	0xFF8
  3029                           tblptrh	equ	0xFF7
  3030                           tblptrl	equ	0xFF6
  3031                           tablat	equ	0xFF5
  3032                           intcon	equ	0xFF2
  3033                           wreg	equ	0xFE8
  3034                           status	equ	0xFD8
  3035                           
  3036 ;; *************** function _writeLcd *****************
  3037 ;; Defined at:
  3038 ;;		line 16 in file "lcd.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  c               1    wreg     unsigned char 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  c               1    1[BANK0 ] unsigned char 
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  1    wreg      void 
  3045 ;; Registers used:
  3046 ;;		wreg, status,2, status,0, cstack
  3047 ;; Tracked objects:
  3048 ;;		On entry : 0/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3052 ;;      Params:         0       0       0       0       0       0       0       0       0
  3053 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3054 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3055 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3056 ;;Total ram usage:        2 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; Hardware stack levels required when called:    4
  3059 ;; This function calls:
  3060 ;;		_sendLcd
  3061 ;; This function is called by:
  3062 ;;		_initConfigs
  3063 ;;		_clearLcd
  3064 ;;		_gotoLcd
  3065 ;;		_writeCStringLcd
  3066 ;;		_writeStringLcd
  3067 ;;		_writeValueLcd
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           	psect	text12
  3072  001908                     __ptext12:
  3073                           	opt stack 0
  3074  001908                     _writeLcd:
  3075                           	opt stack 25
  3076                           
  3077                           ;incstack = 0
  3078                           ;writeLcd@c stored from wreg
  3079  001908  0100               	movlb	0	; () banked
  3080  00190A  6F61               	movwf	writeLcd@c& (0+255),b
  3081                           
  3082                           ;lcd.c: 17: LATB = (unsigned char)((LATB & 0xF0) | (0x0F & c>>4));
  3083  00190C  C061  F060         	movff	writeLcd@c,??_writeLcd
  3084  001910  0100               	movlb	0	; () banked
  3085  001912  3B60               	swapf	??_writeLcd& (0+255),f,b
  3086  001914  0E0F               	movlw	15
  3087  001916  1760               	andwf	??_writeLcd& (0+255),f,b
  3088  001918  0E0F               	movlw	15
  3089  00191A  1760               	andwf	??_writeLcd& (0+255),f,b
  3090  00191C  508A               	movf	3978,w,c	;volatile
  3091  00191E  0BF0               	andlw	240
  3092  001920  1160               	iorwf	??_writeLcd& (0+255),w,b
  3093  001922  6E8A               	movwf	3978,c	;volatile
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;lcd.c: 18: sendLcd();
  3097  001924  EC7E  F00D         	call	_sendLcd	;wreg free
  3098                           
  3099                           ;lcd.c: 19: _delay((unsigned long)((5)*((16000000)/4000000.0)));
  3100  001928  0E06               	movlw	6
  3101  00192A                     u1327:
  3102  00192A  2EE8               	decfsz	wreg,f,c
  3103  00192C  D7FE               	bra	u1327
  3104  00192E  D000               	nop2	
  3105                           
  3106                           ;lcd.c: 20: LATB = (unsigned char)((LATB & 0xF0) | (0x0F & c));
  3107  001930  C061  F060         	movff	writeLcd@c,??_writeLcd
  3108  001934  0E0F               	movlw	15
  3109  001936  0100               	movlb	0	; () banked
  3110  001938  1760               	andwf	??_writeLcd& (0+255),f,b
  3111  00193A  508A               	movf	3978,w,c	;volatile
  3112  00193C  0BF0               	andlw	240
  3113  00193E  1160               	iorwf	??_writeLcd& (0+255),w,b
  3114  001940  6E8A               	movwf	3978,c	;volatile
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;lcd.c: 21: sendLcd();
  3118  001942  EC7E  F00D         	call	_sendLcd	;wreg free
  3119                           
  3120                           ;lcd.c: 22: _delay((unsigned long)((5)*((16000000)/4000.0)));
  3121  001946  0E1A               	movlw	26
  3122  001948  0100               	movlb	0	; () banked
  3123  00194A  6F60               	movwf	??_writeLcd& (0+255),b
  3124  00194C  0EF8               	movlw	248
  3125  00194E                     u1337:
  3126  00194E  2EE8               	decfsz	wreg,f,c
  3127  001950  D7FE               	bra	u1337
  3128  001952  2F60               	decfsz	??_writeLcd& (0+255),f,b
  3129  001954  D7FC               	bra	u1337
  3130  001956  F000               	nop	
  3131  001958  0012               	return		;funcret
  3132  00195A                     __end_of_writeLcd:
  3133                           	opt stack 0
  3134                           tblptru	equ	0xFF8
  3135                           tblptrh	equ	0xFF7
  3136                           tblptrl	equ	0xFF6
  3137                           tablat	equ	0xFF5
  3138                           intcon	equ	0xFF2
  3139                           wreg	equ	0xFE8
  3140                           status	equ	0xFD8
  3141                           
  3142 ;; *************** function _sendLcd *****************
  3143 ;; Defined at:
  3144 ;;		line 11 in file "lcd.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;		None
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;		None
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  1    wreg      void 
  3151 ;; Registers used:
  3152 ;;		None
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3158 ;;      Params:         0       0       0       0       0       0       0       0       0
  3159 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3160 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3161 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3162 ;;Total ram usage:        0 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    3
  3165 ;; This function calls:
  3166 ;;		Nothing
  3167 ;; This function is called by:
  3168 ;;		_writeLcd
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text13
  3173  001AFC                     __ptext13:
  3174                           	opt stack 0
  3175  001AFC                     _sendLcd:
  3176                           	opt stack 25
  3177                           
  3178                           ;lcd.c: 12: LATBbits.LATB5 = 1;
  3179                           
  3180                           ;incstack = 0
  3181  001AFC  8A8A               	bsf	3978,5,c	;volatile
  3182                           
  3183                           ;lcd.c: 13: LATBbits.LATB5 = 0;
  3184  001AFE  9A8A               	bcf	3978,5,c	;volatile
  3185  001B00  0012               	return		;funcret
  3186  001B02                     __end_of_sendLcd:
  3187                           	opt stack 0
  3188                           tblptru	equ	0xFF8
  3189                           tblptrh	equ	0xFF7
  3190                           tblptrl	equ	0xFF6
  3191                           tablat	equ	0xFF5
  3192                           intcon	equ	0xFF2
  3193                           wreg	equ	0xFE8
  3194                           status	equ	0xFD8
  3195                           
  3196 ;; *************** function _adc_read *****************
  3197 ;; Defined at:
  3198 ;;		line 11 in file "adc.c"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;  canal           1    wreg     unsigned char 
  3201 ;; Auto vars:     Size  Location     Type
  3202 ;;  canal           1    4[BANK0 ] unsigned char 
  3203 ;;  y               1    6[BANK0 ] unsigned char 
  3204 ;;  x               1    5[BANK0 ] unsigned char 
  3205 ;; Return value:  Size  Location     Type
  3206 ;;                  2    0[BANK0 ] unsigned int 
  3207 ;; Registers used:
  3208 ;;		wreg, status,2, status,0
  3209 ;; Tracked objects:
  3210 ;;		On entry : 0/0
  3211 ;;		On exit  : 0/0
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3214 ;;      Params:         0       2       0       0       0       0       0       0       0
  3215 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3216 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3217 ;;      Totals:         0       7       0       0       0       0       0       0       0
  3218 ;;Total ram usage:        7 bytes
  3219 ;; Hardware stack levels used:    1
  3220 ;; Hardware stack levels required when called:    3
  3221 ;; This function calls:
  3222 ;;		Nothing
  3223 ;; This function is called by:
  3224 ;;		_main
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           	psect	text14
  3229  0019AC                     __ptext14:
  3230                           	opt stack 0
  3231  0019AC                     _adc_read:
  3232                           	opt stack 27
  3233                           
  3234                           ;incstack = 0
  3235                           ;adc_read@canal stored from wreg
  3236  0019AC  0100               	movlb	0	; () banked
  3237  0019AE  6F64               	movwf	adc_read@canal& (0+255),b
  3238                           
  3239                           ;adc.c: 12: unsigned char x, y;
  3240                           ;adc.c: 13: ADCON0 = (unsigned char)((canal << 2) | 0x01);
  3241  0019B0  0100               	movlb	0	; () banked
  3242  0019B2  4564               	rlncf	adc_read@canal& (0+255),w,b
  3243  0019B4  46E8               	rlncf	wreg,f,c
  3244  0019B6  0BFC               	andlw	252
  3245  0019B8  0901               	iorlw	1
  3246  0019BA  6EC2               	movwf	4034,c	;volatile
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;adc.c: 14: ADCON0bits.GO_DONE = 1;
  3250  0019BC  82C2               	bsf	4034,1,c	;volatile
  3251  0019BE                     
  3252                           ; BSR set to: 0
  3253  0019BE  B2C2               	btfsc	4034,1,c	;volatile
  3254  0019C0  D7FE               	goto	l102
  3255                           
  3256                           ;adc.c: 16: x = (unsigned char)(ADRESH & 0x03);
  3257  0019C2  50C4               	movf	4036,w,c	;volatile
  3258  0019C4  0B03               	andlw	3
  3259  0019C6  0100               	movlb	0	; () banked
  3260  0019C8  6F65               	movwf	adc_read@x& (0+255),b
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;adc.c: 17: y = ADRESL;
  3264  0019CA  CFC3 F066          	movff	4035,adc_read@y	;volatile
  3265                           
  3266                           ;adc.c: 18: return (unsigned int) (x << 8 | y);
  3267  0019CE  5166               	movf	adc_read@y& (0+255),w,b
  3268  0019D0  C065  F062         	movff	adc_read@x,??_adc_read
  3269  0019D4  6B63               	clrf	(??_adc_read+1)& (0+255),b
  3270  0019D6  C062  F063         	movff	??_adc_read,??_adc_read+1
  3271  0019DA  6B62               	clrf	??_adc_read& (0+255),b
  3272  0019DC  1162               	iorwf	??_adc_read& (0+255),w,b
  3273  0019DE  6F60               	movwf	?_adc_read& (0+255),b
  3274  0019E0  5163               	movf	(??_adc_read+1)& (0+255),w,b
  3275  0019E2  6F61               	movwf	(?_adc_read+1)& (0+255),b
  3276  0019E4  0012               	return	
  3277  0019E6                     __end_of_adc_read:
  3278                           	opt stack 0
  3279                           tblptru	equ	0xFF8
  3280                           tblptrh	equ	0xFF7
  3281                           tblptrl	equ	0xFF6
  3282                           tablat	equ	0xFF5
  3283                           intcon	equ	0xFF2
  3284                           wreg	equ	0xFE8
  3285                           status	equ	0xFD8
  3286                           
  3287 ;; *************** function ___lwtoft *****************
  3288 ;; Defined at:
  3289 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;  c               2    8[BANK0 ] unsigned int 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;		None
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  3    8[BANK0 ] float 
  3296 ;; Registers used:
  3297 ;;		wreg, status,2, status,0, cstack
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3303 ;;      Params:         0       3       0       0       0       0       0       0       0
  3304 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3305 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3306 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3307 ;;Total ram usage:        3 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    4
  3310 ;; This function calls:
  3311 ;;		___ftpack
  3312 ;; This function is called by:
  3313 ;;		_main
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           	psect	text15
  3318  001A76                     __ptext15:
  3319                           	opt stack 0
  3320  001A76                     ___lwtoft:
  3321                           	opt stack 26
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;incstack = 0
  3325  001A76  C068  F060         	movff	___lwtoft@c,___ftpack@arg
  3326  001A7A  C069  F061         	movff	___lwtoft@c+1,___ftpack@arg+1
  3327  001A7E  0100               	movlb	0	; () banked
  3328  001A80  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  3329  001A82  0E8E               	movlw	142
  3330  001A84  6F63               	movwf	___ftpack@exp& (0+255),b
  3331  001A86  0E00               	movlw	0
  3332  001A88  6F64               	movwf	___ftpack@sign& (0+255),b
  3333  001A8A  EC13  F00B         	call	___ftpack	;wreg free
  3334  001A8E  C060  F068         	movff	?___ftpack,?___lwtoft
  3335  001A92  C061  F069         	movff	?___ftpack+1,?___lwtoft+1
  3336  001A96  C062  F06A         	movff	?___ftpack+2,?___lwtoft+2
  3337  001A9A  0012               	return	
  3338  001A9C                     __end_of___lwtoft:
  3339                           	opt stack 0
  3340                           tblptru	equ	0xFF8
  3341                           tblptrh	equ	0xFF7
  3342                           tblptrl	equ	0xFF6
  3343                           tablat	equ	0xFF5
  3344                           intcon	equ	0xFF2
  3345                           wreg	equ	0xFE8
  3346                           status	equ	0xFD8
  3347                           
  3348 ;; *************** function ___ftdiv *****************
  3349 ;; Defined at:
  3350 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;  f1              3   26[BANK0 ] float 
  3353 ;;  f2              3   29[BANK0 ] float 
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;  f3              3   36[BANK0 ] float 
  3356 ;;  sign            1   40[BANK0 ] unsigned char 
  3357 ;;  exp             1   39[BANK0 ] unsigned char 
  3358 ;;  cntr            1   35[BANK0 ] unsigned char 
  3359 ;; Return value:  Size  Location     Type
  3360 ;;                  3   26[BANK0 ] float 
  3361 ;; Registers used:
  3362 ;;		wreg, status,2, status,0, cstack
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3368 ;;      Params:         0       6       0       0       0       0       0       0       0
  3369 ;;      Locals:         0       6       0       0       0       0       0       0       0
  3370 ;;      Temps:          0       3       0       0       0       0       0       0       0
  3371 ;;      Totals:         0      15       0       0       0       0       0       0       0
  3372 ;;Total ram usage:       15 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; Hardware stack levels required when called:    4
  3375 ;; This function calls:
  3376 ;;		___ftpack
  3377 ;; This function is called by:
  3378 ;;		_main
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           	psect	text16
  3383  001470                     __ptext16:
  3384                           	opt stack 0
  3385  001470                     ___ftdiv:
  3386                           	opt stack 26
  3387                           
  3388                           ;incstack = 0
  3389  001470  C07C  F080         	movff	___ftdiv@f1+2,??___ftdiv
  3390  001474  0100               	movlb	0	; () banked
  3391  001476  6B81               	clrf	(??___ftdiv+1)& (0+255),b
  3392  001478  6B82               	clrf	(??___ftdiv+2)& (0+255),b
  3393  00147A  357B               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  3394  00147C  3780               	rlcf	??___ftdiv& (0+255),f,b
  3395  00147E  E301               	bnc	u1101
  3396  001480  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
  3397  001482                     u1101:
  3398  001482  5180               	movf	??___ftdiv& (0+255),w,b
  3399  001484  6F87               	movwf	___ftdiv@exp& (0+255),b
  3400  001486  5187               	movf	___ftdiv@exp& (0+255),w,b
  3401  001488  A4D8               	btfss	status,2,c
  3402  00148A  D007               	goto	l437
  3403                           
  3404                           ; BSR set to: 0
  3405  00148C  0E00               	movlw	0
  3406  00148E  6F7A               	movwf	?___ftdiv& (0+255),b
  3407  001490  0E00               	movlw	0
  3408  001492  6F7B               	movwf	(?___ftdiv+1)& (0+255),b
  3409  001494  0E00               	movlw	0
  3410  001496  6F7C               	movwf	(?___ftdiv+2)& (0+255),b
  3411                           
  3412                           ; BSR set to: 0
  3413  001498  0012               	return	
  3414  00149A                     l437:
  3415                           
  3416                           ; BSR set to: 0
  3417                           
  3418                           ; BSR set to: 0
  3419  00149A  C07F  F080         	movff	___ftdiv@f2+2,??___ftdiv
  3420  00149E  6B81               	clrf	(??___ftdiv+1)& (0+255),b
  3421  0014A0  6B82               	clrf	(??___ftdiv+2)& (0+255),b
  3422  0014A2  357E               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  3423  0014A4  3780               	rlcf	??___ftdiv& (0+255),f,b
  3424  0014A6  E301               	bnc	u1121
  3425  0014A8  8181               	bsf	(??___ftdiv+1)& (0+255),0,b
  3426  0014AA                     u1121:
  3427  0014AA  5180               	movf	??___ftdiv& (0+255),w,b
  3428  0014AC  6F88               	movwf	___ftdiv@sign& (0+255),b
  3429  0014AE  5188               	movf	___ftdiv@sign& (0+255),w,b
  3430  0014B0  A4D8               	btfss	status,2,c
  3431  0014B2  D007               	goto	l439
  3432                           
  3433                           ; BSR set to: 0
  3434  0014B4  0E00               	movlw	0
  3435  0014B6  6F7A               	movwf	?___ftdiv& (0+255),b
  3436  0014B8  0E00               	movlw	0
  3437  0014BA  6F7B               	movwf	(?___ftdiv+1)& (0+255),b
  3438  0014BC  0E00               	movlw	0
  3439  0014BE  6F7C               	movwf	(?___ftdiv+2)& (0+255),b
  3440                           
  3441                           ; BSR set to: 0
  3442  0014C0  0012               	return	
  3443  0014C2                     l439:
  3444                           
  3445                           ; BSR set to: 0
  3446                           
  3447                           ; BSR set to: 0
  3448  0014C2  0E00               	movlw	0
  3449  0014C4  6F84               	movwf	___ftdiv@f3& (0+255),b
  3450  0014C6  0E00               	movlw	0
  3451  0014C8  6F85               	movwf	(___ftdiv@f3+1)& (0+255),b
  3452  0014CA  0E00               	movlw	0
  3453  0014CC  6F86               	movwf	(___ftdiv@f3+2)& (0+255),b
  3454                           
  3455                           ; BSR set to: 0
  3456  0014CE  5188               	movf	___ftdiv@sign& (0+255),w,b
  3457  0014D0  0F89               	addlw	137
  3458  0014D2  5F87               	subwf	___ftdiv@exp& (0+255),f,b
  3459                           
  3460                           ; BSR set to: 0
  3461  0014D4  C07C  F088         	movff	___ftdiv@f1+2,___ftdiv@sign
  3462                           
  3463                           ; BSR set to: 0
  3464  0014D8  517F               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3465  0014DA  1B88               	xorwf	___ftdiv@sign& (0+255),f,b
  3466                           
  3467                           ; BSR set to: 0
  3468  0014DC  0E80               	movlw	128
  3469  0014DE  1788               	andwf	___ftdiv@sign& (0+255),f,b
  3470                           
  3471                           ; BSR set to: 0
  3472  0014E0  8F7B               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  3473                           
  3474                           ; BSR set to: 0
  3475  0014E2  0EFF               	movlw	255
  3476  0014E4  177A               	andwf	___ftdiv@f1& (0+255),f,b
  3477  0014E6  0EFF               	movlw	255
  3478  0014E8  177B               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  3479  0014EA  0E00               	movlw	0
  3480  0014EC  177C               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  3481                           
  3482                           ; BSR set to: 0
  3483  0014EE  8F7E               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  3484                           
  3485                           ; BSR set to: 0
  3486  0014F0  0EFF               	movlw	255
  3487  0014F2  177D               	andwf	___ftdiv@f2& (0+255),f,b
  3488  0014F4  0EFF               	movlw	255
  3489  0014F6  177E               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  3490  0014F8  0E00               	movlw	0
  3491  0014FA  177F               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  3492                           
  3493                           ; BSR set to: 0
  3494  0014FC  0E18               	movlw	24
  3495  0014FE  6F83               	movwf	___ftdiv@cntr& (0+255),b
  3496  001500                     
  3497                           ; BSR set to: 0
  3498                           
  3499                           ; BSR set to: 0
  3500  001500  90D8               	bcf	status,0,c
  3501  001502  3784               	rlcf	___ftdiv@f3& (0+255),f,b
  3502  001504  3785               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3503  001506  3786               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3504                           
  3505                           ; BSR set to: 0
  3506  001508  517D               	movf	___ftdiv@f2& (0+255),w,b
  3507  00150A  5D7A               	subwf	___ftdiv@f1& (0+255),w,b
  3508  00150C  517E               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3509  00150E  597B               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  3510  001510  517F               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3511  001512  597C               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  3512  001514  A0D8               	btfss	status,0,c
  3513  001516  D007               	goto	l441
  3514                           
  3515                           ; BSR set to: 0
  3516  001518  517D               	movf	___ftdiv@f2& (0+255),w,b
  3517  00151A  5F7A               	subwf	___ftdiv@f1& (0+255),f,b
  3518  00151C  517E               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3519  00151E  5B7B               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  3520  001520  517F               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3521  001522  5B7C               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  3522                           
  3523                           ; BSR set to: 0
  3524  001524  8184               	bsf	___ftdiv@f3& (0+255),0,b
  3525  001526                     l441:
  3526                           
  3527                           ; BSR set to: 0
  3528  001526  90D8               	bcf	status,0,c
  3529  001528  377A               	rlcf	___ftdiv@f1& (0+255),f,b
  3530  00152A  377B               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  3531  00152C  377C               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  3532                           
  3533                           ; BSR set to: 0
  3534  00152E  2F83               	decfsz	___ftdiv@cntr& (0+255),f,b
  3535  001530  D7E7               	goto	l440
  3536                           
  3537                           ; BSR set to: 0
  3538                           
  3539                           ; BSR set to: 0
  3540  001532  C084  F060         	movff	___ftdiv@f3,___ftpack@arg
  3541  001536  C085  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3542  00153A  C086  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3543  00153E  C087  F063         	movff	___ftdiv@exp,___ftpack@exp
  3544  001542  C088  F064         	movff	___ftdiv@sign,___ftpack@sign
  3545  001546  EC13  F00B         	call	___ftpack	;wreg free
  3546  00154A  C060  F07A         	movff	?___ftpack,?___ftdiv
  3547  00154E  C061  F07B         	movff	?___ftpack+1,?___ftdiv+1
  3548  001552  C062  F07C         	movff	?___ftpack+2,?___ftdiv+2
  3549  001556  0012               	return	
  3550  001558                     __end_of___ftdiv:
  3551                           	opt stack 0
  3552                           tblptru	equ	0xFF8
  3553                           tblptrh	equ	0xFF7
  3554                           tblptrl	equ	0xFF6
  3555                           tablat	equ	0xFF5
  3556                           intcon	equ	0xFF2
  3557                           wreg	equ	0xFE8
  3558                           status	equ	0xFD8
  3559                           
  3560 ;; *************** function ___ftpack *****************
  3561 ;; Defined at:
  3562 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  3563 ;; Parameters:    Size  Location     Type
  3564 ;;  arg             3    0[BANK0 ] unsigned um
  3565 ;;  exp             1    3[BANK0 ] unsigned char 
  3566 ;;  sign            1    4[BANK0 ] unsigned char 
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;		None
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  3    0[BANK0 ] float 
  3571 ;; Registers used:
  3572 ;;		wreg, status,2, status,0
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3578 ;;      Params:         0       5       0       0       0       0       0       0       0
  3579 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3580 ;;      Temps:          0       3       0       0       0       0       0       0       0
  3581 ;;      Totals:         0       8       0       0       0       0       0       0       0
  3582 ;;Total ram usage:        8 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; Hardware stack levels required when called:    3
  3585 ;; This function calls:
  3586 ;;		Nothing
  3587 ;; This function is called by:
  3588 ;;		___ftdiv
  3589 ;;		___ftmul
  3590 ;;		___lwtoft
  3591 ;; This function uses a non-reentrant model
  3592 ;;
  3593                           
  3594                           	psect	text17
  3595  001626                     __ptext17:
  3596                           	opt stack 0
  3597  001626                     ___ftpack:
  3598                           	opt stack 25
  3599                           
  3600                           ;incstack = 0
  3601  001626  0100               	movlb	0	; () banked
  3602  001628  5163               	movf	___ftpack@exp& (0+255),w,b
  3603  00162A  B4D8               	btfsc	status,2,c
  3604  00162C  D005               	goto	u650
  3605                           
  3606                           ; BSR set to: 0
  3607  00162E  5160               	movf	___ftpack@arg& (0+255),w,b
  3608  001630  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  3609  001632  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  3610  001634  A4D8               	btfss	status,2,c
  3611  001636  D00C               	goto	l373
  3612  001638                     u650:
  3613                           
  3614                           ; BSR set to: 0
  3615                           
  3616                           ; BSR set to: 0
  3617  001638  0E00               	movlw	0
  3618  00163A  6F60               	movwf	?___ftpack& (0+255),b
  3619  00163C  0E00               	movlw	0
  3620  00163E  6F61               	movwf	(?___ftpack+1)& (0+255),b
  3621  001640  0E00               	movlw	0
  3622  001642  6F62               	movwf	(?___ftpack+2)& (0+255),b
  3623                           
  3624                           ; BSR set to: 0
  3625  001644  0012               	return	
  3626  001646                     
  3627                           ; BSR set to: 0
  3628                           
  3629                           ; BSR set to: 0
  3630  001646  2B63               	incf	___ftpack@exp& (0+255),f,b
  3631  001648  90D8               	bcf	status,0,c
  3632  00164A  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3633  00164C  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3634  00164E  3360               	rrcf	___ftpack@arg& (0+255),f,b
  3635  001650                     l373:
  3636                           
  3637                           ; BSR set to: 0
  3638                           
  3639                           ; BSR set to: 0
  3640  001650  0E00               	movlw	0
  3641  001652  1560               	andwf	___ftpack@arg& (0+255),w,b
  3642  001654  6F65               	movwf	??___ftpack& (0+255),b
  3643  001656  0E00               	movlw	0
  3644  001658  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3645  00165A  6F66               	movwf	(??___ftpack+1)& (0+255),b
  3646  00165C  0EFE               	movlw	254
  3647  00165E  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3648  001660  6F67               	movwf	(??___ftpack+2)& (0+255),b
  3649  001662  5165               	movf	??___ftpack& (0+255),w,b
  3650  001664  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  3651  001666  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  3652  001668  B4D8               	btfsc	status,2,c
  3653  00166A  D00C               	goto	l376
  3654  00166C  D7EC               	goto	l374
  3655  00166E                     
  3656                           ; BSR set to: 0
  3657                           
  3658                           ; BSR set to: 0
  3659  00166E  2B63               	incf	___ftpack@exp& (0+255),f,b
  3660                           
  3661                           ; BSR set to: 0
  3662  001670  0E01               	movlw	1
  3663  001672  2760               	addwf	___ftpack@arg& (0+255),f,b
  3664  001674  0E00               	movlw	0
  3665  001676  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  3666  001678  0E00               	movlw	0
  3667  00167A  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  3668  00167C  90D8               	bcf	status,0,c
  3669  00167E  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3670  001680  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3671  001682  3360               	rrcf	___ftpack@arg& (0+255),f,b
  3672  001684                     l376:
  3673                           
  3674                           ; BSR set to: 0
  3675                           
  3676                           ; BSR set to: 0
  3677  001684  0E00               	movlw	0
  3678  001686  1560               	andwf	___ftpack@arg& (0+255),w,b
  3679  001688  6F65               	movwf	??___ftpack& (0+255),b
  3680  00168A  0E00               	movlw	0
  3681  00168C  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3682  00168E  6F66               	movwf	(??___ftpack+1)& (0+255),b
  3683  001690  0EFF               	movlw	255
  3684  001692  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3685  001694  6F67               	movwf	(??___ftpack+2)& (0+255),b
  3686  001696  5165               	movf	??___ftpack& (0+255),w,b
  3687  001698  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  3688  00169A  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  3689  00169C  B4D8               	btfsc	status,2,c
  3690  00169E  D006               	goto	l379
  3691  0016A0  D7E6               	goto	l377
  3692  0016A2                     
  3693                           ; BSR set to: 0
  3694                           
  3695                           ; BSR set to: 0
  3696  0016A2  0763               	decf	___ftpack@exp& (0+255),f,b
  3697  0016A4  90D8               	bcf	status,0,c
  3698  0016A6  3760               	rlcf	___ftpack@arg& (0+255),f,b
  3699  0016A8  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  3700  0016AA  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  3701  0016AC                     l379:
  3702                           
  3703                           ; BSR set to: 0
  3704                           
  3705                           ; BSR set to: 0
  3706  0016AC  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  3707  0016AE  D003               	goto	u690
  3708                           
  3709                           ; BSR set to: 0
  3710  0016B0  0E02               	movlw	2
  3711  0016B2  6163               	cpfslt	___ftpack@exp& (0+255),b
  3712  0016B4  D7F6               	goto	l380
  3713  0016B6                     u690:
  3714                           
  3715                           ; BSR set to: 0
  3716                           
  3717                           ; BSR set to: 0
  3718  0016B6  A163               	btfss	___ftpack@exp& (0+255),0,b
  3719                           
  3720                           ; BSR set to: 0
  3721  0016B8  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  3722                           
  3723                           ; BSR set to: 0
  3724                           
  3725                           ; BSR set to: 0
  3726  0016BA  90D8               	bcf	status,0,c
  3727  0016BC  3363               	rrcf	___ftpack@exp& (0+255),f,b
  3728  0016BE  5163               	movf	___ftpack@exp& (0+255),w,b
  3729  0016C0  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  3730                           
  3731                           ; BSR set to: 0
  3732  0016C2  5164               	movf	___ftpack@sign& (0+255),w,b
  3733  0016C4  A4D8               	btfss	status,2,c
  3734                           
  3735                           ; BSR set to: 0
  3736  0016C6  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  3737                           
  3738                           ; BSR set to: 0
  3739                           
  3740                           ; BSR set to: 0
  3741  0016C8  C060  F060         	movff	___ftpack@arg,?___ftpack
  3742  0016CC  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  3743  0016D0  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  3744  0016D4  0012               	return	
  3745  0016D6                     __end_of___ftpack:
  3746                           	opt stack 0
  3747                           tblptru	equ	0xFF8
  3748                           tblptrh	equ	0xFF7
  3749                           tblptrl	equ	0xFF6
  3750                           tablat	equ	0xFF5
  3751                           intcon	equ	0xFF2
  3752                           wreg	equ	0xFE8
  3753                           status	equ	0xFD8
  3754                           
  3755 ;; *************** function _high_priority_interrupt *****************
  3756 ;; Defined at:
  3757 ;;		line 56 in file "preset.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;		None
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;		None
  3762 ;; Return value:  Size  Location     Type
  3763 ;;                  1    wreg      void 
  3764 ;; Registers used:
  3765 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3766 ;; Tracked objects:
  3767 ;;		On entry : 0/0
  3768 ;;		On exit  : 0/0
  3769 ;;		Unchanged: 0/0
  3770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3771 ;;      Params:         0       0       0       0       0       0       0       0       0
  3772 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3773 ;;      Temps:         18       0       0       0       0       0       0       0       0
  3774 ;;      Totals:        18       0       0       0       0       0       0       0       0
  3775 ;;Total ram usage:       18 bytes
  3776 ;; Hardware stack levels used:    1
  3777 ;; Hardware stack levels required when called:    2
  3778 ;; This function calls:
  3779 ;;		_tmr0_flag
  3780 ;; This function is called by:
  3781 ;;		Interrupt level 2
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           	psect	intcode
  3786  000008                     __pintcode:
  3787                           	opt stack 0
  3788  000008                     _high_priority_interrupt:
  3789                           	opt stack 24
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;incstack = 0
  3793  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3794  00000A  EDC2  F00B         	call	int_func,f	;refresh shadow registers
  3795                           tblptru	equ	0xFF8
  3796                           tblptrh	equ	0xFF7
  3797                           tblptrl	equ	0xFF6
  3798                           tablat	equ	0xFF5
  3799                           intcon	equ	0xFF2
  3800                           wreg	equ	0xFE8
  3801                           status	equ	0xFD8
  3802                           
  3803                           	psect	intcode_body
  3804  001784                     __pintcode_body:
  3805                           	opt stack 24
  3806  001784                     int_func:
  3807                           	opt stack 24
  3808  001784  0006               	pop		; remove dummy address from shadow register refresh
  3809  001786  CFFA F02D          	movff	pclath,??_high_priority_interrupt
  3810  00178A  CFFB F02E          	movff	pclatu,??_high_priority_interrupt+1
  3811  00178E  CFE9 F02F          	movff	fsr0l,??_high_priority_interrupt+2
  3812  001792  CFEA F030          	movff	fsr0h,??_high_priority_interrupt+3
  3813  001796  CFE1 F031          	movff	fsr1l,??_high_priority_interrupt+4
  3814  00179A  CFE2 F032          	movff	fsr1h,??_high_priority_interrupt+5
  3815  00179E  CFD9 F033          	movff	fsr2l,??_high_priority_interrupt+6
  3816  0017A2  CFDA F034          	movff	fsr2h,??_high_priority_interrupt+7
  3817  0017A6  CFF3 F035          	movff	prodl,??_high_priority_interrupt+8
  3818  0017AA  CFF4 F036          	movff	prodh,??_high_priority_interrupt+9
  3819  0017AE  CFF6 F037          	movff	tblptrl,??_high_priority_interrupt+10
  3820  0017B2  CFF7 F038          	movff	tblptrh,??_high_priority_interrupt+11
  3821  0017B6  CFF8 F039          	movff	tblptru,??_high_priority_interrupt+12
  3822  0017BA  CFF5 F03A          	movff	tablat,??_high_priority_interrupt+13
  3823  0017BE  C03F  F03B         	movff	btemp,??_high_priority_interrupt+14
  3824  0017C2  C040  F03C         	movff	btemp+1,??_high_priority_interrupt+15
  3825  0017C6  C041  F03D         	movff	btemp+2,??_high_priority_interrupt+16
  3826  0017CA  C042  F03E         	movff	btemp+3,??_high_priority_interrupt+17
  3827                           
  3828                           ;preset.c: 57: if (INTCONbits.TMR0IF)
  3829  0017CE  B4F2               	btfsc	intcon,2,c	;volatile
  3830                           
  3831                           ;preset.c: 58: tmr0_flag();
  3832  0017D0  EC57  F008         	call	_tmr0_flag	;wreg free
  3833  0017D4  C03E  F042         	movff	??_high_priority_interrupt+17,btemp+3
  3834  0017D8  C03D  F041         	movff	??_high_priority_interrupt+16,btemp+2
  3835  0017DC  C03C  F040         	movff	??_high_priority_interrupt+15,btemp+1
  3836  0017E0  C03B  F03F         	movff	??_high_priority_interrupt+14,btemp
  3837  0017E4  C03A  FFF5         	movff	??_high_priority_interrupt+13,tablat
  3838  0017E8  C039  FFF8         	movff	??_high_priority_interrupt+12,tblptru
  3839  0017EC  C038  FFF7         	movff	??_high_priority_interrupt+11,tblptrh
  3840  0017F0  C037  FFF6         	movff	??_high_priority_interrupt+10,tblptrl
  3841  0017F4  C036  FFF4         	movff	??_high_priority_interrupt+9,prodh
  3842  0017F8  C035  FFF3         	movff	??_high_priority_interrupt+8,prodl
  3843  0017FC  C034  FFDA         	movff	??_high_priority_interrupt+7,fsr2h
  3844  001800  C033  FFD9         	movff	??_high_priority_interrupt+6,fsr2l
  3845  001804  C032  FFE2         	movff	??_high_priority_interrupt+5,fsr1h
  3846  001808  C031  FFE1         	movff	??_high_priority_interrupt+4,fsr1l
  3847  00180C  C030  FFEA         	movff	??_high_priority_interrupt+3,fsr0h
  3848  001810  C02F  FFE9         	movff	??_high_priority_interrupt+2,fsr0l
  3849  001814  C02E  FFFB         	movff	??_high_priority_interrupt+1,pclatu
  3850  001818  C02D  FFFA         	movff	??_high_priority_interrupt,pclath
  3851  00181C  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3852  00181E  0011               	retfie		f
  3853  001820                     __end_of_high_priority_interrupt:
  3854                           	opt stack 0
  3855                           pclatu	equ	0xFFB
  3856                           pclath	equ	0xFFA
  3857                           tblptru	equ	0xFF8
  3858                           tblptrh	equ	0xFF7
  3859                           tblptrl	equ	0xFF6
  3860                           tablat	equ	0xFF5
  3861                           prodh	equ	0xFF4
  3862                           prodl	equ	0xFF3
  3863                           intcon	equ	0xFF2
  3864                           fsr0h	equ	0xFEA
  3865                           fsr0l	equ	0xFE9
  3866                           wreg	equ	0xFE8
  3867                           fsr1h	equ	0xFE2
  3868                           fsr1l	equ	0xFE1
  3869                           fsr2h	equ	0xFDA
  3870                           fsr2l	equ	0xFD9
  3871                           status	equ	0xFD8
  3872                           
  3873 ;; *************** function _tmr0_flag *****************
  3874 ;; Defined at:
  3875 ;;		line 11 in file "timer.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;		None
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;  It              4   40[COMRAM] long 
  3880 ;;  Is              4   36[COMRAM] long 
  3881 ;;  Ir              4   32[COMRAM] long 
  3882 ;;  Vt              4   28[COMRAM] long 
  3883 ;;  Vs              4   24[COMRAM] long 
  3884 ;;  Vr              4   20[COMRAM] long 
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  1    wreg      void 
  3887 ;; Registers used:
  3888 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3894 ;;      Params:         0       0       0       0       0       0       0       0       0
  3895 ;;      Locals:        24       0       0       0       0       0       0       0       0
  3896 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3897 ;;      Totals:        24       0       0       0       0       0       0       0       0
  3898 ;;Total ram usage:       24 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; Hardware stack levels required when called:    1
  3901 ;; This function calls:
  3902 ;;		___lwdiv
  3903 ;;		___wmul
  3904 ;;		i2_adc_read
  3905 ;; This function is called by:
  3906 ;;		_high_priority_interrupt
  3907 ;; This function uses a non-reentrant model
  3908 ;;
  3909                           
  3910                           	psect	text19
  3911  0010AE                     __ptext19:
  3912                           	opt stack 0
  3913  0010AE                     _tmr0_flag:
  3914                           	opt stack 24
  3915                           
  3916                           ;timer.c: 12: INTCONbits.TMR0IF = 0;
  3917                           
  3918                           ;incstack = 0
  3919  0010AE  94F2               	bcf	intcon,2,c	;volatile
  3920                           
  3921                           ;timer.c: 13: TMR0L = 0xD2;
  3922  0010B0  0ED2               	movlw	210
  3923  0010B2  6ED6               	movwf	4054,c	;volatile
  3924                           
  3925                           ;timer.c: 14: TMR0H = 0x39;
  3926  0010B4  0E39               	movlw	57
  3927  0010B6  6ED7               	movwf	4055,c	;volatile
  3928                           
  3929                           ;timer.c: 16: long Vr = 0, Vs = 0, Vt = 0, Ir = 0, Is = 0, It = 0;
  3930  0010B8  0E00               	movlw	0
  3931  0010BA  6E15               	movwf	tmr0_flag@Vr,c
  3932  0010BC  0E00               	movlw	0
  3933  0010BE  6E16               	movwf	tmr0_flag@Vr+1,c
  3934  0010C0  0E00               	movlw	0
  3935  0010C2  6E17               	movwf	tmr0_flag@Vr+2,c
  3936  0010C4  0E00               	movlw	0
  3937  0010C6  6E18               	movwf	tmr0_flag@Vr+3,c
  3938  0010C8  0E00               	movlw	0
  3939  0010CA  6E19               	movwf	tmr0_flag@Vs,c
  3940  0010CC  0E00               	movlw	0
  3941  0010CE  6E1A               	movwf	tmr0_flag@Vs+1,c
  3942  0010D0  0E00               	movlw	0
  3943  0010D2  6E1B               	movwf	tmr0_flag@Vs+2,c
  3944  0010D4  0E00               	movlw	0
  3945  0010D6  6E1C               	movwf	tmr0_flag@Vs+3,c
  3946  0010D8  0E00               	movlw	0
  3947  0010DA  6E1D               	movwf	tmr0_flag@Vt,c
  3948  0010DC  0E00               	movlw	0
  3949  0010DE  6E1E               	movwf	tmr0_flag@Vt+1,c
  3950  0010E0  0E00               	movlw	0
  3951  0010E2  6E1F               	movwf	tmr0_flag@Vt+2,c
  3952  0010E4  0E00               	movlw	0
  3953  0010E6  6E20               	movwf	tmr0_flag@Vt+3,c
  3954  0010E8  0E00               	movlw	0
  3955  0010EA  6E21               	movwf	tmr0_flag@Ir,c
  3956  0010EC  0E00               	movlw	0
  3957  0010EE  6E22               	movwf	tmr0_flag@Ir+1,c
  3958  0010F0  0E00               	movlw	0
  3959  0010F2  6E23               	movwf	tmr0_flag@Ir+2,c
  3960  0010F4  0E00               	movlw	0
  3961  0010F6  6E24               	movwf	tmr0_flag@Ir+3,c
  3962  0010F8  0E00               	movlw	0
  3963  0010FA  6E25               	movwf	tmr0_flag@Is,c
  3964  0010FC  0E00               	movlw	0
  3965  0010FE  6E26               	movwf	tmr0_flag@Is+1,c
  3966  001100  0E00               	movlw	0
  3967  001102  6E27               	movwf	tmr0_flag@Is+2,c
  3968  001104  0E00               	movlw	0
  3969  001106  6E28               	movwf	tmr0_flag@Is+3,c
  3970  001108  0E00               	movlw	0
  3971  00110A  6E29               	movwf	tmr0_flag@It,c
  3972  00110C  0E00               	movlw	0
  3973  00110E  6E2A               	movwf	tmr0_flag@It+1,c
  3974  001110  0E00               	movlw	0
  3975  001112  6E2B               	movwf	tmr0_flag@It+2,c
  3976  001114  0E00               	movlw	0
  3977  001116  6E2C               	movwf	tmr0_flag@It+3,c
  3978                           
  3979                           ;timer.c: 17: Vr += (adc_read(0)*5*100) / 1023;
  3980  001118  0E00               	movlw	0
  3981  00111A  ECF3  F00C         	call	i2_adc_read
  3982  00111E  C001  F008         	movff	?i2_adc_read,___wmul@multiplier
  3983  001122  C002  F009         	movff	?i2_adc_read+1,___wmul@multiplier+1
  3984  001126  0E01               	movlw	1
  3985  001128  6E0B               	movwf	___wmul@multiplicand+1,c
  3986  00112A  0EF4               	movlw	244
  3987  00112C  6E0A               	movwf	___wmul@multiplicand,c
  3988  00112E  EC4E  F00D         	call	___wmul	;wreg free
  3989  001132  C008  F00E         	movff	?___wmul,___lwdiv@dividend
  3990  001136  C009  F00F         	movff	?___wmul+1,___lwdiv@dividend+1
  3991  00113A  0E03               	movlw	3
  3992  00113C  6E11               	movwf	___lwdiv@divisor+1,c
  3993  00113E  6810               	setf	___lwdiv@divisor,c
  3994  001140  ECAD  F00C         	call	___lwdiv	;wreg free
  3995  001144  500E               	movf	?___lwdiv,w,c
  3996  001146  2615               	addwf	tmr0_flag@Vr,f,c
  3997  001148  500F               	movf	?___lwdiv+1,w,c
  3998  00114A  2216               	addwfc	tmr0_flag@Vr+1,f,c
  3999  00114C  0E00               	movlw	0
  4000  00114E  2217               	addwfc	tmr0_flag@Vr+2,f,c
  4001  001150  0E00               	movlw	0
  4002  001152  2218               	addwfc	tmr0_flag@Vr+3,f,c
  4003                           
  4004                           ;timer.c: 18: Vs += (adc_read(1)*5*100) / 1023;
  4005  001154  0E01               	movlw	1
  4006  001156  ECF3  F00C         	call	i2_adc_read
  4007  00115A  C001  F008         	movff	?i2_adc_read,___wmul@multiplier
  4008  00115E  C002  F009         	movff	?i2_adc_read+1,___wmul@multiplier+1
  4009  001162  0E01               	movlw	1
  4010  001164  6E0B               	movwf	___wmul@multiplicand+1,c
  4011  001166  0EF4               	movlw	244
  4012  001168  6E0A               	movwf	___wmul@multiplicand,c
  4013  00116A  EC4E  F00D         	call	___wmul	;wreg free
  4014  00116E  C008  F00E         	movff	?___wmul,___lwdiv@dividend
  4015  001172  C009  F00F         	movff	?___wmul+1,___lwdiv@dividend+1
  4016  001176  0E03               	movlw	3
  4017  001178  6E11               	movwf	___lwdiv@divisor+1,c
  4018  00117A  6810               	setf	___lwdiv@divisor,c
  4019  00117C  ECAD  F00C         	call	___lwdiv	;wreg free
  4020  001180  500E               	movf	?___lwdiv,w,c
  4021  001182  2619               	addwf	tmr0_flag@Vs,f,c
  4022  001184  500F               	movf	?___lwdiv+1,w,c
  4023  001186  221A               	addwfc	tmr0_flag@Vs+1,f,c
  4024  001188  0E00               	movlw	0
  4025  00118A  221B               	addwfc	tmr0_flag@Vs+2,f,c
  4026  00118C  0E00               	movlw	0
  4027  00118E  221C               	addwfc	tmr0_flag@Vs+3,f,c
  4028                           
  4029                           ;timer.c: 19: Vt += (adc_read(2)*5*100) / 1023;
  4030  001190  0E02               	movlw	2
  4031  001192  ECF3  F00C         	call	i2_adc_read
  4032  001196  C001  F008         	movff	?i2_adc_read,___wmul@multiplier
  4033  00119A  C002  F009         	movff	?i2_adc_read+1,___wmul@multiplier+1
  4034  00119E  0E01               	movlw	1
  4035  0011A0  6E0B               	movwf	___wmul@multiplicand+1,c
  4036  0011A2  0EF4               	movlw	244
  4037  0011A4  6E0A               	movwf	___wmul@multiplicand,c
  4038  0011A6  EC4E  F00D         	call	___wmul	;wreg free
  4039  0011AA  C008  F00E         	movff	?___wmul,___lwdiv@dividend
  4040  0011AE  C009  F00F         	movff	?___wmul+1,___lwdiv@dividend+1
  4041  0011B2  0E03               	movlw	3
  4042  0011B4  6E11               	movwf	___lwdiv@divisor+1,c
  4043  0011B6  6810               	setf	___lwdiv@divisor,c
  4044  0011B8  ECAD  F00C         	call	___lwdiv	;wreg free
  4045  0011BC  500E               	movf	?___lwdiv,w,c
  4046  0011BE  261D               	addwf	tmr0_flag@Vt,f,c
  4047  0011C0  500F               	movf	?___lwdiv+1,w,c
  4048  0011C2  221E               	addwfc	tmr0_flag@Vt+1,f,c
  4049  0011C4  0E00               	movlw	0
  4050  0011C6  221F               	addwfc	tmr0_flag@Vt+2,f,c
  4051  0011C8  0E00               	movlw	0
  4052  0011CA  2220               	addwfc	tmr0_flag@Vt+3,f,c
  4053                           
  4054                           ;timer.c: 20: Ir += (adc_read(3)*5*100) / 1023;
  4055  0011CC  0E03               	movlw	3
  4056  0011CE  ECF3  F00C         	call	i2_adc_read
  4057  0011D2  C001  F008         	movff	?i2_adc_read,___wmul@multiplier
  4058  0011D6  C002  F009         	movff	?i2_adc_read+1,___wmul@multiplier+1
  4059  0011DA  0E01               	movlw	1
  4060  0011DC  6E0B               	movwf	___wmul@multiplicand+1,c
  4061  0011DE  0EF4               	movlw	244
  4062  0011E0  6E0A               	movwf	___wmul@multiplicand,c
  4063  0011E2  EC4E  F00D         	call	___wmul	;wreg free
  4064  0011E6  C008  F00E         	movff	?___wmul,___lwdiv@dividend
  4065  0011EA  C009  F00F         	movff	?___wmul+1,___lwdiv@dividend+1
  4066  0011EE  0E03               	movlw	3
  4067  0011F0  6E11               	movwf	___lwdiv@divisor+1,c
  4068  0011F2  6810               	setf	___lwdiv@divisor,c
  4069  0011F4  ECAD  F00C         	call	___lwdiv	;wreg free
  4070  0011F8  500E               	movf	?___lwdiv,w,c
  4071  0011FA  2621               	addwf	tmr0_flag@Ir,f,c
  4072  0011FC  500F               	movf	?___lwdiv+1,w,c
  4073  0011FE  2222               	addwfc	tmr0_flag@Ir+1,f,c
  4074  001200  0E00               	movlw	0
  4075  001202  2223               	addwfc	tmr0_flag@Ir+2,f,c
  4076  001204  0E00               	movlw	0
  4077  001206  2224               	addwfc	tmr0_flag@Ir+3,f,c
  4078                           
  4079                           ;timer.c: 21: Is += (adc_read(4)*5*100) / 1023;
  4080  001208  0E04               	movlw	4
  4081  00120A  ECF3  F00C         	call	i2_adc_read
  4082  00120E  C001  F008         	movff	?i2_adc_read,___wmul@multiplier
  4083  001212  C002  F009         	movff	?i2_adc_read+1,___wmul@multiplier+1
  4084  001216  0E01               	movlw	1
  4085  001218  6E0B               	movwf	___wmul@multiplicand+1,c
  4086  00121A  0EF4               	movlw	244
  4087  00121C  6E0A               	movwf	___wmul@multiplicand,c
  4088  00121E  EC4E  F00D         	call	___wmul	;wreg free
  4089  001222  C008  F00E         	movff	?___wmul,___lwdiv@dividend
  4090  001226  C009  F00F         	movff	?___wmul+1,___lwdiv@dividend+1
  4091  00122A  0E03               	movlw	3
  4092  00122C  6E11               	movwf	___lwdiv@divisor+1,c
  4093  00122E  6810               	setf	___lwdiv@divisor,c
  4094  001230  ECAD  F00C         	call	___lwdiv	;wreg free
  4095  001234  500E               	movf	?___lwdiv,w,c
  4096  001236  2625               	addwf	tmr0_flag@Is,f,c
  4097  001238  500F               	movf	?___lwdiv+1,w,c
  4098  00123A  2226               	addwfc	tmr0_flag@Is+1,f,c
  4099  00123C  0E00               	movlw	0
  4100  00123E  2227               	addwfc	tmr0_flag@Is+2,f,c
  4101  001240  0E00               	movlw	0
  4102  001242  2228               	addwfc	tmr0_flag@Is+3,f,c
  4103                           
  4104                           ;timer.c: 22: It += (adc_read(5)*5*100) / 1023;
  4105  001244  0E05               	movlw	5
  4106  001246  ECF3  F00C         	call	i2_adc_read
  4107  00124A  C001  F008         	movff	?i2_adc_read,___wmul@multiplier
  4108  00124E  C002  F009         	movff	?i2_adc_read+1,___wmul@multiplier+1
  4109  001252  0E01               	movlw	1
  4110  001254  6E0B               	movwf	___wmul@multiplicand+1,c
  4111  001256  0EF4               	movlw	244
  4112  001258  6E0A               	movwf	___wmul@multiplicand,c
  4113  00125A  EC4E  F00D         	call	___wmul	;wreg free
  4114  00125E  C008  F00E         	movff	?___wmul,___lwdiv@dividend
  4115  001262  C009  F00F         	movff	?___wmul+1,___lwdiv@dividend+1
  4116  001266  0E03               	movlw	3
  4117  001268  6E11               	movwf	___lwdiv@divisor+1,c
  4118  00126A  6810               	setf	___lwdiv@divisor,c
  4119  00126C  ECAD  F00C         	call	___lwdiv	;wreg free
  4120  001270  500E               	movf	?___lwdiv,w,c
  4121  001272  2629               	addwf	tmr0_flag@It,f,c
  4122  001274  500F               	movf	?___lwdiv+1,w,c
  4123  001276  222A               	addwfc	tmr0_flag@It+1,f,c
  4124  001278  0E00               	movlw	0
  4125  00127A  222B               	addwfc	tmr0_flag@It+2,f,c
  4126  00127C  0E00               	movlw	0
  4127  00127E  222C               	addwfc	tmr0_flag@It+3,f,c
  4128  001280  0012               	return		;funcret
  4129  001282                     __end_of_tmr0_flag:
  4130                           	opt stack 0
  4131                           pclatu	equ	0xFFB
  4132                           pclath	equ	0xFFA
  4133                           tblptru	equ	0xFF8
  4134                           tblptrh	equ	0xFF7
  4135                           tblptrl	equ	0xFF6
  4136                           tablat	equ	0xFF5
  4137                           prodh	equ	0xFF4
  4138                           prodl	equ	0xFF3
  4139                           intcon	equ	0xFF2
  4140                           fsr0h	equ	0xFEA
  4141                           fsr0l	equ	0xFE9
  4142                           wreg	equ	0xFE8
  4143                           fsr1h	equ	0xFE2
  4144                           fsr1l	equ	0xFE1
  4145                           fsr2h	equ	0xFDA
  4146                           fsr2l	equ	0xFD9
  4147                           status	equ	0xFD8
  4148                           
  4149 ;; *************** function i2_adc_read *****************
  4150 ;; Defined at:
  4151 ;;		line 11 in file "adc.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  canal           1    wreg     unsigned char 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  canal           1    4[COMRAM] unsigned char 
  4156 ;;  adc_read        1    6[COMRAM] unsigned char 
  4157 ;;  adc_read        1    5[COMRAM] unsigned char 
  4158 ;; Return value:  Size  Location     Type
  4159 ;;                  2    0[COMRAM] unsigned int 
  4160 ;; Registers used:
  4161 ;;		wreg, status,2, status,0
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4167 ;;      Params:         2       0       0       0       0       0       0       0       0
  4168 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4169 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4170 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4171 ;;Total ram usage:        7 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; This function calls:
  4174 ;;		Nothing
  4175 ;; This function is called by:
  4176 ;;		_tmr0_flag
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           	psect	text20
  4181  0019E6                     __ptext20:
  4182                           	opt stack 0
  4183  0019E6                     i2_adc_read:
  4184                           	opt stack 24
  4185                           
  4186                           ;incstack = 0
  4187                           ;i2adc_read@canal stored from wreg
  4188  0019E6  6E05               	movwf	i2adc_read@canal,c
  4189                           
  4190                           ;adc.c: 12: unsigned char x, y;
  4191                           ;adc.c: 13: ADCON0 = (unsigned char)((canal << 2) | 0x01);
  4192  0019E8  4405               	rlncf	i2adc_read@canal,w,c
  4193  0019EA  46E8               	rlncf	wreg,f,c
  4194  0019EC  0BFC               	andlw	252
  4195  0019EE  0901               	iorlw	1
  4196  0019F0  6EC2               	movwf	4034,c	;volatile
  4197                           
  4198                           ;adc.c: 14: ADCON0bits.GO_DONE = 1;
  4199  0019F2  82C2               	bsf	4034,1,c	;volatile
  4200  0019F4  B2C2               	btfsc	4034,1,c	;volatile
  4201  0019F6  D7FE               	goto	i2l102
  4202                           
  4203                           ;adc.c: 16: x = (unsigned char)(ADRESH & 0x03);
  4204  0019F8  50C4               	movf	4036,w,c	;volatile
  4205  0019FA  0B03               	andlw	3
  4206  0019FC  6E06               	movwf	i2adc_read@x,c
  4207                           
  4208                           ;adc.c: 17: y = ADRESL;
  4209  0019FE  CFC3 F007          	movff	4035,i2adc_read@y	;volatile
  4210                           
  4211                           ;adc.c: 18: return (unsigned int) (x << 8 | y);
  4212  001A02  5007               	movf	i2adc_read@y,w,c
  4213  001A04  C006  F003         	movff	i2adc_read@x,??i2_adc_read
  4214  001A08  6A04               	clrf	(??i2_adc_read+1)& (0+255),c
  4215  001A0A  C003  F004         	movff	??i2_adc_read,??i2_adc_read+1
  4216  001A0E  6A03               	clrf	??i2_adc_read,c
  4217  001A10  1003               	iorwf	??i2_adc_read,w,c
  4218  001A12  6E01               	movwf	?i2_adc_read,c
  4219  001A14  5004               	movf	??i2_adc_read+1,w,c
  4220  001A16  6E02               	movwf	?i2_adc_read+1,c
  4221  001A18  0012               	return	
  4222  001A1A                     __end_ofi2_adc_read:
  4223                           	opt stack 0
  4224                           pclatu	equ	0xFFB
  4225                           pclath	equ	0xFFA
  4226                           tblptru	equ	0xFF8
  4227                           tblptrh	equ	0xFF7
  4228                           tblptrl	equ	0xFF6
  4229                           tablat	equ	0xFF5
  4230                           prodh	equ	0xFF4
  4231                           prodl	equ	0xFF3
  4232                           intcon	equ	0xFF2
  4233                           fsr0h	equ	0xFEA
  4234                           fsr0l	equ	0xFE9
  4235                           wreg	equ	0xFE8
  4236                           fsr1h	equ	0xFE2
  4237                           fsr1l	equ	0xFE1
  4238                           fsr2h	equ	0xFDA
  4239                           fsr2l	equ	0xFD9
  4240                           status	equ	0xFD8
  4241                           
  4242 ;; *************** function ___wmul *****************
  4243 ;; Defined at:
  4244 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  multiplier      2    7[COMRAM] unsigned int 
  4247 ;;  multiplicand    2    9[COMRAM] unsigned int 
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;  product         2   11[COMRAM] unsigned int 
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  2    7[COMRAM] unsigned int 
  4252 ;; Registers used:
  4253 ;;		wreg, status,2, status,0, prodl, prodh
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4259 ;;      Params:         4       0       0       0       0       0       0       0       0
  4260 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4261 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4262 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4263 ;;Total ram usage:        6 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; This function calls:
  4266 ;;		Nothing
  4267 ;; This function is called by:
  4268 ;;		_tmr0_flag
  4269 ;; This function uses a non-reentrant model
  4270 ;;
  4271                           
  4272                           	psect	text21
  4273  001A9C                     __ptext21:
  4274                           	opt stack 0
  4275  001A9C                     ___wmul:
  4276                           	opt stack 24
  4277                           
  4278                           ;incstack = 0
  4279  001A9C  5008               	movf	___wmul@multiplier,w,c
  4280  001A9E  020A               	mulwf	___wmul@multiplicand,c
  4281  001AA0  CFF3 F00C          	movff	prodl,___wmul@product
  4282  001AA4  CFF4 F00D          	movff	prodh,___wmul@product+1
  4283  001AA8  5008               	movf	___wmul@multiplier,w,c
  4284  001AAA  020B               	mulwf	___wmul@multiplicand+1,c
  4285  001AAC  50F3               	movf	prodl,w,c
  4286  001AAE  260D               	addwf	___wmul@product+1,f,c
  4287  001AB0  5009               	movf	___wmul@multiplier+1,w,c
  4288  001AB2  020A               	mulwf	___wmul@multiplicand,c
  4289  001AB4  50F3               	movf	prodl,w,c
  4290  001AB6  260D               	addwf	___wmul@product+1,f,c
  4291  001AB8  C00C  F008         	movff	___wmul@product,?___wmul
  4292  001ABC  C00D  F009         	movff	___wmul@product+1,?___wmul+1
  4293  001AC0  0012               	return	
  4294  001AC2                     __end_of___wmul:
  4295                           	opt stack 0
  4296                           pclatu	equ	0xFFB
  4297                           pclath	equ	0xFFA
  4298                           tblptru	equ	0xFF8
  4299                           tblptrh	equ	0xFF7
  4300                           tblptrl	equ	0xFF6
  4301                           tablat	equ	0xFF5
  4302                           prodh	equ	0xFF4
  4303                           prodl	equ	0xFF3
  4304                           intcon	equ	0xFF2
  4305                           fsr0h	equ	0xFEA
  4306                           fsr0l	equ	0xFE9
  4307                           wreg	equ	0xFE8
  4308                           fsr1h	equ	0xFE2
  4309                           fsr1l	equ	0xFE1
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314 ;; *************** function ___lwdiv *****************
  4315 ;; Defined at:
  4316 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  dividend        2   13[COMRAM] unsigned int 
  4319 ;;  divisor         2   15[COMRAM] unsigned int 
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  quotient        2   17[COMRAM] unsigned int 
  4322 ;;  counter         1   19[COMRAM] unsigned char 
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  2   13[COMRAM] unsigned int 
  4325 ;; Registers used:
  4326 ;;		wreg, status,2, status,0
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4332 ;;      Params:         4       0       0       0       0       0       0       0       0
  4333 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4334 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4335 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4336 ;;Total ram usage:        7 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		_tmr0_flag
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           	psect	text22
  4346  00195A                     __ptext22:
  4347                           	opt stack 0
  4348  00195A                     ___lwdiv:
  4349                           	opt stack 24
  4350                           
  4351                           ;incstack = 0
  4352  00195A  0E00               	movlw	0
  4353  00195C  6E13               	movwf	___lwdiv@quotient+1,c
  4354  00195E  0E00               	movlw	0
  4355  001960  6E12               	movwf	___lwdiv@quotient,c
  4356  001962  5010               	movf	___lwdiv@divisor,w,c
  4357  001964  1011               	iorwf	___lwdiv@divisor+1,w,c
  4358  001966  B4D8               	btfsc	status,2,c
  4359  001968  D01C               	goto	i2l567
  4360  00196A  0E01               	movlw	1
  4361  00196C  6E14               	movwf	___lwdiv@counter,c
  4362  00196E  D004               	goto	i2l562
  4363  001970  90D8               	bcf	status,0,c
  4364  001972  3610               	rlcf	___lwdiv@divisor,f,c
  4365  001974  3611               	rlcf	___lwdiv@divisor+1,f,c
  4366  001976  2A14               	incf	___lwdiv@counter,f,c
  4367  001978                     i2l562:
  4368  001978  AE11               	btfss	___lwdiv@divisor+1,7,c
  4369  00197A  D7FA               	goto	i2l563
  4370  00197C                     i2u101_40:
  4371  00197C  90D8               	bcf	status,0,c
  4372  00197E  3612               	rlcf	___lwdiv@quotient,f,c
  4373  001980  3613               	rlcf	___lwdiv@quotient+1,f,c
  4374  001982  5010               	movf	___lwdiv@divisor,w,c
  4375  001984  5C0E               	subwf	___lwdiv@dividend,w,c
  4376  001986  5011               	movf	___lwdiv@divisor+1,w,c
  4377  001988  580F               	subwfb	___lwdiv@dividend+1,w,c
  4378  00198A  A0D8               	btfss	status,0,c
  4379  00198C  D005               	goto	i2l566
  4380  00198E  5010               	movf	___lwdiv@divisor,w,c
  4381  001990  5E0E               	subwf	___lwdiv@dividend,f,c
  4382  001992  5011               	movf	___lwdiv@divisor+1,w,c
  4383  001994  5A0F               	subwfb	___lwdiv@dividend+1,f,c
  4384  001996  8012               	bsf	___lwdiv@quotient,0,c
  4385  001998                     i2l566:
  4386  001998  90D8               	bcf	status,0,c
  4387  00199A  3211               	rrcf	___lwdiv@divisor+1,f,c
  4388  00199C  3210               	rrcf	___lwdiv@divisor,f,c
  4389  00199E  2E14               	decfsz	___lwdiv@counter,f,c
  4390  0019A0  D7ED               	goto	i2u101_40
  4391  0019A2                     i2l567:
  4392  0019A2  C012  F00E         	movff	___lwdiv@quotient,?___lwdiv
  4393  0019A6  C013  F00F         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4394  0019AA  0012               	return		;funcret
  4395  0019AC                     __end_of___lwdiv:
  4396                           	opt stack 0
  4397                           pclatu	equ	0xFFB
  4398                           pclath	equ	0xFFA
  4399                           tblptru	equ	0xFF8
  4400                           tblptrh	equ	0xFF7
  4401                           tblptrl	equ	0xFF6
  4402                           tablat	equ	0xFF5
  4403                           prodh	equ	0xFF4
  4404                           prodl	equ	0xFF3
  4405                           intcon	equ	0xFF2
  4406                           fsr0h	equ	0xFEA
  4407                           fsr0l	equ	0xFE9
  4408                           wreg	equ	0xFE8
  4409                           fsr1h	equ	0xFE2
  4410                           fsr1l	equ	0xFE1
  4411                           fsr2h	equ	0xFDA
  4412                           fsr2l	equ	0xFD9
  4413                           status	equ	0xFD8
  4414                           pclatu	equ	0xFFB
  4415                           pclath	equ	0xFFA
  4416                           tblptru	equ	0xFF8
  4417                           tblptrh	equ	0xFF7
  4418                           tblptrl	equ	0xFF6
  4419                           tablat	equ	0xFF5
  4420                           prodh	equ	0xFF4
  4421                           prodl	equ	0xFF3
  4422                           intcon	equ	0xFF2
  4423                           fsr0h	equ	0xFEA
  4424                           fsr0l	equ	0xFE9
  4425                           wreg	equ	0xFE8
  4426                           fsr1h	equ	0xFE2
  4427                           fsr1l	equ	0xFE1
  4428                           fsr2h	equ	0xFDA
  4429                           fsr2l	equ	0xFD9
  4430                           status	equ	0xFD8
  4431                           
  4432                           	psect	rparam
  4433  0000                     pclatu	equ	0xFFB
  4434                           pclath	equ	0xFFA
  4435                           tblptru	equ	0xFF8
  4436                           tblptrh	equ	0xFF7
  4437                           tblptrl	equ	0xFF6
  4438                           tablat	equ	0xFF5
  4439                           prodh	equ	0xFF4
  4440                           prodl	equ	0xFF3
  4441                           intcon	equ	0xFF2
  4442                           fsr0h	equ	0xFEA
  4443                           fsr0l	equ	0xFE9
  4444                           wreg	equ	0xFE8
  4445                           fsr1h	equ	0xFE2
  4446                           fsr1l	equ	0xFE1
  4447                           fsr2h	equ	0xFDA
  4448                           fsr2l	equ	0xFD9
  4449                           status	equ	0xFD8
  4450                           
  4451                           	psect	temp
  4452  00003F                     btemp:
  4453                           	opt stack 0
  4454  00003F                     	ds	1
  4455  0000                     int$flags	set	btemp
  4456  0000                     wtemp6	set	btemp+1
  4457                           pclatu	equ	0xFFB
  4458                           pclath	equ	0xFFA
  4459                           tblptru	equ	0xFF8
  4460                           tblptrh	equ	0xFF7
  4461                           tblptrl	equ	0xFF6
  4462                           tablat	equ	0xFF5
  4463                           prodh	equ	0xFF4
  4464                           prodl	equ	0xFF3
  4465                           intcon	equ	0xFF2
  4466                           fsr0h	equ	0xFEA
  4467                           fsr0l	equ	0xFE9
  4468                           wreg	equ	0xFE8
  4469                           fsr1h	equ	0xFE2
  4470                           fsr1l	equ	0xFE1
  4471                           fsr2h	equ	0xFDA
  4472                           fsr2l	equ	0xFD9
  4473                           status	equ	0xFD8


Data Sizes:
    Strings     84
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     62      62
    BANK0           160     57      57
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    writeStringLcd@s	PTR unsigned char  size(2) Largest target is 10
		 -> STR_14(CODE[2]), STR_13(CODE[10]), STR_12(CODE[2]), STR_11(CODE[10]), 
		 -> STR_10(CODE[2]), STR_9(CODE[10]), STR_8(CODE[2]), STR_7(CODE[10]), 
		 -> STR_6(CODE[2]), STR_5(CODE[10]), STR_4(CODE[2]), STR_3(CODE[10]), 

    writeCStringLcd@s	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_2(CODE[17]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_priority_interrupt in COMRAM

    _high_priority_interrupt->_tmr0_flag
    _tmr0_flag->___lwdiv
    ___wmul->i2_adc_read
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    _main->_writeValueLcd
    _writeValueLcd->___fttol
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    ___aldiv->___almod
    _writeStringLcd->_writeLcd
    _writeCStringLcd->_writeLcd
    _initConfigs->_clearLcd
    _clearLcd->_writeLcd
    _gotoLcd->_writeLcd
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul

Critical Paths under _high_priority_interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_priority_interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_priority_interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_priority_interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_priority_interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_priority_interrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_priority_interrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_priority_interrupt in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0   20338
                                             52 BANK0      5     5      0
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                           _adc_read
                           _clearLcd
                            _gotoLcd
                        _initConfigs
                    _writeCStringLcd
                     _writeStringLcd
                      _writeValueLcd
 ---------------------------------------------------------------------------------
 (1) _writeValueLcd                                       11     8      3    8099
                                             41 BANK0     11     8      3
                            ___aldiv
                            ___almod
                            ___ftmul
                            ___fttol
                             ___lmul
                           _writeLcd
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     370
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     328
                                             26 BANK0     15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3943
                                             11 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
                           _adc_read (ARG)
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8    1664
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     908
                                             10 BANK0     14     6      8
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (1) _writeStringLcd                                       2     0      2    1001
                                              2 BANK0      2     0      2
                           _writeLcd
 ---------------------------------------------------------------------------------
 (1) _writeCStringLcd                                      2     0      2     241
                                              2 BANK0      2     0      2
                           _writeLcd
 ---------------------------------------------------------------------------------
 (1) _initConfigs                                          2     2      0      88
                                              3 BANK0      2     2      0
                           _clearLcd
                           _writeLcd
 ---------------------------------------------------------------------------------
 (2) _clearLcd                                             1     1      0      44
                                              2 BANK0      1     1      0
                           _writeLcd
 ---------------------------------------------------------------------------------
 (1) _gotoLcd                                              1     1      0      66
                                              2 BANK0      1     1      0
                           _writeLcd
 ---------------------------------------------------------------------------------
 (2) _writeLcd                                             2     2      0      44
                                              0 BANK0      2     2      0
                            _sendLcd
 ---------------------------------------------------------------------------------
 (3) _sendLcd                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_read                                             7     5      2      68
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2905
                                              8 BANK0      3     0      3
                           ___ftpack
                           _adc_read (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3745
                                             26 BANK0     15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                           _adc_read (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2427
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_priority_interrupt                             18    18      0    2225
                                             44 COMRAM    18    18      0
                          _tmr0_flag
 ---------------------------------------------------------------------------------
 (6) _tmr0_flag                                           24    24      0    2225
                                             20 COMRAM    24    24      0
                            ___lwdiv
                             ___wmul
                         i2_adc_read
 ---------------------------------------------------------------------------------
 (7) i2_adc_read                                           7     5      2      68
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1071
                                              7 COMRAM     6     2      4
                         i2_adc_read (ARG)
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4    1074
                                             13 COMRAM     7     3      4
                             ___wmul (ARG)
                         i2_adc_read (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftdiv
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       _adc_read (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
       _adc_read (ARG)
     _adc_read (ARG)
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
       _adc_read (ARG)
     _adc_read (ARG)
   ___lwtoft
     ___ftpack
     _adc_read (ARG)
   _adc_read
   _clearLcd
     _writeLcd
       _sendLcd
   _gotoLcd
     _writeLcd
       _sendLcd
   _initConfigs
     _clearLcd
       _writeLcd
         _sendLcd
     _writeLcd
       _sendLcd
   _writeCStringLcd
     _writeLcd
       _sendLcd
   _writeStringLcd
     _writeLcd
       _sendLcd
   _writeValueLcd
     ___aldiv
       ___almod (ARG)
     ___almod
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       _adc_read (ARG)
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         _adc_read (ARG)
     ___lmul
     _writeLcd
       _sendLcd

 _high_priority_interrupt (ROOT)
   _tmr0_flag
     ___lwdiv
       ___wmul (ARG)
         i2_adc_read (ARG)
       i2_adc_read (ARG)
     ___wmul
       i2_adc_read (ARG)
     i2_adc_read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5E     3E      3E       1       66.0%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     39      39       5       35.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 21 12:07:39 2018

                  writeValueLcd@x 0090               ___wmul@multiplicand 000A  
                writeValueLcd@val 0089                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                        i2_adc_read 19E6  
                             l102 19BE                               l131 1A34  
                             l132 1A1E                               l125 1A62  
                             l221 15F0                               l126 1A4C  
                             l222 15FE                               l214 1576  
                             l230 1726                               l223 1614  
                             l215 158E                               l231 171A  
                             l217 15BC                               l137 0DB2  
                             l218 15B0                               l234 174E  
                             l170 18C2                               l138 0F2A  
                             l235 175C                               l227 16F4  
                             l171 18D6                               l139 0E84  
                             l236 1772                               l228 1708  
                             l440 1500                               l441 1526  
                             l380 16A2                               l452 13A4  
                             l373 1650                               l437 149A  
                             l374 1646                               l454 13CC  
                             l439 14C2                               l455 13FE  
                             l376 1684                               l456 140E  
                             l377 166E                               l481 134C  
                             l473 12B0                               l458 1426  
                             l482 1340                               l379 16AC  
                             l459 1436                               l475 1328  
                             l484 1368                               l476 1318  
                    __CFG_CPB$OFF 000000                      __CFG_CPD$OFF 000000  
                             u650 1638                               u830 172A  
                             u921 1294                               u690 16B6  
                             u770 15C0                               u940 12CE  
                             u861 138C                               u881 13B4  
                             u945 12C6                               u980 1352  
               ??_writeCStringLcd 0064                               wreg 000FE8  
                    __CFG_FOSC$HS 000000                      __CFG_LVP$OFF 000000  
                    ___ftdiv@cntr 0083                      ___ftdiv@sign 0088  
                    __CFG_WDT$OFF 000000                              STR_1 084E  
                            STR_2 0801                              STR_3 0812  
                            STR_4 0853                              STR_5 0826  
                            STR_6 0853                              STR_7 083A  
                            STR_8 0853                              STR_9 081C  
                            u1101 1482                              u1121 14AA  
                            u1060 0DCA                              u1070 0DE0  
                            u1207 08CE                              u1217 0912  
                            u1307 186E                              u1227 092C  
                            u1317 1AD2                              u1237 09E6  
                            _LATB 000F8A                              u1327 192A  
                            u1247 0A8C                              u1167 0862  
                            _LATC 000F8B                              _LATD 000F8C  
                            u1337 194E                              u1257 0B32  
                            u1177 087C                              u1267 0BD8  
                            u1187 0896                              u1277 0C7E  
                            u1197 08B4                              u1287 0D24  
                            u1297 1852                     __CFG_DEBUG$ON 000000  
                            _UCON 000F6D                      __CFG_PWRT$ON 000000  
                            _main 0856                      ___ftpack@arg 0060  
                    ___ftpack@exp 0063                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            fsr0l 000FE9                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 003F  
                            prodh 000FF4                              prodl 000FF3  
                            start 000E                      ?_initConfigs 0001  
                   __CFG_MCLRE$ON 000000                      ___ftmul@cntr 0078  
                     i2adc_read@x 0006                       i2adc_read@y 0007  
                    ___param_bank 000000                      ___ftmul@sign 0079  
                    ___fttol@exp1 0088                   i2adc_read@canal 0005  
                    ___fttol@lval 0084                     __CFG_PLLDIV$4 000000  
                 __end_of___aldiv 1626                   __end_of___almod 1784  
                           ?_main 0001                             STR_10 0853  
                           STR_11 0830                             STR_12 0853  
                           STR_13 0844                             STR_14 0853  
                 __end_of___ftdiv 1558                             _CMCON 000FB4  
                 __end_of___ftmul 1470                             _T0CON 000FD5  
                 __end_of___fttol 137A                   __end_of___lwdiv 19AC  
                           i2l102 19F4                             i2l562 1978  
                           i2l563 1970                             i2l566 1998  
                           i2l567 19A2                             _TMR0H 000FD7  
                           _TMR0L 000FD6                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000               ___lmul@multiplicand 0064  
                   __CFG_WRT3$OFF 000000                    __CFG_EBTR0$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBTRB$OFF 000000                   __end_of_gotoLcd 1AEE  
                   ___ftpack@sign 0064                   __end_of_sendLcd 1B02  
                           pclath 000FFA                             tablat 000FF5  
                           status 000FD8                             wtemp6 0040  
                  __CFG_ICPRT$OFF 000000                   __initialization 1AEE  
                 writeStringLcd@s 0062                      __end_of_main 0D32  
                ??_writeStringLcd 0064                       ?i2_adc_read 0001  
                          ??_main 0094                     ___fttol@sign1 0083  
                   __activetblptr 000002                            _ADCON0 000FC2  
                          _ADCON1 000FC1                            _ADCON2 000FC0  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                __end_of___ftpack 16D6                  __end_of_adc_read 19E6  
                          _INTCON 000FF2                  __end_of___lwtoft 1A9C  
                __end_of_clearLcd 1ADE                    __CFG_XINST$OFF 000000  
                          ___lmul 18B0                         ??___aldiv 0072  
                       ??___almod 0068                            ___wmul 1A9C  
                  __CFG_STVREN$ON 000000                         ??___ftdiv 0080  
                       ??___ftmul 0071                         ??___fttol 007E  
                       ??___lwdiv 0012             ___ftmul@f3_as_product 0075  
                       ??_gotoLcd 0062                         ??_sendLcd 0060  
                    __mediumconst 0000                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                writeCStringLcd@s 0062                  __end_of_writeLcd 195A  
                      __accesstop 0060           __end_of__initialization 1AEE  
             __size_ofi2_adc_read 0034                     ___rparam_used 000001  
                      ___ftdiv@f1 007A                        ___ftdiv@f2 007D  
                      ___ftdiv@f3 0084                        ___ftmul@f1 006B  
                      ___ftmul@f2 006E            __size_of_writeValueLcd 037C  
                      ___fttol@f1 007A                   _writeCStringLcd 1A48  
                  __pcstackCOMRAM 0001              __size_of_initConfigs 0090  
                      ___lwtoft@c 0068  __size_of_high_priority_interrupt 1818  
                         ?___lmul 0060                           ?___wmul 0008  
              __size_of_tmr0_flag 01D4                    ___lmul@product 0068  
                       ?___ftpack 0060                         ?_adc_read 0060  
                       ?___lwtoft 0068                       tmr0_flag@Ir 0021  
                     tmr0_flag@Is 0025                       tmr0_flag@It 0029  
                     tmr0_flag@Vr 0015                       tmr0_flag@Vs 0019  
                     tmr0_flag@Vt 001D                         ?_clearLcd 0001  
                   _writeValueLcd 0D32           __end_of_writeCStringLcd 1A76  
                         __Hparam 0000                           __Lparam 0000  
                         ___aldiv 1558                           ___almod 16D6  
                 __size_of___lmul 0058                           ___ftdiv 1470  
                 __size_of___wmul 0026                           ___ftmul 137A  
                         ___fttol 1282                           ___lwdiv 195A  
                    __psmallconst 0800                           __pcinit 1AEE  
                      ??___ftpack 0065                           __ramtop 0800  
                    ??i2_adc_read 0003                        ??_adc_read 0062  
                       ?_writeLcd 0001                           __ptext0 0856  
                         __ptext1 0D32                           __ptext2 18B0  
                         __ptext3 1282                           __ptext4 137A  
                         __ptext5 16D6                           __ptext6 1558  
                         __ptext7 1A1A                           __ptext8 1A48  
                         __ptext9 1820                        ??___lwtoft 006B  
                         _gotoLcd 1ADE                    ?_writeValueLcd 0089  
                         _sendLcd 1AFC                  ___aldiv@dividend 006A  
                      ??_clearLcd 0062                    __pintcode_body 1784  
            end_of_initialization 1AEE                 __end_of_tmr0_flag 1282  
                   __Lmediumconst 0000                           int_func 1784  
              __end_ofi2_adc_read 1A1A                  ___aldiv@quotient 0074  
         _high_priority_interrupt 0008                        ??_writeLcd 0060  
                ?_writeCStringLcd 0062                       ___ftdiv@exp 0087  
                     ___ftmul@exp 0074                    __end_of___lmul 1908  
                  __end_of___wmul 1AC2                   ??_writeValueLcd 008C  
             start_initialization 1AEE           __size_of_writeStringLcd 002E  
                      gotoLcd@pos 0062                     ??_initConfigs 0063  
                        ??___lmul 0068                          ??___wmul 000C  
       ??_high_priority_interrupt 002D                 __size_of___ftpack 00B0  
               __size_of_adc_read 003A                 __size_of___lwtoft 0026  
                   __pcstackBANK0 0060                 __size_of_clearLcd 001C  
                   adc_read@canal 0064                  ___lwdiv@dividend 000E  
                       adc_read@x 0065                         adc_read@y 0066  
                       __pintcode 0008                          ?___aldiv 006A  
                        ?___almod 0060                          ?___ftdiv 007A  
                        ?___ftmul 006B                          ?___fttol 007A  
                        ?___lwdiv 000E               __end_of_initConfigs 18B0  
                ___almod@dividend 0060                       __smallconst 0800  
                        ?_gotoLcd 0001                 __size_of_writeLcd 0052  
                        ?_sendLcd 0001                  ___lwdiv@quotient 0012  
 __end_of_high_priority_interrupt 1820                   ___aldiv@divisor 006E  
                 ___aldiv@counter 0072                    ___wmul@product 000C  
                        _LATBbits 000F8A                          _LATCbits 000F8B  
                        _LATDbits 000F8C                         _tmr0_flag 10AE  
                        i2u101_40 197C                        _ADCON0bits 000FC2  
               ___wmul@multiplier 0008                         main@valor 0096  
                  _writeStringLcd 1A1A                 ___lmul@multiplier 0060  
                      ?_tmr0_flag 0001                          __Hrparam 0000  
                        __Lrparam 0000                       _initConfigs 1820  
                __size_of___aldiv 00CE                  __size_of___almod 00AE  
                __size_of___ftdiv 00E8                  __size_of___ftmul 00F6  
                __size_of___fttol 00F8                  __size_of___lwdiv 0052  
                        ___ftpack 1626                          _adc_read 19AC  
                        ___lwtoft 1A76            __end_of_writeStringLcd 1A48  
                __size_of_gotoLcd 0010                          _clearLcd 1AC2  
                 ___lwdiv@divisor 0010                  __size_of_sendLcd 0006  
                 ___lwdiv@counter 0014                          __ptext10 1AC2  
                        __ptext11 1ADE                          __ptext20 19E6  
                        __ptext12 1908                          __ptext21 1A9C  
                        __ptext13 1AFC                          __ptext22 195A  
                        __ptext14 19AC                          __ptext15 1A76  
                        __ptext16 1470                          __ptext17 1626  
                        __ptext19 10AE                   ___almod@divisor 0064  
                 ___almod@counter 0068                     __size_of_main 04DC  
                        int$flags 003F          __size_of_writeCStringLcd 002E  
                        _writeLcd 1908             __CFG_CPUDIV$OSC1_PLL2 000000  
                 ?_writeStringLcd 0062                        _INTCONbits 000FF2  
           __end_of_writeValueLcd 10AE                          intlevel2 0000  
                     ??_tmr0_flag 0015                         writeLcd@c 0061  
                    ___aldiv@sign 0073                      ___almod@sign 0069  
        ?_high_priority_interrupt 0001  
