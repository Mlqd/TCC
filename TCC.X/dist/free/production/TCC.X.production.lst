

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 21 10:29:59 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32  0000                     
    33                           ; Version 1.45
    34                           ; Generated 16/11/2017 GMT
    35                           ; 
    36                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F4550 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     _TMR0H	set	4055
    68  0000                     _TMR0L	set	4054
    69  0000                     _LATB	set	3978
    70  0000                     _ADRESL	set	4035
    71  0000                     _ADRESH	set	4036
    72  0000                     _ADCON0bits	set	4034
    73  0000                     _ADCON0	set	4034
    74  0000                     _LATCbits	set	3979
    75  0000                     _LATDbits	set	3980
    76  0000                     _INTCONbits	set	4082
    77  0000                     _LATC	set	3979
    78  0000                     _LATD	set	3980
    79  0000                     _INTCON	set	4082
    80  0000                     _T0CON	set	4053
    81  0000                     _LATBbits	set	3978
    82  0000                     _TRISB	set	3987
    83  0000                     _ADCON2	set	4032
    84  0000                     _ADCON1	set	4033
    85  0000                     _TRISA	set	3986
    86  0000                     _TRISE	set	3990
    87  0000                     _TRISD	set	3989
    88  0000                     _TRISC	set	3988
    89  0000                     _CMCON	set	4020
    90  0000                     _UCON	set	3949
    91                           
    92                           	psect	smallconst
    93  000800                     __psmallconst:
    94                           	opt stack 0
    95  000800  00                 	db	0
    96  000801                     STR_2:
    97  000801  54                 	db	84	;'T'
    98  000802  65                 	db	101	;'e'
    99  000803  73                 	db	115	;'s'
   100  000804  74                 	db	116	;'t'
   101  000805  65                 	db	101	;'e'
   102  000806  20                 	db	32
   103  000807  43                 	db	67	;'C'
   104  000808  6F                 	db	111	;'o'
   105  000809  6E                 	db	110	;'n'
   106  00080A  76                 	db	118	;'v'
   107  00080B  2E                 	db	46
   108  00080C  20                 	db	32
   109  00080D  41                 	db	65	;'A'
   110  00080E  44                 	db	68	;'D'
   111  00080F  43                 	db	67	;'C'
   112  000810  20                 	db	32
   113  000811  00                 	db	0
   114  000812                     STR_3:
   115  000812  53                 	db	83	;'S'
   116  000813  69                 	db	105	;'i'
   117  000814  6E                 	db	110	;'n'
   118  000815  61                 	db	97	;'a'
   119  000816  6C                 	db	108	;'l'
   120  000817  20                 	db	32
   121  000818  49                 	db	73	;'I'
   122  000819  72                 	db	114	;'r'
   123  00081A  20                 	db	32
   124  00081B  00                 	db	0
   125  00081C                     STR_9:
   126  00081C  53                 	db	83	;'S'
   127  00081D  69                 	db	105	;'i'
   128  00081E  6E                 	db	110	;'n'
   129  00081F  61                 	db	97	;'a'
   130  000820  6C                 	db	108	;'l'
   131  000821  20                 	db	32
   132  000822  56                 	db	86	;'V'
   133  000823  72                 	db	114	;'r'
   134  000824  20                 	db	32
   135  000825  00                 	db	0
   136  000826                     STR_5:
   137  000826  53                 	db	83	;'S'
   138  000827  69                 	db	105	;'i'
   139  000828  6E                 	db	110	;'n'
   140  000829  61                 	db	97	;'a'
   141  00082A  6C                 	db	108	;'l'
   142  00082B  20                 	db	32
   143  00082C  49                 	db	73	;'I'
   144  00082D  73                 	db	115	;'s'
   145  00082E  20                 	db	32
   146  00082F  00                 	db	0
   147  000830                     STR_11:
   148  000830  53                 	db	83	;'S'
   149  000831  69                 	db	105	;'i'
   150  000832  6E                 	db	110	;'n'
   151  000833  61                 	db	97	;'a'
   152  000834  6C                 	db	108	;'l'
   153  000835  20                 	db	32
   154  000836  56                 	db	86	;'V'
   155  000837  73                 	db	115	;'s'
   156  000838  20                 	db	32
   157  000839  00                 	db	0
   158  00083A                     STR_7:
   159  00083A  53                 	db	83	;'S'
   160  00083B  69                 	db	105	;'i'
   161  00083C  6E                 	db	110	;'n'
   162  00083D  61                 	db	97	;'a'
   163  00083E  6C                 	db	108	;'l'
   164  00083F  20                 	db	32
   165  000840  49                 	db	73	;'I'
   166  000841  74                 	db	116	;'t'
   167  000842  20                 	db	32
   168  000843  00                 	db	0
   169  000844                     STR_13:
   170  000844  53                 	db	83	;'S'
   171  000845  69                 	db	105	;'i'
   172  000846  6E                 	db	110	;'n'
   173  000847  61                 	db	97	;'a'
   174  000848  6C                 	db	108	;'l'
   175  000849  20                 	db	32
   176  00084A  56                 	db	86	;'V'
   177  00084B  74                 	db	116	;'t'
   178  00084C  20                 	db	32
   179  00084D  00                 	db	0
   180  00084E                     STR_1:
   181  00084E  4E                 	db	78	;'N'
   182  00084F  72                 	db	114	;'r'
   183  000850  3A                 	db	58	;':'
   184  000851  20                 	db	32
   185  000852  00                 	db	0
   186  000853                     STR_4:
   187  000853  56                 	db	86	;'V'
   188  000854  00                 	db	0
   189  0000                     
   190                           ; #config settings
   191  000855  00                 	db	0	; dummy byte at the end
   192  0000                     
   193                           	psect	cinit
   194  0017BC                     __pcinit:
   195                           	opt stack 0
   196  0017BC                     start_initialization:
   197                           	opt stack 0
   198  0017BC                     __initialization:
   199                           	opt stack 0
   200  0017BC                     end_of_initialization:
   201                           	opt stack 0
   202  0017BC                     __end_of__initialization:
   203                           	opt stack 0
   204  0017BC  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   205  0017BE  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   206  0017C0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   207  0017C2  6EF8               	movwf	tblptru,c
   208  0017C4  0100               	movlb	0
   209  0017C6  EF2B  F004         	goto	_main	;jump to C main() function
   210                           tblptru	equ	0xFF8
   211                           
   212                           	psect	cstackCOMRAM
   213  000001                     __pcstackCOMRAM:
   214                           	opt stack 0
   215  000001                     ??_high_priority_interrupt:
   216  000001                     
   217                           ; 1 bytes @ 0x0
   218  000001                     	ds	18
   219  000013                     ??_writeLcd:
   220  000013                     ?_adc_read:
   221                           	opt stack 0
   222  000013                     ?___ftpack:
   223                           	opt stack 0
   224  000013                     ?___lmul:
   225                           	opt stack 0
   226  000013                     ?___almod:
   227                           	opt stack 0
   228  000013                     ___ftpack@arg:
   229                           	opt stack 0
   230  000013                     ___lmul@multiplier:
   231                           	opt stack 0
   232  000013                     ___almod@dividend:
   233                           	opt stack 0
   234                           
   235                           ; 4 bytes @ 0x12
   236  000013                     	ds	1
   237  000014                     writeLcd@c:
   238                           	opt stack 0
   239                           
   240                           ; 1 bytes @ 0x13
   241  000014                     	ds	1
   242  000015                     ??_clearLcd:
   243  000015                     ??_adc_read:
   244  000015                     gotoLcd@pos:
   245                           	opt stack 0
   246  000015                     writeCStringLcd@s:
   247                           	opt stack 0
   248  000015                     writeStringLcd@s:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x14
   252  000015                     	ds	1
   253  000016                     ??_initConfigs:
   254  000016                     ___ftpack@exp:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x15
   258  000016                     	ds	1
   259  000017                     adc_read@canal:
   260                           	opt stack 0
   261  000017                     ___ftpack@sign:
   262                           	opt stack 0
   263  000017                     ___lmul@multiplicand:
   264                           	opt stack 0
   265  000017                     ___almod@divisor:
   266                           	opt stack 0
   267                           
   268                           ; 4 bytes @ 0x16
   269  000017                     	ds	1
   270  000018                     ??___ftpack:
   271  000018                     adc_read@x:
   272                           	opt stack 0
   273                           
   274                           ; 1 bytes @ 0x17
   275  000018                     	ds	1
   276  000019                     adc_read@y:
   277                           	opt stack 0
   278                           
   279                           ; 1 bytes @ 0x18
   280  000019                     	ds	2
   281  00001B                     ?___lwtoft:
   282                           	opt stack 0
   283  00001B                     ___almod@counter:
   284                           	opt stack 0
   285  00001B                     ___lwtoft@c:
   286                           	opt stack 0
   287  00001B                     ___lmul@product:
   288                           	opt stack 0
   289                           
   290                           ; 4 bytes @ 0x1A
   291  00001B                     	ds	1
   292  00001C                     ___almod@sign:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0x1B
   296  00001C                     	ds	1
   297  00001D                     ?___aldiv:
   298                           	opt stack 0
   299  00001D                     ___aldiv@dividend:
   300                           	opt stack 0
   301                           
   302                           ; 4 bytes @ 0x1C
   303  00001D                     	ds	1
   304  00001E                     ?___ftmul:
   305                           	opt stack 0
   306  00001E                     ___ftmul@f1:
   307                           	opt stack 0
   308                           
   309                           ; 3 bytes @ 0x1D
   310  00001E                     	ds	3
   311  000021                     ___ftmul@f2:
   312                           	opt stack 0
   313  000021                     ___aldiv@divisor:
   314                           	opt stack 0
   315                           
   316                           ; 4 bytes @ 0x20
   317  000021                     	ds	3
   318  000024                     ??___ftmul:
   319                           
   320                           ; 1 bytes @ 0x23
   321  000024                     	ds	1
   322  000025                     ___aldiv@counter:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x24
   326  000025                     	ds	1
   327  000026                     ___aldiv@sign:
   328                           	opt stack 0
   329                           
   330                           ; 1 bytes @ 0x25
   331  000026                     	ds	1
   332  000027                     ___ftmul@exp:
   333                           	opt stack 0
   334  000027                     ___aldiv@quotient:
   335                           	opt stack 0
   336                           
   337                           ; 4 bytes @ 0x26
   338  000027                     	ds	1
   339  000028                     ___ftmul@f3_as_product:
   340                           	opt stack 0
   341                           
   342                           ; 3 bytes @ 0x27
   343  000028                     	ds	3
   344  00002B                     ___ftmul@cntr:
   345                           	opt stack 0
   346                           
   347                           ; 1 bytes @ 0x2A
   348  00002B                     	ds	1
   349  00002C                     ___ftmul@sign:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0x2B
   353  00002C                     	ds	1
   354  00002D                     ?___ftdiv:
   355                           	opt stack 0
   356  00002D                     ?___fttol:
   357                           	opt stack 0
   358  00002D                     ___ftdiv@f1:
   359                           	opt stack 0
   360  00002D                     ___fttol@f1:
   361                           	opt stack 0
   362                           
   363                           ; 3 bytes @ 0x2C
   364  00002D                     	ds	3
   365  000030                     ___ftdiv@f2:
   366                           	opt stack 0
   367                           
   368                           ; 3 bytes @ 0x2F
   369  000030                     	ds	1
   370  000031                     ??___fttol:
   371                           
   372                           ; 1 bytes @ 0x30
   373  000031                     	ds	2
   374  000033                     ??___ftdiv:
   375                           
   376                           ; 1 bytes @ 0x32
   377  000033                     	ds	3
   378  000036                     ___ftdiv@cntr:
   379                           	opt stack 0
   380  000036                     ___fttol@sign1:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x35
   384  000036                     	ds	1
   385  000037                     ___ftdiv@f3:
   386                           	opt stack 0
   387  000037                     ___fttol@lval:
   388                           	opt stack 0
   389                           
   390                           ; 4 bytes @ 0x36
   391  000037                     	ds	3
   392  00003A                     ___ftdiv@exp:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x39
   396  00003A                     	ds	1
   397  00003B                     ___ftdiv@sign:
   398                           	opt stack 0
   399  00003B                     ___fttol@exp1:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x3A
   403  00003B                     	ds	1
   404  00003C                     writeValueLcd@val:
   405                           	opt stack 0
   406                           
   407                           ; 3 bytes @ 0x3B
   408  00003C                     	ds	3
   409  00003F                     ??_writeValueLcd:
   410                           
   411                           ; 1 bytes @ 0x3E
   412  00003F                     	ds	4
   413  000043                     writeValueLcd@x:
   414                           	opt stack 0
   415                           
   416                           ; 4 bytes @ 0x42
   417  000043                     	ds	4
   418  000047                     ??_main:
   419                           
   420                           ; 1 bytes @ 0x46
   421  000047                     	ds	2
   422  000049                     main@valor:
   423                           	opt stack 0
   424                           
   425                           ; 3 bytes @ 0x48
   426  000049                     	ds	3
   427                           tblptru	equ	0xFF8
   428                           
   429 ;;
   430 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   431 ;;
   432 ;; *************** function _main *****************
   433 ;; Defined at:
   434 ;;		line 16 in file "main.c"
   435 ;; Parameters:    Size  Location     Type
   436 ;;		None
   437 ;; Auto vars:     Size  Location     Type
   438 ;;  str             7    0        unsigned char [7]
   439 ;;  valor           3   72[COMRAM] float 
   440 ;;  val             2    0        unsigned char [2]
   441 ;; Return value:  Size  Location     Type
   442 ;;                  1    wreg      void 
   443 ;; Registers used:
   444 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   445 ;; Tracked objects:
   446 ;;		On entry : 0/0
   447 ;;		On exit  : 0/0
   448 ;;		Unchanged: 0/0
   449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   450 ;;      Params:         0       0       0       0       0       0       0       0       0
   451 ;;      Locals:         3       0       0       0       0       0       0       0       0
   452 ;;      Temps:          2       0       0       0       0       0       0       0       0
   453 ;;      Totals:         5       0       0       0       0       0       0       0       0
   454 ;;Total ram usage:        5 bytes
   455 ;; Hardware stack levels required when called:    6
   456 ;; This function calls:
   457 ;;		___ftdiv
   458 ;;		___ftmul
   459 ;;		___lwtoft
   460 ;;		_adc_read
   461 ;;		_clearLcd
   462 ;;		_gotoLcd
   463 ;;		_initConfigs
   464 ;;		_writeCStringLcd
   465 ;;		_writeStringLcd
   466 ;;		_writeValueLcd
   467 ;; This function is called by:
   468 ;;		Startup code after reset
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472                           	psect	text0
   473  000856                     __ptext0:
   474                           	opt stack 0
   475  000856                     _main:
   476                           	opt stack 25
   477                           
   478                           ;main.c: 17: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   479                           
   480                           ;incstack = 0
   481  000856  0E15               	movlw	21
   482  000858  6E48               	movwf	(??_main+1)& (0+255),c
   483  00085A  0E4B               	movlw	75
   484  00085C  6E47               	movwf	??_main& (0+255),c
   485  00085E  0EBE               	movlw	190
   486  000860                     u1077:
   487  000860  2EE8               	decfsz	wreg,f,c
   488  000862  D7FE               	bra	u1077
   489  000864  2E47               	decfsz	??_main& (0+255),f,c
   490  000866  D7FC               	bra	u1077
   491  000868  2E48               	decfsz	(??_main+1)& (0+255),f,c
   492  00086A  D7FA               	bra	u1077
   493  00086C  D000               	nop2	
   494                           
   495                           ;main.c: 18: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   496  00086E  0E15               	movlw	21
   497  000870  6E48               	movwf	(??_main+1)& (0+255),c
   498  000872  0E4B               	movlw	75
   499  000874  6E47               	movwf	??_main& (0+255),c
   500  000876  0EBE               	movlw	190
   501  000878                     u1087:
   502  000878  2EE8               	decfsz	wreg,f,c
   503  00087A  D7FE               	bra	u1087
   504  00087C  2E47               	decfsz	??_main& (0+255),f,c
   505  00087E  D7FC               	bra	u1087
   506  000880  2E48               	decfsz	(??_main+1)& (0+255),f,c
   507  000882  D7FA               	bra	u1087
   508  000884  D000               	nop2	
   509                           
   510                           ;main.c: 19: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   511  000886  0E15               	movlw	21
   512  000888  6E48               	movwf	(??_main+1)& (0+255),c
   513  00088A  0E4B               	movlw	75
   514  00088C  6E47               	movwf	??_main& (0+255),c
   515  00088E  0EBE               	movlw	190
   516  000890                     u1097:
   517  000890  2EE8               	decfsz	wreg,f,c
   518  000892  D7FE               	bra	u1097
   519  000894  2E47               	decfsz	??_main& (0+255),f,c
   520  000896  D7FC               	bra	u1097
   521  000898  2E48               	decfsz	(??_main+1)& (0+255),f,c
   522  00089A  D7FA               	bra	u1097
   523  00089C  D000               	nop2	
   524                           
   525                           ;main.c: 20: initConfigs();
   526  00089E  ECE3  F00A         	call	_initConfigs	;wreg free
   527                           
   528                           ;main.c: 21: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   529  0008A2  0E15               	movlw	21
   530  0008A4  6E48               	movwf	(??_main+1)& (0+255),c
   531  0008A6  0E4B               	movlw	75
   532  0008A8  6E47               	movwf	??_main& (0+255),c
   533  0008AA  0EBE               	movlw	190
   534  0008AC                     u1107:
   535  0008AC  2EE8               	decfsz	wreg,f,c
   536  0008AE  D7FE               	bra	u1107
   537  0008B0  2E47               	decfsz	??_main& (0+255),f,c
   538  0008B2  D7FC               	bra	u1107
   539  0008B4  2E48               	decfsz	(??_main+1)& (0+255),f,c
   540  0008B6  D7FA               	bra	u1107
   541  0008B8  D000               	nop2	
   542                           
   543                           ;main.c: 22: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   544  0008BA  0E15               	movlw	21
   545  0008BC  6E48               	movwf	(??_main+1)& (0+255),c
   546  0008BE  0E4B               	movlw	75
   547  0008C0  6E47               	movwf	??_main& (0+255),c
   548  0008C2  0EBE               	movlw	190
   549  0008C4                     u1117:
   550  0008C4  2EE8               	decfsz	wreg,f,c
   551  0008C6  D7FE               	bra	u1117
   552  0008C8  2E47               	decfsz	??_main& (0+255),f,c
   553  0008CA  D7FC               	bra	u1117
   554  0008CC  2E48               	decfsz	(??_main+1)& (0+255),f,c
   555  0008CE  D7FA               	bra	u1117
   556  0008D0  D000               	nop2	
   557                           
   558                           ;main.c: 23: clearLcd();
   559  0008D2  ECD1  F00B         	call	_clearLcd	;wreg free
   560                           
   561                           ;main.c: 24: gotoLcd(0x80);
   562  0008D6  0E80               	movlw	128
   563  0008D8  ECE5  F00B         	call	_gotoLcd
   564                           
   565                           ;main.c: 25: writeCStringLcd("Nr: ");
   566  0008DC  0E4E               	movlw	low STR_1
   567  0008DE  6E15               	movwf	writeCStringLcd@s,c
   568  0008E0  0E08               	movlw	high STR_1
   569  0008E2  6E16               	movwf	writeCStringLcd@s+1,c
   570  0008E4  ECA9  F00B         	call	_writeCStringLcd	;wreg free
   571                           
   572                           ;main.c: 26: writeValueLcd(0.92);
   573  0008E8  0E85               	movlw	133
   574  0008EA  6E3C               	movwf	writeValueLcd@val,c
   575  0008EC  0E6B               	movlw	107
   576  0008EE  6E3D               	movwf	writeValueLcd@val+1,c
   577  0008F0  0E3F               	movlw	63
   578  0008F2  6E3E               	movwf	writeValueLcd@val+2,c
   579  0008F4  EC71  F006         	call	_writeValueLcd	;wreg free
   580                           
   581                           ;main.c: 27: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   582  0008F8  0E15               	movlw	21
   583  0008FA  6E48               	movwf	(??_main+1)& (0+255),c
   584  0008FC  0E4B               	movlw	75
   585  0008FE  6E47               	movwf	??_main& (0+255),c
   586  000900  0EBE               	movlw	190
   587  000902                     u1127:
   588  000902  2EE8               	decfsz	wreg,f,c
   589  000904  D7FE               	bra	u1127
   590  000906  2E47               	decfsz	??_main& (0+255),f,c
   591  000908  D7FC               	bra	u1127
   592  00090A  2E48               	decfsz	(??_main+1)& (0+255),f,c
   593  00090C  D7FA               	bra	u1127
   594  00090E  D000               	nop2	
   595                           
   596                           ;main.c: 28: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   597  000910  0E15               	movlw	21
   598  000912  6E48               	movwf	(??_main+1)& (0+255),c
   599  000914  0E4B               	movlw	75
   600  000916  6E47               	movwf	??_main& (0+255),c
   601  000918  0EBE               	movlw	190
   602  00091A                     u1137:
   603  00091A  2EE8               	decfsz	wreg,f,c
   604  00091C  D7FE               	bra	u1137
   605  00091E  2E47               	decfsz	??_main& (0+255),f,c
   606  000920  D7FC               	bra	u1137
   607  000922  2E48               	decfsz	(??_main+1)& (0+255),f,c
   608  000924  D7FA               	bra	u1137
   609  000926  D000               	nop2	
   610                           
   611                           ;main.c: 85: gotoLcd(0x80);
   612                           
   613                           ;main.c: 30: while(1) {
   614  000928  0E80               	movlw	128
   615  00092A  ECE5  F00B         	call	_gotoLcd
   616                           
   617                           ;main.c: 86: writeCStringLcd("Teste Conv. ADC ");
   618  00092E  0E01               	movlw	low STR_2
   619  000930  6E15               	movwf	writeCStringLcd@s,c
   620  000932  0E08               	movlw	high STR_2
   621  000934  6E16               	movwf	writeCStringLcd@s+1,c
   622  000936  ECA9  F00B         	call	_writeCStringLcd	;wreg free
   623                           
   624                           ;main.c: 88: float valor;
   625                           ;main.c: 89: unsigned char str[7];
   626                           ;main.c: 90: unsigned char val[2];
   627                           ;main.c: 92: valor = ((float) (adc_read(0))*5) / 1023;
   628  00093A  0E00               	movlw	0
   629  00093C  6E21               	movwf	___ftmul@f2,c
   630  00093E  0EA0               	movlw	160
   631  000940  6E22               	movwf	___ftmul@f2+1,c
   632  000942  0E40               	movlw	64
   633  000944  6E23               	movwf	___ftmul@f2+2,c
   634  000946  0E00               	movlw	0
   635  000948  EC79  F00B         	call	_adc_read
   636  00094C  C013  F01B         	movff	?_adc_read,___lwtoft@c
   637  000950  C014  F01C         	movff	?_adc_read+1,___lwtoft@c+1
   638  000954  ECBF  F00B         	call	___lwtoft	;wreg free
   639  000958  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
   640  00095C  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
   641  000960  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
   642  000964  EC95  F008         	call	___ftmul	;wreg free
   643  000968  C01E  F02D         	movff	?___ftmul,___ftdiv@f1
   644  00096C  C01F  F02E         	movff	?___ftmul+1,___ftdiv@f1+1
   645  000970  C020  F02F         	movff	?___ftmul+2,___ftdiv@f1+2
   646  000974  0EC0               	movlw	192
   647  000976  6E30               	movwf	___ftdiv@f2,c
   648  000978  0E7F               	movlw	127
   649  00097A  6E31               	movwf	___ftdiv@f2+1,c
   650  00097C  0E44               	movlw	68
   651  00097E  6E32               	movwf	___ftdiv@f2+2,c
   652  000980  EC0F  F009         	call	___ftdiv	;wreg free
   653  000984  C02D  F049         	movff	?___ftdiv,main@valor
   654  000988  C02E  F04A         	movff	?___ftdiv+1,main@valor+1
   655  00098C  C02F  F04B         	movff	?___ftdiv+2,main@valor+2
   656                           
   657                           ;main.c: 93: gotoLcd(0xC0);
   658  000990  0EC0               	movlw	192
   659  000992  ECE5  F00B         	call	_gotoLcd
   660                           
   661                           ;main.c: 94: writeStringLcd("Sinal Ir ");
   662  000996  0E12               	movlw	low STR_3
   663  000998  6E15               	movwf	writeStringLcd@s,c
   664  00099A  0E08               	movlw	high STR_3
   665  00099C  6E16               	movwf	writeStringLcd@s+1,c
   666  00099E  EC93  F00B         	call	_writeStringLcd	;wreg free
   667                           
   668                           ;main.c: 95: writeValueLcd(valor);
   669  0009A2  C049  F03C         	movff	main@valor,writeValueLcd@val
   670  0009A6  C04A  F03D         	movff	main@valor+1,writeValueLcd@val+1
   671  0009AA  C04B  F03E         	movff	main@valor+2,writeValueLcd@val+2
   672  0009AE  EC71  F006         	call	_writeValueLcd	;wreg free
   673                           
   674                           ;main.c: 96: writeStringLcd("V");
   675  0009B2  0E53               	movlw	low STR_4
   676  0009B4  6E15               	movwf	writeStringLcd@s,c
   677  0009B6  0E08               	movlw	high STR_4
   678  0009B8  6E16               	movwf	writeStringLcd@s+1,c
   679  0009BA  EC93  F00B         	call	_writeStringLcd	;wreg free
   680                           
   681                           ;main.c: 97: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   682  0009BE  0E15               	movlw	21
   683  0009C0  6E48               	movwf	(??_main+1)& (0+255),c
   684  0009C2  0E4B               	movlw	75
   685  0009C4  6E47               	movwf	??_main& (0+255),c
   686  0009C6  0EBE               	movlw	190
   687  0009C8                     u1147:
   688  0009C8  2EE8               	decfsz	wreg,f,c
   689  0009CA  D7FE               	bra	u1147
   690  0009CC  2E47               	decfsz	??_main& (0+255),f,c
   691  0009CE  D7FC               	bra	u1147
   692  0009D0  2E48               	decfsz	(??_main+1)& (0+255),f,c
   693  0009D2  D7FA               	bra	u1147
   694  0009D4  D000               	nop2	
   695                           
   696                           ;main.c: 99: valor = ((float) (adc_read(1))*5) / 1023;
   697  0009D6  0E00               	movlw	0
   698  0009D8  6E21               	movwf	___ftmul@f2,c
   699  0009DA  0EA0               	movlw	160
   700  0009DC  6E22               	movwf	___ftmul@f2+1,c
   701  0009DE  0E40               	movlw	64
   702  0009E0  6E23               	movwf	___ftmul@f2+2,c
   703  0009E2  0E01               	movlw	1
   704  0009E4  EC79  F00B         	call	_adc_read
   705  0009E8  C013  F01B         	movff	?_adc_read,___lwtoft@c
   706  0009EC  C014  F01C         	movff	?_adc_read+1,___lwtoft@c+1
   707  0009F0  ECBF  F00B         	call	___lwtoft	;wreg free
   708  0009F4  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
   709  0009F8  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
   710  0009FC  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
   711  000A00  EC95  F008         	call	___ftmul	;wreg free
   712  000A04  C01E  F02D         	movff	?___ftmul,___ftdiv@f1
   713  000A08  C01F  F02E         	movff	?___ftmul+1,___ftdiv@f1+1
   714  000A0C  C020  F02F         	movff	?___ftmul+2,___ftdiv@f1+2
   715  000A10  0EC0               	movlw	192
   716  000A12  6E30               	movwf	___ftdiv@f2,c
   717  000A14  0E7F               	movlw	127
   718  000A16  6E31               	movwf	___ftdiv@f2+1,c
   719  000A18  0E44               	movlw	68
   720  000A1A  6E32               	movwf	___ftdiv@f2+2,c
   721  000A1C  EC0F  F009         	call	___ftdiv	;wreg free
   722  000A20  C02D  F049         	movff	?___ftdiv,main@valor
   723  000A24  C02E  F04A         	movff	?___ftdiv+1,main@valor+1
   724  000A28  C02F  F04B         	movff	?___ftdiv+2,main@valor+2
   725                           
   726                           ;main.c: 100: gotoLcd(0xC0);
   727  000A2C  0EC0               	movlw	192
   728  000A2E  ECE5  F00B         	call	_gotoLcd
   729                           
   730                           ;main.c: 101: writeStringLcd("Sinal Is ");
   731  000A32  0E26               	movlw	low STR_5
   732  000A34  6E15               	movwf	writeStringLcd@s,c
   733  000A36  0E08               	movlw	high STR_5
   734  000A38  6E16               	movwf	writeStringLcd@s+1,c
   735  000A3A  EC93  F00B         	call	_writeStringLcd	;wreg free
   736                           
   737                           ;main.c: 102: writeValueLcd(valor);
   738  000A3E  C049  F03C         	movff	main@valor,writeValueLcd@val
   739  000A42  C04A  F03D         	movff	main@valor+1,writeValueLcd@val+1
   740  000A46  C04B  F03E         	movff	main@valor+2,writeValueLcd@val+2
   741  000A4A  EC71  F006         	call	_writeValueLcd	;wreg free
   742                           
   743                           ;main.c: 103: writeStringLcd("V");
   744  000A4E  0E53               	movlw	low STR_4
   745  000A50  6E15               	movwf	writeStringLcd@s,c
   746  000A52  0E08               	movlw	high STR_4
   747  000A54  6E16               	movwf	writeStringLcd@s+1,c
   748  000A56  EC93  F00B         	call	_writeStringLcd	;wreg free
   749                           
   750                           ;main.c: 104: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   751  000A5A  0E15               	movlw	21
   752  000A5C  6E48               	movwf	(??_main+1)& (0+255),c
   753  000A5E  0E4B               	movlw	75
   754  000A60  6E47               	movwf	??_main& (0+255),c
   755  000A62  0EBE               	movlw	190
   756  000A64                     u1157:
   757  000A64  2EE8               	decfsz	wreg,f,c
   758  000A66  D7FE               	bra	u1157
   759  000A68  2E47               	decfsz	??_main& (0+255),f,c
   760  000A6A  D7FC               	bra	u1157
   761  000A6C  2E48               	decfsz	(??_main+1)& (0+255),f,c
   762  000A6E  D7FA               	bra	u1157
   763  000A70  D000               	nop2	
   764                           
   765                           ;main.c: 106: valor = ((float) (adc_read(2))*5) / 1023;
   766  000A72  0E00               	movlw	0
   767  000A74  6E21               	movwf	___ftmul@f2,c
   768  000A76  0EA0               	movlw	160
   769  000A78  6E22               	movwf	___ftmul@f2+1,c
   770  000A7A  0E40               	movlw	64
   771  000A7C  6E23               	movwf	___ftmul@f2+2,c
   772  000A7E  0E02               	movlw	2
   773  000A80  EC79  F00B         	call	_adc_read
   774  000A84  C013  F01B         	movff	?_adc_read,___lwtoft@c
   775  000A88  C014  F01C         	movff	?_adc_read+1,___lwtoft@c+1
   776  000A8C  ECBF  F00B         	call	___lwtoft	;wreg free
   777  000A90  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
   778  000A94  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
   779  000A98  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
   780  000A9C  EC95  F008         	call	___ftmul	;wreg free
   781  000AA0  C01E  F02D         	movff	?___ftmul,___ftdiv@f1
   782  000AA4  C01F  F02E         	movff	?___ftmul+1,___ftdiv@f1+1
   783  000AA8  C020  F02F         	movff	?___ftmul+2,___ftdiv@f1+2
   784  000AAC  0EC0               	movlw	192
   785  000AAE  6E30               	movwf	___ftdiv@f2,c
   786  000AB0  0E7F               	movlw	127
   787  000AB2  6E31               	movwf	___ftdiv@f2+1,c
   788  000AB4  0E44               	movlw	68
   789  000AB6  6E32               	movwf	___ftdiv@f2+2,c
   790  000AB8  EC0F  F009         	call	___ftdiv	;wreg free
   791  000ABC  C02D  F049         	movff	?___ftdiv,main@valor
   792  000AC0  C02E  F04A         	movff	?___ftdiv+1,main@valor+1
   793  000AC4  C02F  F04B         	movff	?___ftdiv+2,main@valor+2
   794                           
   795                           ;main.c: 107: gotoLcd(0xC0);
   796  000AC8  0EC0               	movlw	192
   797  000ACA  ECE5  F00B         	call	_gotoLcd
   798                           
   799                           ;main.c: 108: writeStringLcd("Sinal It ");
   800  000ACE  0E3A               	movlw	low STR_7
   801  000AD0  6E15               	movwf	writeStringLcd@s,c
   802  000AD2  0E08               	movlw	high STR_7
   803  000AD4  6E16               	movwf	writeStringLcd@s+1,c
   804  000AD6  EC93  F00B         	call	_writeStringLcd	;wreg free
   805                           
   806                           ;main.c: 109: writeValueLcd(valor);
   807  000ADA  C049  F03C         	movff	main@valor,writeValueLcd@val
   808  000ADE  C04A  F03D         	movff	main@valor+1,writeValueLcd@val+1
   809  000AE2  C04B  F03E         	movff	main@valor+2,writeValueLcd@val+2
   810  000AE6  EC71  F006         	call	_writeValueLcd	;wreg free
   811                           
   812                           ;main.c: 110: writeStringLcd("V");
   813  000AEA  0E53               	movlw	low STR_4
   814  000AEC  6E15               	movwf	writeStringLcd@s,c
   815  000AEE  0E08               	movlw	high STR_4
   816  000AF0  6E16               	movwf	writeStringLcd@s+1,c
   817  000AF2  EC93  F00B         	call	_writeStringLcd	;wreg free
   818                           
   819                           ;main.c: 111: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   820  000AF6  0E15               	movlw	21
   821  000AF8  6E48               	movwf	(??_main+1)& (0+255),c
   822  000AFA  0E4B               	movlw	75
   823  000AFC  6E47               	movwf	??_main& (0+255),c
   824  000AFE  0EBE               	movlw	190
   825  000B00                     u1167:
   826  000B00  2EE8               	decfsz	wreg,f,c
   827  000B02  D7FE               	bra	u1167
   828  000B04  2E47               	decfsz	??_main& (0+255),f,c
   829  000B06  D7FC               	bra	u1167
   830  000B08  2E48               	decfsz	(??_main+1)& (0+255),f,c
   831  000B0A  D7FA               	bra	u1167
   832  000B0C  D000               	nop2	
   833                           
   834                           ;main.c: 112: valor = ((float) (adc_read(3))*5) / 1023;
   835  000B0E  0E00               	movlw	0
   836  000B10  6E21               	movwf	___ftmul@f2,c
   837  000B12  0EA0               	movlw	160
   838  000B14  6E22               	movwf	___ftmul@f2+1,c
   839  000B16  0E40               	movlw	64
   840  000B18  6E23               	movwf	___ftmul@f2+2,c
   841  000B1A  0E03               	movlw	3
   842  000B1C  EC79  F00B         	call	_adc_read
   843  000B20  C013  F01B         	movff	?_adc_read,___lwtoft@c
   844  000B24  C014  F01C         	movff	?_adc_read+1,___lwtoft@c+1
   845  000B28  ECBF  F00B         	call	___lwtoft	;wreg free
   846  000B2C  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
   847  000B30  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
   848  000B34  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
   849  000B38  EC95  F008         	call	___ftmul	;wreg free
   850  000B3C  C01E  F02D         	movff	?___ftmul,___ftdiv@f1
   851  000B40  C01F  F02E         	movff	?___ftmul+1,___ftdiv@f1+1
   852  000B44  C020  F02F         	movff	?___ftmul+2,___ftdiv@f1+2
   853  000B48  0EC0               	movlw	192
   854  000B4A  6E30               	movwf	___ftdiv@f2,c
   855  000B4C  0E7F               	movlw	127
   856  000B4E  6E31               	movwf	___ftdiv@f2+1,c
   857  000B50  0E44               	movlw	68
   858  000B52  6E32               	movwf	___ftdiv@f2+2,c
   859  000B54  EC0F  F009         	call	___ftdiv	;wreg free
   860  000B58  C02D  F049         	movff	?___ftdiv,main@valor
   861  000B5C  C02E  F04A         	movff	?___ftdiv+1,main@valor+1
   862  000B60  C02F  F04B         	movff	?___ftdiv+2,main@valor+2
   863                           
   864                           ;main.c: 113: gotoLcd(0xC0);
   865  000B64  0EC0               	movlw	192
   866  000B66  ECE5  F00B         	call	_gotoLcd
   867                           
   868                           ;main.c: 114: writeStringLcd("Sinal Vr ");
   869  000B6A  0E1C               	movlw	low STR_9
   870  000B6C  6E15               	movwf	writeStringLcd@s,c
   871  000B6E  0E08               	movlw	high STR_9
   872  000B70  6E16               	movwf	writeStringLcd@s+1,c
   873  000B72  EC93  F00B         	call	_writeStringLcd	;wreg free
   874                           
   875                           ;main.c: 115: writeValueLcd(valor);
   876  000B76  C049  F03C         	movff	main@valor,writeValueLcd@val
   877  000B7A  C04A  F03D         	movff	main@valor+1,writeValueLcd@val+1
   878  000B7E  C04B  F03E         	movff	main@valor+2,writeValueLcd@val+2
   879  000B82  EC71  F006         	call	_writeValueLcd	;wreg free
   880                           
   881                           ;main.c: 116: writeStringLcd("V");
   882  000B86  0E53               	movlw	low STR_4
   883  000B88  6E15               	movwf	writeStringLcd@s,c
   884  000B8A  0E08               	movlw	high STR_4
   885  000B8C  6E16               	movwf	writeStringLcd@s+1,c
   886  000B8E  EC93  F00B         	call	_writeStringLcd	;wreg free
   887                           
   888                           ;main.c: 117: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   889  000B92  0E15               	movlw	21
   890  000B94  6E48               	movwf	(??_main+1)& (0+255),c
   891  000B96  0E4B               	movlw	75
   892  000B98  6E47               	movwf	??_main& (0+255),c
   893  000B9A  0EBE               	movlw	190
   894  000B9C                     u1177:
   895  000B9C  2EE8               	decfsz	wreg,f,c
   896  000B9E  D7FE               	bra	u1177
   897  000BA0  2E47               	decfsz	??_main& (0+255),f,c
   898  000BA2  D7FC               	bra	u1177
   899  000BA4  2E48               	decfsz	(??_main+1)& (0+255),f,c
   900  000BA6  D7FA               	bra	u1177
   901  000BA8  D000               	nop2	
   902                           
   903                           ;main.c: 119: valor = ((float) (adc_read(4))*5) / 1023;
   904  000BAA  0E00               	movlw	0
   905  000BAC  6E21               	movwf	___ftmul@f2,c
   906  000BAE  0EA0               	movlw	160
   907  000BB0  6E22               	movwf	___ftmul@f2+1,c
   908  000BB2  0E40               	movlw	64
   909  000BB4  6E23               	movwf	___ftmul@f2+2,c
   910  000BB6  0E04               	movlw	4
   911  000BB8  EC79  F00B         	call	_adc_read
   912  000BBC  C013  F01B         	movff	?_adc_read,___lwtoft@c
   913  000BC0  C014  F01C         	movff	?_adc_read+1,___lwtoft@c+1
   914  000BC4  ECBF  F00B         	call	___lwtoft	;wreg free
   915  000BC8  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
   916  000BCC  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
   917  000BD0  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
   918  000BD4  EC95  F008         	call	___ftmul	;wreg free
   919  000BD8  C01E  F02D         	movff	?___ftmul,___ftdiv@f1
   920  000BDC  C01F  F02E         	movff	?___ftmul+1,___ftdiv@f1+1
   921  000BE0  C020  F02F         	movff	?___ftmul+2,___ftdiv@f1+2
   922  000BE4  0EC0               	movlw	192
   923  000BE6  6E30               	movwf	___ftdiv@f2,c
   924  000BE8  0E7F               	movlw	127
   925  000BEA  6E31               	movwf	___ftdiv@f2+1,c
   926  000BEC  0E44               	movlw	68
   927  000BEE  6E32               	movwf	___ftdiv@f2+2,c
   928  000BF0  EC0F  F009         	call	___ftdiv	;wreg free
   929  000BF4  C02D  F049         	movff	?___ftdiv,main@valor
   930  000BF8  C02E  F04A         	movff	?___ftdiv+1,main@valor+1
   931  000BFC  C02F  F04B         	movff	?___ftdiv+2,main@valor+2
   932                           
   933                           ;main.c: 120: gotoLcd(0xC0);
   934  000C00  0EC0               	movlw	192
   935  000C02  ECE5  F00B         	call	_gotoLcd
   936                           
   937                           ;main.c: 121: writeStringLcd("Sinal Vs ");
   938  000C06  0E30               	movlw	low STR_11
   939  000C08  6E15               	movwf	writeStringLcd@s,c
   940  000C0A  0E08               	movlw	high STR_11
   941  000C0C  6E16               	movwf	writeStringLcd@s+1,c
   942  000C0E  EC93  F00B         	call	_writeStringLcd	;wreg free
   943                           
   944                           ;main.c: 122: writeValueLcd(valor);
   945  000C12  C049  F03C         	movff	main@valor,writeValueLcd@val
   946  000C16  C04A  F03D         	movff	main@valor+1,writeValueLcd@val+1
   947  000C1A  C04B  F03E         	movff	main@valor+2,writeValueLcd@val+2
   948  000C1E  EC71  F006         	call	_writeValueLcd	;wreg free
   949                           
   950                           ;main.c: 123: writeStringLcd("V");
   951  000C22  0E53               	movlw	low STR_4
   952  000C24  6E15               	movwf	writeStringLcd@s,c
   953  000C26  0E08               	movlw	high STR_4
   954  000C28  6E16               	movwf	writeStringLcd@s+1,c
   955  000C2A  EC93  F00B         	call	_writeStringLcd	;wreg free
   956                           
   957                           ;main.c: 124: _delay((unsigned long)((1000)*((16000000)/4000.0)));
   958  000C2E  0E15               	movlw	21
   959  000C30  6E48               	movwf	(??_main+1)& (0+255),c
   960  000C32  0E4B               	movlw	75
   961  000C34  6E47               	movwf	??_main& (0+255),c
   962  000C36  0EBE               	movlw	190
   963  000C38                     u1187:
   964  000C38  2EE8               	decfsz	wreg,f,c
   965  000C3A  D7FE               	bra	u1187
   966  000C3C  2E47               	decfsz	??_main& (0+255),f,c
   967  000C3E  D7FC               	bra	u1187
   968  000C40  2E48               	decfsz	(??_main+1)& (0+255),f,c
   969  000C42  D7FA               	bra	u1187
   970  000C44  D000               	nop2	
   971                           
   972                           ;main.c: 126: valor = ((float) (adc_read(5))*5) / 1023;
   973  000C46  0E00               	movlw	0
   974  000C48  6E21               	movwf	___ftmul@f2,c
   975  000C4A  0EA0               	movlw	160
   976  000C4C  6E22               	movwf	___ftmul@f2+1,c
   977  000C4E  0E40               	movlw	64
   978  000C50  6E23               	movwf	___ftmul@f2+2,c
   979  000C52  0E05               	movlw	5
   980  000C54  EC79  F00B         	call	_adc_read
   981  000C58  C013  F01B         	movff	?_adc_read,___lwtoft@c
   982  000C5C  C014  F01C         	movff	?_adc_read+1,___lwtoft@c+1
   983  000C60  ECBF  F00B         	call	___lwtoft	;wreg free
   984  000C64  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
   985  000C68  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
   986  000C6C  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
   987  000C70  EC95  F008         	call	___ftmul	;wreg free
   988  000C74  C01E  F02D         	movff	?___ftmul,___ftdiv@f1
   989  000C78  C01F  F02E         	movff	?___ftmul+1,___ftdiv@f1+1
   990  000C7C  C020  F02F         	movff	?___ftmul+2,___ftdiv@f1+2
   991  000C80  0EC0               	movlw	192
   992  000C82  6E30               	movwf	___ftdiv@f2,c
   993  000C84  0E7F               	movlw	127
   994  000C86  6E31               	movwf	___ftdiv@f2+1,c
   995  000C88  0E44               	movlw	68
   996  000C8A  6E32               	movwf	___ftdiv@f2+2,c
   997  000C8C  EC0F  F009         	call	___ftdiv	;wreg free
   998  000C90  C02D  F049         	movff	?___ftdiv,main@valor
   999  000C94  C02E  F04A         	movff	?___ftdiv+1,main@valor+1
  1000  000C98  C02F  F04B         	movff	?___ftdiv+2,main@valor+2
  1001                           
  1002                           ;main.c: 127: gotoLcd(0xC0);
  1003  000C9C  0EC0               	movlw	192
  1004  000C9E  ECE5  F00B         	call	_gotoLcd
  1005                           
  1006                           ;main.c: 128: writeStringLcd("Sinal Vt ");
  1007  000CA2  0E44               	movlw	low STR_13
  1008  000CA4  6E15               	movwf	writeStringLcd@s,c
  1009  000CA6  0E08               	movlw	high STR_13
  1010  000CA8  6E16               	movwf	writeStringLcd@s+1,c
  1011  000CAA  EC93  F00B         	call	_writeStringLcd	;wreg free
  1012                           
  1013                           ;main.c: 129: writeValueLcd(valor);
  1014  000CAE  C049  F03C         	movff	main@valor,writeValueLcd@val
  1015  000CB2  C04A  F03D         	movff	main@valor+1,writeValueLcd@val+1
  1016  000CB6  C04B  F03E         	movff	main@valor+2,writeValueLcd@val+2
  1017  000CBA  EC71  F006         	call	_writeValueLcd	;wreg free
  1018                           
  1019                           ;main.c: 130: writeStringLcd("V");
  1020  000CBE  0E53               	movlw	low STR_4
  1021  000CC0  6E15               	movwf	writeStringLcd@s,c
  1022  000CC2  0E08               	movlw	high STR_4
  1023  000CC4  6E16               	movwf	writeStringLcd@s+1,c
  1024  000CC6  EC93  F00B         	call	_writeStringLcd	;wreg free
  1025                           
  1026                           ;main.c: 131: _delay((unsigned long)((1000)*((16000000)/4000.0)));
  1027  000CCA  0E15               	movlw	21
  1028  000CCC  6E48               	movwf	(??_main+1)& (0+255),c
  1029  000CCE  0E4B               	movlw	75
  1030  000CD0  6E47               	movwf	??_main& (0+255),c
  1031  000CD2  0EBE               	movlw	190
  1032  000CD4                     u1197:
  1033  000CD4  2EE8               	decfsz	wreg,f,c
  1034  000CD6  D7FE               	bra	u1197
  1035  000CD8  2E47               	decfsz	??_main& (0+255),f,c
  1036  000CDA  D7FC               	bra	u1197
  1037  000CDC  2E48               	decfsz	(??_main+1)& (0+255),f,c
  1038  000CDE  D7FA               	bra	u1197
  1039  000CE0  D622               	goto	L1
  1040  000CE2                     __end_of_main:
  1041                           	opt stack 0
  1042                           tblptru	equ	0xFF8
  1043                           wreg	equ	0xFE8
  1044                           
  1045 ;; *************** function _writeValueLcd *****************
  1046 ;; Defined at:
  1047 ;;		line 53 in file "lcd.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;  val             3   59[COMRAM] float 
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;  x               4   66[COMRAM] long 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, status,2, status,0, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1061 ;;      Params:         3       0       0       0       0       0       0       0       0
  1062 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1063 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1064 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1065 ;;Total ram usage:       11 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; Hardware stack levels required when called:    4
  1068 ;; This function calls:
  1069 ;;		___aldiv
  1070 ;;		___almod
  1071 ;;		___ftmul
  1072 ;;		___fttol
  1073 ;;		___lmul
  1074 ;;		_writeLcd
  1075 ;; This function is called by:
  1076 ;;		_main
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text1
  1081  000CE2                     __ptext1:
  1082                           	opt stack 0
  1083  000CE2                     _writeValueLcd:
  1084                           	opt stack 26
  1085                           
  1086                           ;lcd.c: 54: LATBbits.LATB4 = 1;
  1087                           
  1088                           ;incstack = 0
  1089  000CE2  888A               	bsf	3978,4,c	;volatile
  1090                           
  1091                           ;lcd.c: 55: long x = val*100;
  1092  000CE4  0E00               	movlw	0
  1093  000CE6  6E21               	movwf	___ftmul@f2,c
  1094  000CE8  0EC8               	movlw	200
  1095  000CEA  6E22               	movwf	___ftmul@f2+1,c
  1096  000CEC  0E42               	movlw	66
  1097  000CEE  6E23               	movwf	___ftmul@f2+2,c
  1098  000CF0  C03C  F01E         	movff	writeValueLcd@val,___ftmul@f1
  1099  000CF4  C03D  F01F         	movff	writeValueLcd@val+1,___ftmul@f1+1
  1100  000CF8  C03E  F020         	movff	writeValueLcd@val+2,___ftmul@f1+2
  1101  000CFC  EC95  F008         	call	___ftmul	;wreg free
  1102  000D00  C01E  F02D         	movff	?___ftmul,___fttol@f1
  1103  000D04  C01F  F02E         	movff	?___ftmul+1,___fttol@f1+1
  1104  000D08  C020  F02F         	movff	?___ftmul+2,___fttol@f1+2
  1105  000D0C  EC1B  F008         	call	___fttol	;wreg free
  1106  000D10  C02D  F043         	movff	?___fttol,writeValueLcd@x
  1107  000D14  C02E  F044         	movff	?___fttol+1,writeValueLcd@x+1
  1108  000D18  C02F  F045         	movff	?___fttol+2,writeValueLcd@x+2
  1109  000D1C  C030  F046         	movff	?___fttol+3,writeValueLcd@x+3
  1110                           
  1111                           ;lcd.c: 56: if(val<0.0) { x *= -1; writeLcd('-');}
  1112  000D20  AE3E               	btfss	writeValueLcd@val+2,7,c
  1113  000D22  D01D               	goto	l137
  1114  000D24  C043  F013         	movff	writeValueLcd@x,___lmul@multiplier
  1115  000D28  C044  F014         	movff	writeValueLcd@x+1,___lmul@multiplier+1
  1116  000D2C  C045  F015         	movff	writeValueLcd@x+2,___lmul@multiplier+2
  1117  000D30  C046  F016         	movff	writeValueLcd@x+3,___lmul@multiplier+3
  1118  000D34  0EFF               	movlw	255
  1119  000D36  6E17               	movwf	___lmul@multiplicand,c
  1120  000D38  0EFF               	movlw	255
  1121  000D3A  6E18               	movwf	___lmul@multiplicand+1,c
  1122  000D3C  0EFF               	movlw	255
  1123  000D3E  6E19               	movwf	___lmul@multiplicand+2,c
  1124  000D40  0EFF               	movlw	255
  1125  000D42  6E1A               	movwf	___lmul@multiplicand+3,c
  1126  000D44  EC29  F00B         	call	___lmul	;wreg free
  1127  000D48  C013  F043         	movff	?___lmul,writeValueLcd@x
  1128  000D4C  C014  F044         	movff	?___lmul+1,writeValueLcd@x+1
  1129  000D50  C015  F045         	movff	?___lmul+2,writeValueLcd@x+2
  1130  000D54  C016  F046         	movff	?___lmul+3,writeValueLcd@x+3
  1131  000D58  0E2D               	movlw	45
  1132  000D5A  EC54  F00B         	call	_writeLcd
  1133  000D5E                     l137:
  1134                           
  1135                           ;lcd.c: 57: if(x > 1000) {
  1136  000D5E  BE46               	btfsc	writeValueLcd@x+3,7,c
  1137  000D60  D0B2               	goto	l138
  1138  000D62  5046               	movf	writeValueLcd@x+3,w,c
  1139  000D64  1045               	iorwf	writeValueLcd@x+2,w,c
  1140  000D66  E106               	bnz	u980
  1141  000D68  0EE9               	movlw	233
  1142  000D6A  5C43               	subwf	writeValueLcd@x,w,c
  1143  000D6C  0E03               	movlw	3
  1144  000D6E  5844               	subwfb	writeValueLcd@x+1,w,c
  1145  000D70  A0D8               	btfss	status,0,c
  1146  000D72  D0A9               	goto	l138
  1147  000D74                     u980:
  1148                           
  1149                           ;lcd.c: 58: if(x > 10000) writeLcd(((x%100000-x%10000)/10000)+48);
  1150  000D74  BE46               	btfsc	writeValueLcd@x+3,7,c
  1151  000D76  D058               	goto	l139
  1152  000D78  5046               	movf	writeValueLcd@x+3,w,c
  1153  000D7A  1045               	iorwf	writeValueLcd@x+2,w,c
  1154  000D7C  E106               	bnz	u990
  1155  000D7E  0E11               	movlw	17
  1156  000D80  5C43               	subwf	writeValueLcd@x,w,c
  1157  000D82  0E27               	movlw	39
  1158  000D84  5844               	subwfb	writeValueLcd@x+1,w,c
  1159  000D86  A0D8               	btfss	status,0,c
  1160  000D88  D04F               	goto	l139
  1161  000D8A                     u990:
  1162  000D8A  0EA0               	movlw	160
  1163  000D8C  6E17               	movwf	___almod@divisor,c
  1164  000D8E  0E86               	movlw	134
  1165  000D90  6E18               	movwf	___almod@divisor+1,c
  1166  000D92  0E01               	movlw	1
  1167  000D94  6E19               	movwf	___almod@divisor+2,c
  1168  000D96  0E00               	movlw	0
  1169  000D98  6E1A               	movwf	___almod@divisor+3,c
  1170  000D9A  C043  F013         	movff	writeValueLcd@x,___almod@dividend
  1171  000D9E  C044  F014         	movff	writeValueLcd@x+1,___almod@dividend+1
  1172  000DA2  C045  F015         	movff	writeValueLcd@x+2,___almod@dividend+2
  1173  000DA6  C046  F016         	movff	writeValueLcd@x+3,___almod@dividend+3
  1174  000DAA  EC3F  F00A         	call	___almod	;wreg free
  1175  000DAE  C013  F03F         	movff	?___almod,??_writeValueLcd
  1176  000DB2  C014  F040         	movff	?___almod+1,??_writeValueLcd+1
  1177  000DB6  C015  F041         	movff	?___almod+2,??_writeValueLcd+2
  1178  000DBA  C016  F042         	movff	?___almod+3,??_writeValueLcd+3
  1179  000DBE  0E10               	movlw	16
  1180  000DC0  6E17               	movwf	___almod@divisor,c
  1181  000DC2  0E27               	movlw	39
  1182  000DC4  6E18               	movwf	___almod@divisor+1,c
  1183  000DC6  0E00               	movlw	0
  1184  000DC8  6E19               	movwf	___almod@divisor+2,c
  1185  000DCA  0E00               	movlw	0
  1186  000DCC  6E1A               	movwf	___almod@divisor+3,c
  1187  000DCE  C043  F013         	movff	writeValueLcd@x,___almod@dividend
  1188  000DD2  C044  F014         	movff	writeValueLcd@x+1,___almod@dividend+1
  1189  000DD6  C045  F015         	movff	writeValueLcd@x+2,___almod@dividend+2
  1190  000DDA  C046  F016         	movff	writeValueLcd@x+3,___almod@dividend+3
  1191  000DDE  EC3F  F00A         	call	___almod	;wreg free
  1192  000DE2  1E13               	comf	?___almod,f,c
  1193  000DE4  1E14               	comf	?___almod+1,f,c
  1194  000DE6  1E15               	comf	?___almod+2,f,c
  1195  000DE8  1E16               	comf	?___almod+3,f,c
  1196  000DEA  2A13               	incf	?___almod,f,c
  1197  000DEC  0E00               	movlw	0
  1198  000DEE  2214               	addwfc	?___almod+1,f,c
  1199  000DF0  2215               	addwfc	?___almod+2,f,c
  1200  000DF2  2216               	addwfc	?___almod+3,f,c
  1201  000DF4  5013               	movf	?___almod,w,c
  1202  000DF6  243F               	addwf	??_writeValueLcd,w,c
  1203  000DF8  6E1D               	movwf	___aldiv@dividend,c
  1204  000DFA  5014               	movf	?___almod+1,w,c
  1205  000DFC  2040               	addwfc	??_writeValueLcd+1,w,c
  1206  000DFE  6E1E               	movwf	___aldiv@dividend+1,c
  1207  000E00  5015               	movf	?___almod+2,w,c
  1208  000E02  2041               	addwfc	??_writeValueLcd+2,w,c
  1209  000E04  6E1F               	movwf	___aldiv@dividend+2,c
  1210  000E06  5016               	movf	?___almod+3,w,c
  1211  000E08  2042               	addwfc	??_writeValueLcd+3,w,c
  1212  000E0A  6E20               	movwf	___aldiv@dividend+3,c
  1213  000E0C  0E10               	movlw	16
  1214  000E0E  6E21               	movwf	___aldiv@divisor,c
  1215  000E10  0E27               	movlw	39
  1216  000E12  6E22               	movwf	___aldiv@divisor+1,c
  1217  000E14  0E00               	movlw	0
  1218  000E16  6E23               	movwf	___aldiv@divisor+2,c
  1219  000E18  0E00               	movlw	0
  1220  000E1A  6E24               	movwf	___aldiv@divisor+3,c
  1221  000E1C  EC82  F009         	call	___aldiv	;wreg free
  1222  000E20  501D               	movf	?___aldiv,w,c
  1223  000E22  0F30               	addlw	48
  1224  000E24  EC54  F00B         	call	_writeLcd
  1225  000E28                     l139:
  1226                           
  1227                           ;lcd.c: 59: writeLcd(((x%10000-x%1000)/1000)+48);
  1228  000E28  0E10               	movlw	16
  1229  000E2A  6E17               	movwf	___almod@divisor,c
  1230  000E2C  0E27               	movlw	39
  1231  000E2E  6E18               	movwf	___almod@divisor+1,c
  1232  000E30  0E00               	movlw	0
  1233  000E32  6E19               	movwf	___almod@divisor+2,c
  1234  000E34  0E00               	movlw	0
  1235  000E36  6E1A               	movwf	___almod@divisor+3,c
  1236  000E38  C043  F013         	movff	writeValueLcd@x,___almod@dividend
  1237  000E3C  C044  F014         	movff	writeValueLcd@x+1,___almod@dividend+1
  1238  000E40  C045  F015         	movff	writeValueLcd@x+2,___almod@dividend+2
  1239  000E44  C046  F016         	movff	writeValueLcd@x+3,___almod@dividend+3
  1240  000E48  EC3F  F00A         	call	___almod	;wreg free
  1241  000E4C  C013  F03F         	movff	?___almod,??_writeValueLcd
  1242  000E50  C014  F040         	movff	?___almod+1,??_writeValueLcd+1
  1243  000E54  C015  F041         	movff	?___almod+2,??_writeValueLcd+2
  1244  000E58  C016  F042         	movff	?___almod+3,??_writeValueLcd+3
  1245  000E5C  0EE8               	movlw	232
  1246  000E5E  6E17               	movwf	___almod@divisor,c
  1247  000E60  0E03               	movlw	3
  1248  000E62  6E18               	movwf	___almod@divisor+1,c
  1249  000E64  0E00               	movlw	0
  1250  000E66  6E19               	movwf	___almod@divisor+2,c
  1251  000E68  0E00               	movlw	0
  1252  000E6A  6E1A               	movwf	___almod@divisor+3,c
  1253  000E6C  C043  F013         	movff	writeValueLcd@x,___almod@dividend
  1254  000E70  C044  F014         	movff	writeValueLcd@x+1,___almod@dividend+1
  1255  000E74  C045  F015         	movff	writeValueLcd@x+2,___almod@dividend+2
  1256  000E78  C046  F016         	movff	writeValueLcd@x+3,___almod@dividend+3
  1257  000E7C  EC3F  F00A         	call	___almod	;wreg free
  1258  000E80  1E13               	comf	?___almod,f,c
  1259  000E82  1E14               	comf	?___almod+1,f,c
  1260  000E84  1E15               	comf	?___almod+2,f,c
  1261  000E86  1E16               	comf	?___almod+3,f,c
  1262  000E88  2A13               	incf	?___almod,f,c
  1263  000E8A  0E00               	movlw	0
  1264  000E8C  2214               	addwfc	?___almod+1,f,c
  1265  000E8E  2215               	addwfc	?___almod+2,f,c
  1266  000E90  2216               	addwfc	?___almod+3,f,c
  1267  000E92  5013               	movf	?___almod,w,c
  1268  000E94  243F               	addwf	??_writeValueLcd,w,c
  1269  000E96  6E1D               	movwf	___aldiv@dividend,c
  1270  000E98  5014               	movf	?___almod+1,w,c
  1271  000E9A  2040               	addwfc	??_writeValueLcd+1,w,c
  1272  000E9C  6E1E               	movwf	___aldiv@dividend+1,c
  1273  000E9E  5015               	movf	?___almod+2,w,c
  1274  000EA0  2041               	addwfc	??_writeValueLcd+2,w,c
  1275  000EA2  6E1F               	movwf	___aldiv@dividend+2,c
  1276  000EA4  5016               	movf	?___almod+3,w,c
  1277  000EA6  2042               	addwfc	??_writeValueLcd+3,w,c
  1278  000EA8  6E20               	movwf	___aldiv@dividend+3,c
  1279  000EAA  0EE8               	movlw	232
  1280  000EAC  6E21               	movwf	___aldiv@divisor,c
  1281  000EAE  0E03               	movlw	3
  1282  000EB0  6E22               	movwf	___aldiv@divisor+1,c
  1283  000EB2  0E00               	movlw	0
  1284  000EB4  6E23               	movwf	___aldiv@divisor+2,c
  1285  000EB6  0E00               	movlw	0
  1286  000EB8  6E24               	movwf	___aldiv@divisor+3,c
  1287  000EBA  EC82  F009         	call	___aldiv	;wreg free
  1288  000EBE  501D               	movf	?___aldiv,w,c
  1289  000EC0  0F30               	addlw	48
  1290  000EC2  EC54  F00B         	call	_writeLcd
  1291  000EC6                     l138:
  1292                           
  1293                           ;lcd.c: 60: }
  1294                           ;lcd.c: 61: writeLcd(((x%1000-x%100)/100)+48);
  1295  000EC6  0EE8               	movlw	232
  1296  000EC8  6E17               	movwf	___almod@divisor,c
  1297  000ECA  0E03               	movlw	3
  1298  000ECC  6E18               	movwf	___almod@divisor+1,c
  1299  000ECE  0E00               	movlw	0
  1300  000ED0  6E19               	movwf	___almod@divisor+2,c
  1301  000ED2  0E00               	movlw	0
  1302  000ED4  6E1A               	movwf	___almod@divisor+3,c
  1303  000ED6  C043  F013         	movff	writeValueLcd@x,___almod@dividend
  1304  000EDA  C044  F014         	movff	writeValueLcd@x+1,___almod@dividend+1
  1305  000EDE  C045  F015         	movff	writeValueLcd@x+2,___almod@dividend+2
  1306  000EE2  C046  F016         	movff	writeValueLcd@x+3,___almod@dividend+3
  1307  000EE6  EC3F  F00A         	call	___almod	;wreg free
  1308  000EEA  C013  F03F         	movff	?___almod,??_writeValueLcd
  1309  000EEE  C014  F040         	movff	?___almod+1,??_writeValueLcd+1
  1310  000EF2  C015  F041         	movff	?___almod+2,??_writeValueLcd+2
  1311  000EF6  C016  F042         	movff	?___almod+3,??_writeValueLcd+3
  1312  000EFA  0E64               	movlw	100
  1313  000EFC  6E17               	movwf	___almod@divisor,c
  1314  000EFE  0E00               	movlw	0
  1315  000F00  6E18               	movwf	___almod@divisor+1,c
  1316  000F02  0E00               	movlw	0
  1317  000F04  6E19               	movwf	___almod@divisor+2,c
  1318  000F06  0E00               	movlw	0
  1319  000F08  6E1A               	movwf	___almod@divisor+3,c
  1320  000F0A  C043  F013         	movff	writeValueLcd@x,___almod@dividend
  1321  000F0E  C044  F014         	movff	writeValueLcd@x+1,___almod@dividend+1
  1322  000F12  C045  F015         	movff	writeValueLcd@x+2,___almod@dividend+2
  1323  000F16  C046  F016         	movff	writeValueLcd@x+3,___almod@dividend+3
  1324  000F1A  EC3F  F00A         	call	___almod	;wreg free
  1325  000F1E  1E13               	comf	?___almod,f,c
  1326  000F20  1E14               	comf	?___almod+1,f,c
  1327  000F22  1E15               	comf	?___almod+2,f,c
  1328  000F24  1E16               	comf	?___almod+3,f,c
  1329  000F26  2A13               	incf	?___almod,f,c
  1330  000F28  0E00               	movlw	0
  1331  000F2A  2214               	addwfc	?___almod+1,f,c
  1332  000F2C  2215               	addwfc	?___almod+2,f,c
  1333  000F2E  2216               	addwfc	?___almod+3,f,c
  1334  000F30  5013               	movf	?___almod,w,c
  1335  000F32  243F               	addwf	??_writeValueLcd,w,c
  1336  000F34  6E1D               	movwf	___aldiv@dividend,c
  1337  000F36  5014               	movf	?___almod+1,w,c
  1338  000F38  2040               	addwfc	??_writeValueLcd+1,w,c
  1339  000F3A  6E1E               	movwf	___aldiv@dividend+1,c
  1340  000F3C  5015               	movf	?___almod+2,w,c
  1341  000F3E  2041               	addwfc	??_writeValueLcd+2,w,c
  1342  000F40  6E1F               	movwf	___aldiv@dividend+2,c
  1343  000F42  5016               	movf	?___almod+3,w,c
  1344  000F44  2042               	addwfc	??_writeValueLcd+3,w,c
  1345  000F46  6E20               	movwf	___aldiv@dividend+3,c
  1346  000F48  0E64               	movlw	100
  1347  000F4A  6E21               	movwf	___aldiv@divisor,c
  1348  000F4C  0E00               	movlw	0
  1349  000F4E  6E22               	movwf	___aldiv@divisor+1,c
  1350  000F50  0E00               	movlw	0
  1351  000F52  6E23               	movwf	___aldiv@divisor+2,c
  1352  000F54  0E00               	movlw	0
  1353  000F56  6E24               	movwf	___aldiv@divisor+3,c
  1354  000F58  EC82  F009         	call	___aldiv	;wreg free
  1355  000F5C  501D               	movf	?___aldiv,w,c
  1356  000F5E  0F30               	addlw	48
  1357  000F60  EC54  F00B         	call	_writeLcd
  1358                           
  1359                           ;lcd.c: 62: writeLcd('.');
  1360  000F64  0E2E               	movlw	46
  1361  000F66  EC54  F00B         	call	_writeLcd
  1362                           
  1363                           ;lcd.c: 63: writeLcd(((x%100-x%10)/10)+48);
  1364  000F6A  0E64               	movlw	100
  1365  000F6C  6E17               	movwf	___almod@divisor,c
  1366  000F6E  0E00               	movlw	0
  1367  000F70  6E18               	movwf	___almod@divisor+1,c
  1368  000F72  0E00               	movlw	0
  1369  000F74  6E19               	movwf	___almod@divisor+2,c
  1370  000F76  0E00               	movlw	0
  1371  000F78  6E1A               	movwf	___almod@divisor+3,c
  1372  000F7A  C043  F013         	movff	writeValueLcd@x,___almod@dividend
  1373  000F7E  C044  F014         	movff	writeValueLcd@x+1,___almod@dividend+1
  1374  000F82  C045  F015         	movff	writeValueLcd@x+2,___almod@dividend+2
  1375  000F86  C046  F016         	movff	writeValueLcd@x+3,___almod@dividend+3
  1376  000F8A  EC3F  F00A         	call	___almod	;wreg free
  1377  000F8E  C013  F03F         	movff	?___almod,??_writeValueLcd
  1378  000F92  C014  F040         	movff	?___almod+1,??_writeValueLcd+1
  1379  000F96  C015  F041         	movff	?___almod+2,??_writeValueLcd+2
  1380  000F9A  C016  F042         	movff	?___almod+3,??_writeValueLcd+3
  1381  000F9E  0E0A               	movlw	10
  1382  000FA0  6E17               	movwf	___almod@divisor,c
  1383  000FA2  0E00               	movlw	0
  1384  000FA4  6E18               	movwf	___almod@divisor+1,c
  1385  000FA6  0E00               	movlw	0
  1386  000FA8  6E19               	movwf	___almod@divisor+2,c
  1387  000FAA  0E00               	movlw	0
  1388  000FAC  6E1A               	movwf	___almod@divisor+3,c
  1389  000FAE  C043  F013         	movff	writeValueLcd@x,___almod@dividend
  1390  000FB2  C044  F014         	movff	writeValueLcd@x+1,___almod@dividend+1
  1391  000FB6  C045  F015         	movff	writeValueLcd@x+2,___almod@dividend+2
  1392  000FBA  C046  F016         	movff	writeValueLcd@x+3,___almod@dividend+3
  1393  000FBE  EC3F  F00A         	call	___almod	;wreg free
  1394  000FC2  1E13               	comf	?___almod,f,c
  1395  000FC4  1E14               	comf	?___almod+1,f,c
  1396  000FC6  1E15               	comf	?___almod+2,f,c
  1397  000FC8  1E16               	comf	?___almod+3,f,c
  1398  000FCA  2A13               	incf	?___almod,f,c
  1399  000FCC  0E00               	movlw	0
  1400  000FCE  2214               	addwfc	?___almod+1,f,c
  1401  000FD0  2215               	addwfc	?___almod+2,f,c
  1402  000FD2  2216               	addwfc	?___almod+3,f,c
  1403  000FD4  5013               	movf	?___almod,w,c
  1404  000FD6  243F               	addwf	??_writeValueLcd,w,c
  1405  000FD8  6E1D               	movwf	___aldiv@dividend,c
  1406  000FDA  5014               	movf	?___almod+1,w,c
  1407  000FDC  2040               	addwfc	??_writeValueLcd+1,w,c
  1408  000FDE  6E1E               	movwf	___aldiv@dividend+1,c
  1409  000FE0  5015               	movf	?___almod+2,w,c
  1410  000FE2  2041               	addwfc	??_writeValueLcd+2,w,c
  1411  000FE4  6E1F               	movwf	___aldiv@dividend+2,c
  1412  000FE6  5016               	movf	?___almod+3,w,c
  1413  000FE8  2042               	addwfc	??_writeValueLcd+3,w,c
  1414  000FEA  6E20               	movwf	___aldiv@dividend+3,c
  1415  000FEC  0E0A               	movlw	10
  1416  000FEE  6E21               	movwf	___aldiv@divisor,c
  1417  000FF0  0E00               	movlw	0
  1418  000FF2  6E22               	movwf	___aldiv@divisor+1,c
  1419  000FF4  0E00               	movlw	0
  1420  000FF6  6E23               	movwf	___aldiv@divisor+2,c
  1421  000FF8  0E00               	movlw	0
  1422  000FFA  6E24               	movwf	___aldiv@divisor+3,c
  1423  000FFC  EC82  F009         	call	___aldiv	;wreg free
  1424  001000  501D               	movf	?___aldiv,w,c
  1425  001002  0F30               	addlw	48
  1426  001004  EC54  F00B         	call	_writeLcd
  1427                           
  1428                           ;lcd.c: 64: writeLcd((x%10)+48);
  1429  001008  C043  F013         	movff	writeValueLcd@x,___almod@dividend
  1430  00100C  C044  F014         	movff	writeValueLcd@x+1,___almod@dividend+1
  1431  001010  C045  F015         	movff	writeValueLcd@x+2,___almod@dividend+2
  1432  001014  C046  F016         	movff	writeValueLcd@x+3,___almod@dividend+3
  1433  001018  0E0A               	movlw	10
  1434  00101A  6E17               	movwf	___almod@divisor,c
  1435  00101C  0E00               	movlw	0
  1436  00101E  6E18               	movwf	___almod@divisor+1,c
  1437  001020  0E00               	movlw	0
  1438  001022  6E19               	movwf	___almod@divisor+2,c
  1439  001024  0E00               	movlw	0
  1440  001026  6E1A               	movwf	___almod@divisor+3,c
  1441  001028  EC3F  F00A         	call	___almod	;wreg free
  1442  00102C  5013               	movf	?___almod,w,c
  1443  00102E  0F30               	addlw	48
  1444  001030  EC54  F00B         	call	_writeLcd
  1445  001034  0012               	return		;funcret
  1446  001036                     __end_of_writeValueLcd:
  1447                           	opt stack 0
  1448                           tblptru	equ	0xFF8
  1449                           wreg	equ	0xFE8
  1450                           status	equ	0xFD8
  1451                           
  1452 ;; *************** function ___lmul *****************
  1453 ;; Defined at:
  1454 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;  multiplier      4   18[COMRAM] unsigned long 
  1457 ;;  multiplicand    4   22[COMRAM] unsigned long 
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;  product         4   26[COMRAM] unsigned long 
  1460 ;; Return value:  Size  Location     Type
  1461 ;;                  4   18[COMRAM] unsigned long 
  1462 ;; Registers used:
  1463 ;;		wreg, status,2, status,0
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1469 ;;      Params:         8       0       0       0       0       0       0       0       0
  1470 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1471 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1472 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1473 ;;Total ram usage:       12 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    2
  1476 ;; This function calls:
  1477 ;;		Nothing
  1478 ;; This function is called by:
  1479 ;;		_writeValueLcd
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           	psect	text2
  1484  001652                     __ptext2:
  1485                           	opt stack 0
  1486  001652                     ___lmul:
  1487                           	opt stack 27
  1488                           
  1489                           ;incstack = 0
  1490  001652  0E00               	movlw	0
  1491  001654  6E1B               	movwf	___lmul@product,c
  1492  001656  0E00               	movlw	0
  1493  001658  6E1C               	movwf	___lmul@product+1,c
  1494  00165A  0E00               	movlw	0
  1495  00165C  6E1D               	movwf	___lmul@product+2,c
  1496  00165E  0E00               	movlw	0
  1497  001660  6E1E               	movwf	___lmul@product+3,c
  1498  001662  A013               	btfss	___lmul@multiplier,0,c
  1499  001664  D008               	goto	l169
  1500  001666  5017               	movf	___lmul@multiplicand,w,c
  1501  001668  261B               	addwf	___lmul@product,f,c
  1502  00166A  5018               	movf	___lmul@multiplicand+1,w,c
  1503  00166C  221C               	addwfc	___lmul@product+1,f,c
  1504  00166E  5019               	movf	___lmul@multiplicand+2,w,c
  1505  001670  221D               	addwfc	___lmul@product+2,f,c
  1506  001672  501A               	movf	___lmul@multiplicand+3,w,c
  1507  001674  221E               	addwfc	___lmul@product+3,f,c
  1508  001676                     l169:
  1509  001676  90D8               	bcf	status,0,c
  1510  001678  3617               	rlcf	___lmul@multiplicand,f,c
  1511  00167A  3618               	rlcf	___lmul@multiplicand+1,f,c
  1512  00167C  3619               	rlcf	___lmul@multiplicand+2,f,c
  1513  00167E  361A               	rlcf	___lmul@multiplicand+3,f,c
  1514  001680  90D8               	bcf	status,0,c
  1515  001682  3216               	rrcf	___lmul@multiplier+3,f,c
  1516  001684  3215               	rrcf	___lmul@multiplier+2,f,c
  1517  001686  3214               	rrcf	___lmul@multiplier+1,f,c
  1518  001688  3213               	rrcf	___lmul@multiplier,f,c
  1519  00168A  5013               	movf	___lmul@multiplier,w,c
  1520  00168C  1014               	iorwf	___lmul@multiplier+1,w,c
  1521  00168E  1015               	iorwf	___lmul@multiplier+2,w,c
  1522  001690  1016               	iorwf	___lmul@multiplier+3,w,c
  1523  001692  A4D8               	btfss	status,2,c
  1524  001694  D7E6               	goto	l168
  1525  001696  C01B  F013         	movff	___lmul@product,?___lmul
  1526  00169A  C01C  F014         	movff	___lmul@product+1,?___lmul+1
  1527  00169E  C01D  F015         	movff	___lmul@product+2,?___lmul+2
  1528  0016A2  C01E  F016         	movff	___lmul@product+3,?___lmul+3
  1529  0016A6  0012               	return		;funcret
  1530  0016A8                     __end_of___lmul:
  1531                           	opt stack 0
  1532                           tblptru	equ	0xFF8
  1533                           wreg	equ	0xFE8
  1534                           status	equ	0xFD8
  1535                           
  1536 ;; *************** function ___fttol *****************
  1537 ;; Defined at:
  1538 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  1539 ;; Parameters:    Size  Location     Type
  1540 ;;  f1              3   44[COMRAM] float 
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;  lval            4   54[COMRAM] unsigned long 
  1543 ;;  exp1            1   58[COMRAM] unsigned char 
  1544 ;;  sign1           1   53[COMRAM] unsigned char 
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  4   44[COMRAM] long 
  1547 ;; Registers used:
  1548 ;;		wreg, status,2, status,0
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1554 ;;      Params:         4       0       0       0       0       0       0       0       0
  1555 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1556 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1557 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1558 ;;Total ram usage:       15 bytes
  1559 ;; Hardware stack levels used:    1
  1560 ;; Hardware stack levels required when called:    2
  1561 ;; This function calls:
  1562 ;;		Nothing
  1563 ;; This function is called by:
  1564 ;;		_writeValueLcd
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           	psect	text3
  1569  001036                     __ptext3:
  1570                           	opt stack 0
  1571  001036                     ___fttol:
  1572                           	opt stack 27
  1573                           
  1574                           ;incstack = 0
  1575  001036  C02F  F031         	movff	___fttol@f1+2,??___fttol
  1576  00103A  6A32               	clrf	(??___fttol+1)& (0+255),c
  1577  00103C  6A33               	clrf	(??___fttol+2)& (0+255),c
  1578  00103E  342E               	rlcf	___fttol@f1+1,w,c
  1579  001040  3631               	rlcf	??___fttol& (0+255),f,c
  1580  001042  E301               	bnc	u881
  1581  001044  8032               	bsf	(??___fttol+1)& (0+255),0,c
  1582  001046                     u881:
  1583  001046  5031               	movf	??___fttol,w,c
  1584  001048  6E3B               	movwf	___fttol@exp1,c
  1585  00104A  503B               	movf	___fttol@exp1,w,c
  1586  00104C  A4D8               	btfss	status,2,c
  1587  00104E  D009               	goto	l471
  1588  001050  0E00               	movlw	0
  1589  001052  6E2D               	movwf	?___fttol,c
  1590  001054  0E00               	movlw	0
  1591  001056  6E2E               	movwf	?___fttol+1,c
  1592  001058  0E00               	movlw	0
  1593  00105A  6E2F               	movwf	?___fttol+2,c
  1594  00105C  0E00               	movlw	0
  1595  00105E  6E30               	movwf	?___fttol+3,c
  1596  001060  0012               	return	
  1597  001062                     l471:
  1598  001062  0E17               	movlw	23
  1599  001064  6E31               	movwf	??___fttol& (0+255),c
  1600  001066  C02D  F032         	movff	___fttol@f1,??___fttol+1
  1601  00106A  C02E  F033         	movff	___fttol@f1+1,??___fttol+2
  1602  00106E  C02F  F034         	movff	___fttol@f1+2,??___fttol+3
  1603  001072  2831               	incf	??___fttol,w,c
  1604  001074  6E35               	movwf	(??___fttol+4)& (0+255),c
  1605  001076  D004               	goto	u900
  1606  001078                     u905:
  1607  001078  90D8               	bcf	status,0,c
  1608  00107A  3234               	rrcf	??___fttol+3,f,c
  1609  00107C  3233               	rrcf	??___fttol+2,f,c
  1610  00107E  3232               	rrcf	??___fttol+1,f,c
  1611  001080                     u900:
  1612  001080  2E35               	decfsz	(??___fttol+4)& (0+255),f,c
  1613  001082  D7FA               	goto	u905
  1614  001084  5032               	movf	??___fttol+1,w,c
  1615  001086  6E36               	movwf	___fttol@sign1,c
  1616  001088  8E2E               	bsf	___fttol@f1+1,7,c
  1617  00108A  0EFF               	movlw	255
  1618  00108C  162D               	andwf	___fttol@f1,f,c
  1619  00108E  0EFF               	movlw	255
  1620  001090  162E               	andwf	___fttol@f1+1,f,c
  1621  001092  0E00               	movlw	0
  1622  001094  162F               	andwf	___fttol@f1+2,f,c
  1623  001096  502D               	movf	___fttol@f1,w,c
  1624  001098  6E37               	movwf	___fttol@lval,c
  1625  00109A  502E               	movf	___fttol@f1+1,w,c
  1626  00109C  6E38               	movwf	___fttol@lval+1,c
  1627  00109E  502F               	movf	___fttol@f1+2,w,c
  1628  0010A0  6E39               	movwf	___fttol@lval+2,c
  1629  0010A2  6A3A               	clrf	___fttol@lval+3,c
  1630  0010A4  0E8E               	movlw	142
  1631  0010A6  5E3B               	subwf	___fttol@exp1,f,c
  1632  0010A8  AE3B               	btfss	___fttol@exp1,7,c
  1633  0010AA  D016               	goto	l473
  1634  0010AC  503B               	movf	___fttol@exp1,w,c
  1635  0010AE  0A80               	xorlw	128
  1636  0010B0  0F8F               	addlw	143
  1637  0010B2  B0D8               	btfsc	status,0,c
  1638  0010B4  D009               	goto	l474
  1639  0010B6  0E00               	movlw	0
  1640  0010B8  6E2D               	movwf	?___fttol,c
  1641  0010BA  0E00               	movlw	0
  1642  0010BC  6E2E               	movwf	?___fttol+1,c
  1643  0010BE  0E00               	movlw	0
  1644  0010C0  6E2F               	movwf	?___fttol+2,c
  1645  0010C2  0E00               	movlw	0
  1646  0010C4  6E30               	movwf	?___fttol+3,c
  1647  0010C6  0012               	return	
  1648  0010C8                     l474:
  1649  0010C8  90D8               	bcf	status,0,c
  1650  0010CA  323A               	rrcf	___fttol@lval+3,f,c
  1651  0010CC  3239               	rrcf	___fttol@lval+2,f,c
  1652  0010CE  3238               	rrcf	___fttol@lval+1,f,c
  1653  0010D0  3237               	rrcf	___fttol@lval,f,c
  1654  0010D2  3E3B               	incfsz	___fttol@exp1,f,c
  1655  0010D4  D7F9               	goto	l474
  1656  0010D6  D015               	goto	u940
  1657  0010D8                     l473:
  1658  0010D8  0E17               	movlw	23
  1659  0010DA  643B               	cpfsgt	___fttol@exp1,c
  1660  0010DC  D00F               	goto	l479
  1661  0010DE  0E00               	movlw	0
  1662  0010E0  6E2D               	movwf	?___fttol,c
  1663  0010E2  0E00               	movlw	0
  1664  0010E4  6E2E               	movwf	?___fttol+1,c
  1665  0010E6  0E00               	movlw	0
  1666  0010E8  6E2F               	movwf	?___fttol+2,c
  1667  0010EA  0E00               	movlw	0
  1668  0010EC  6E30               	movwf	?___fttol+3,c
  1669  0010EE  0012               	return	
  1670  0010F0  90D8               	bcf	status,0,c
  1671  0010F2  3637               	rlcf	___fttol@lval,f,c
  1672  0010F4  3638               	rlcf	___fttol@lval+1,f,c
  1673  0010F6  3639               	rlcf	___fttol@lval+2,f,c
  1674  0010F8  363A               	rlcf	___fttol@lval+3,f,c
  1675  0010FA  063B               	decf	___fttol@exp1,f,c
  1676  0010FC                     l479:
  1677  0010FC  503B               	movf	___fttol@exp1,w,c
  1678  0010FE  A4D8               	btfss	status,2,c
  1679  001100  D7F7               	goto	l480
  1680  001102                     u940:
  1681  001102  5036               	movf	___fttol@sign1,w,c
  1682  001104  B4D8               	btfsc	status,2,c
  1683  001106  D008               	goto	l482
  1684  001108  1E3A               	comf	___fttol@lval+3,f,c
  1685  00110A  1E39               	comf	___fttol@lval+2,f,c
  1686  00110C  1E38               	comf	___fttol@lval+1,f,c
  1687  00110E  6C37               	negf	___fttol@lval,c
  1688  001110  0E00               	movlw	0
  1689  001112  2238               	addwfc	___fttol@lval+1,f,c
  1690  001114  2239               	addwfc	___fttol@lval+2,f,c
  1691  001116  223A               	addwfc	___fttol@lval+3,f,c
  1692  001118                     l482:
  1693  001118  C037  F02D         	movff	___fttol@lval,?___fttol
  1694  00111C  C038  F02E         	movff	___fttol@lval+1,?___fttol+1
  1695  001120  C039  F02F         	movff	___fttol@lval+2,?___fttol+2
  1696  001124  C03A  F030         	movff	___fttol@lval+3,?___fttol+3
  1697  001128  0012               	return	
  1698  00112A                     __end_of___fttol:
  1699                           	opt stack 0
  1700                           tblptru	equ	0xFF8
  1701                           wreg	equ	0xFE8
  1702                           status	equ	0xFD8
  1703                           
  1704 ;; *************** function ___ftmul *****************
  1705 ;; Defined at:
  1706 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;  f1              3   29[COMRAM] float 
  1709 ;;  f2              3   32[COMRAM] float 
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;  f3_as_produc    3   39[COMRAM] unsigned um
  1712 ;;  sign            1   43[COMRAM] unsigned char 
  1713 ;;  cntr            1   42[COMRAM] unsigned char 
  1714 ;;  exp             1   38[COMRAM] unsigned char 
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  3   29[COMRAM] float 
  1717 ;; Registers used:
  1718 ;;		wreg, status,2, status,0, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1724 ;;      Params:         6       0       0       0       0       0       0       0       0
  1725 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1726 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1727 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1728 ;;Total ram usage:       15 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; Hardware stack levels required when called:    3
  1731 ;; This function calls:
  1732 ;;		___ftpack
  1733 ;; This function is called by:
  1734 ;;		_main
  1735 ;;		_writeValueLcd
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text4
  1740  00112A                     __ptext4:
  1741                           	opt stack 0
  1742  00112A                     ___ftmul:
  1743                           	opt stack 26
  1744                           
  1745                           ;incstack = 0
  1746  00112A  C020  F024         	movff	___ftmul@f1+2,??___ftmul
  1747  00112E  6A25               	clrf	(??___ftmul+1)& (0+255),c
  1748  001130  6A26               	clrf	(??___ftmul+2)& (0+255),c
  1749  001132  341F               	rlcf	___ftmul@f1+1,w,c
  1750  001134  3624               	rlcf	??___ftmul& (0+255),f,c
  1751  001136  E301               	bnc	u821
  1752  001138  8025               	bsf	(??___ftmul+1)& (0+255),0,c
  1753  00113A                     u821:
  1754  00113A  5024               	movf	??___ftmul,w,c
  1755  00113C  6E27               	movwf	___ftmul@exp,c
  1756  00113E  5027               	movf	___ftmul@exp,w,c
  1757  001140  A4D8               	btfss	status,2,c
  1758  001142  D007               	goto	l450
  1759  001144  0E00               	movlw	0
  1760  001146  6E1E               	movwf	?___ftmul,c
  1761  001148  0E00               	movlw	0
  1762  00114A  6E1F               	movwf	?___ftmul+1,c
  1763  00114C  0E00               	movlw	0
  1764  00114E  6E20               	movwf	?___ftmul+2,c
  1765  001150  0012               	return	
  1766  001152                     l450:
  1767  001152  C023  F024         	movff	___ftmul@f2+2,??___ftmul
  1768  001156  6A25               	clrf	(??___ftmul+1)& (0+255),c
  1769  001158  6A26               	clrf	(??___ftmul+2)& (0+255),c
  1770  00115A  3422               	rlcf	___ftmul@f2+1,w,c
  1771  00115C  3624               	rlcf	??___ftmul& (0+255),f,c
  1772  00115E  E301               	bnc	u841
  1773  001160  8025               	bsf	(??___ftmul+1)& (0+255),0,c
  1774  001162                     u841:
  1775  001162  5024               	movf	??___ftmul,w,c
  1776  001164  6E2C               	movwf	___ftmul@sign,c
  1777  001166  502C               	movf	___ftmul@sign,w,c
  1778  001168  A4D8               	btfss	status,2,c
  1779  00116A  D007               	goto	l452
  1780  00116C  0E00               	movlw	0
  1781  00116E  6E1E               	movwf	?___ftmul,c
  1782  001170  0E00               	movlw	0
  1783  001172  6E1F               	movwf	?___ftmul+1,c
  1784  001174  0E00               	movlw	0
  1785  001176  6E20               	movwf	?___ftmul+2,c
  1786  001178  0012               	return	
  1787  00117A                     l452:
  1788  00117A  502C               	movf	___ftmul@sign,w,c
  1789  00117C  0F7B               	addlw	123
  1790  00117E  2627               	addwf	___ftmul@exp,f,c
  1791  001180  C020  F02C         	movff	___ftmul@f1+2,___ftmul@sign
  1792  001184  5023               	movf	___ftmul@f2+2,w,c
  1793  001186  1A2C               	xorwf	___ftmul@sign,f,c
  1794  001188  0E80               	movlw	128
  1795  00118A  162C               	andwf	___ftmul@sign,f,c
  1796  00118C  8E1F               	bsf	___ftmul@f1+1,7,c
  1797  00118E  8E22               	bsf	___ftmul@f2+1,7,c
  1798  001190  0EFF               	movlw	255
  1799  001192  1621               	andwf	___ftmul@f2,f,c
  1800  001194  0EFF               	movlw	255
  1801  001196  1622               	andwf	___ftmul@f2+1,f,c
  1802  001198  0E00               	movlw	0
  1803  00119A  1623               	andwf	___ftmul@f2+2,f,c
  1804  00119C  0E00               	movlw	0
  1805  00119E  6E28               	movwf	___ftmul@f3_as_product,c
  1806  0011A0  0E00               	movlw	0
  1807  0011A2  6E29               	movwf	___ftmul@f3_as_product+1,c
  1808  0011A4  0E00               	movlw	0
  1809  0011A6  6E2A               	movwf	___ftmul@f3_as_product+2,c
  1810  0011A8  0E07               	movlw	7
  1811  0011AA  6E2B               	movwf	___ftmul@cntr,c
  1812  0011AC  A01E               	btfss	___ftmul@f1,0,c
  1813  0011AE  D006               	goto	l454
  1814  0011B0  5021               	movf	___ftmul@f2,w,c
  1815  0011B2  2628               	addwf	___ftmul@f3_as_product,f,c
  1816  0011B4  5022               	movf	___ftmul@f2+1,w,c
  1817  0011B6  2229               	addwfc	___ftmul@f3_as_product+1,f,c
  1818  0011B8  5023               	movf	___ftmul@f2+2,w,c
  1819  0011BA  222A               	addwfc	___ftmul@f3_as_product+2,f,c
  1820  0011BC                     l454:
  1821  0011BC  90D8               	bcf	status,0,c
  1822  0011BE  3220               	rrcf	___ftmul@f1+2,f,c
  1823  0011C0  321F               	rrcf	___ftmul@f1+1,f,c
  1824  0011C2  321E               	rrcf	___ftmul@f1,f,c
  1825  0011C4  90D8               	bcf	status,0,c
  1826  0011C6  3621               	rlcf	___ftmul@f2,f,c
  1827  0011C8  3622               	rlcf	___ftmul@f2+1,f,c
  1828  0011CA  3623               	rlcf	___ftmul@f2+2,f,c
  1829  0011CC  2E2B               	decfsz	___ftmul@cntr,f,c
  1830  0011CE  D7EE               	goto	l453
  1831  0011D0  0E09               	movlw	9
  1832  0011D2  6E2B               	movwf	___ftmul@cntr,c
  1833  0011D4  A01E               	btfss	___ftmul@f1,0,c
  1834  0011D6  D006               	goto	l457
  1835  0011D8  5021               	movf	___ftmul@f2,w,c
  1836  0011DA  2628               	addwf	___ftmul@f3_as_product,f,c
  1837  0011DC  5022               	movf	___ftmul@f2+1,w,c
  1838  0011DE  2229               	addwfc	___ftmul@f3_as_product+1,f,c
  1839  0011E0  5023               	movf	___ftmul@f2+2,w,c
  1840  0011E2  222A               	addwfc	___ftmul@f3_as_product+2,f,c
  1841  0011E4                     l457:
  1842  0011E4  90D8               	bcf	status,0,c
  1843  0011E6  3220               	rrcf	___ftmul@f1+2,f,c
  1844  0011E8  321F               	rrcf	___ftmul@f1+1,f,c
  1845  0011EA  321E               	rrcf	___ftmul@f1,f,c
  1846  0011EC  90D8               	bcf	status,0,c
  1847  0011EE  322A               	rrcf	___ftmul@f3_as_product+2,f,c
  1848  0011F0  3229               	rrcf	___ftmul@f3_as_product+1,f,c
  1849  0011F2  3228               	rrcf	___ftmul@f3_as_product,f,c
  1850  0011F4  2E2B               	decfsz	___ftmul@cntr,f,c
  1851  0011F6  D7EE               	goto	l456
  1852  0011F8  C028  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  1853  0011FC  C029  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  1854  001200  C02A  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  1855  001204  C027  F016         	movff	___ftmul@exp,___ftpack@exp
  1856  001208  C02C  F017         	movff	___ftmul@sign,___ftpack@sign
  1857  00120C  ECE8  F009         	call	___ftpack	;wreg free
  1858  001210  C013  F01E         	movff	?___ftpack,?___ftmul
  1859  001214  C014  F01F         	movff	?___ftpack+1,?___ftmul+1
  1860  001218  C015  F020         	movff	?___ftpack+2,?___ftmul+2
  1861  00121C  0012               	return	
  1862  00121E                     __end_of___ftmul:
  1863                           	opt stack 0
  1864                           tblptru	equ	0xFF8
  1865                           wreg	equ	0xFE8
  1866                           status	equ	0xFD8
  1867                           
  1868 ;; *************** function ___almod *****************
  1869 ;; Defined at:
  1870 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\almod.c"
  1871 ;; Parameters:    Size  Location     Type
  1872 ;;  dividend        4   18[COMRAM] long 
  1873 ;;  divisor         4   22[COMRAM] long 
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;  sign            1   27[COMRAM] unsigned char 
  1876 ;;  counter         1   26[COMRAM] unsigned char 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  4   18[COMRAM] long 
  1879 ;; Registers used:
  1880 ;;		wreg, status,2, status,0
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1886 ;;      Params:         8       0       0       0       0       0       0       0       0
  1887 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1888 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1889 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1890 ;;Total ram usage:       10 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    2
  1893 ;; This function calls:
  1894 ;;		Nothing
  1895 ;; This function is called by:
  1896 ;;		_writeValueLcd
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           	psect	text5
  1901  00147E                     __ptext5:
  1902                           	opt stack 0
  1903  00147E                     ___almod:
  1904                           	opt stack 27
  1905                           
  1906                           ;incstack = 0
  1907  00147E  0E00               	movlw	0
  1908  001480  6E1C               	movwf	___almod@sign,c
  1909  001482  AE16               	btfss	___almod@dividend+3,7,c
  1910  001484  D00A               	goto	l225
  1911  001486  1E16               	comf	___almod@dividend+3,f,c
  1912  001488  1E15               	comf	___almod@dividend+2,f,c
  1913  00148A  1E14               	comf	___almod@dividend+1,f,c
  1914  00148C  6C13               	negf	___almod@dividend,c
  1915  00148E  0E00               	movlw	0
  1916  001490  2214               	addwfc	___almod@dividend+1,f,c
  1917  001492  2215               	addwfc	___almod@dividend+2,f,c
  1918  001494  2216               	addwfc	___almod@dividend+3,f,c
  1919  001496  0E01               	movlw	1
  1920  001498  6E1C               	movwf	___almod@sign,c
  1921  00149A                     l225:
  1922  00149A  AE1A               	btfss	___almod@divisor+3,7,c
  1923  00149C  D008               	goto	l226
  1924  00149E  1E1A               	comf	___almod@divisor+3,f,c
  1925  0014A0  1E19               	comf	___almod@divisor+2,f,c
  1926  0014A2  1E18               	comf	___almod@divisor+1,f,c
  1927  0014A4  6C17               	negf	___almod@divisor,c
  1928  0014A6  0E00               	movlw	0
  1929  0014A8  2218               	addwfc	___almod@divisor+1,f,c
  1930  0014AA  2219               	addwfc	___almod@divisor+2,f,c
  1931  0014AC  221A               	addwfc	___almod@divisor+3,f,c
  1932  0014AE                     l226:
  1933  0014AE  5017               	movf	___almod@divisor,w,c
  1934  0014B0  1018               	iorwf	___almod@divisor+1,w,c
  1935  0014B2  1019               	iorwf	___almod@divisor+2,w,c
  1936  0014B4  101A               	iorwf	___almod@divisor+3,w,c
  1937  0014B6  B4D8               	btfsc	status,2,c
  1938  0014B8  D024               	goto	l233
  1939  0014BA  0E01               	movlw	1
  1940  0014BC  6E1B               	movwf	___almod@counter,c
  1941  0014BE  D006               	goto	l228
  1942  0014C0  90D8               	bcf	status,0,c
  1943  0014C2  3617               	rlcf	___almod@divisor,f,c
  1944  0014C4  3618               	rlcf	___almod@divisor+1,f,c
  1945  0014C6  3619               	rlcf	___almod@divisor+2,f,c
  1946  0014C8  361A               	rlcf	___almod@divisor+3,f,c
  1947  0014CA  2A1B               	incf	___almod@counter,f,c
  1948  0014CC                     l228:
  1949  0014CC  AE1A               	btfss	___almod@divisor+3,7,c
  1950  0014CE  D7F8               	goto	l229
  1951  0014D0                     u790:
  1952  0014D0  5017               	movf	___almod@divisor,w,c
  1953  0014D2  5C13               	subwf	___almod@dividend,w,c
  1954  0014D4  5018               	movf	___almod@divisor+1,w,c
  1955  0014D6  5814               	subwfb	___almod@dividend+1,w,c
  1956  0014D8  5019               	movf	___almod@divisor+2,w,c
  1957  0014DA  5815               	subwfb	___almod@dividend+2,w,c
  1958  0014DC  501A               	movf	___almod@divisor+3,w,c
  1959  0014DE  5816               	subwfb	___almod@dividend+3,w,c
  1960  0014E0  A0D8               	btfss	status,0,c
  1961  0014E2  D008               	goto	l232
  1962  0014E4  5017               	movf	___almod@divisor,w,c
  1963  0014E6  5E13               	subwf	___almod@dividend,f,c
  1964  0014E8  5018               	movf	___almod@divisor+1,w,c
  1965  0014EA  5A14               	subwfb	___almod@dividend+1,f,c
  1966  0014EC  5019               	movf	___almod@divisor+2,w,c
  1967  0014EE  5A15               	subwfb	___almod@dividend+2,f,c
  1968  0014F0  501A               	movf	___almod@divisor+3,w,c
  1969  0014F2  5A16               	subwfb	___almod@dividend+3,f,c
  1970  0014F4                     l232:
  1971  0014F4  90D8               	bcf	status,0,c
  1972  0014F6  321A               	rrcf	___almod@divisor+3,f,c
  1973  0014F8  3219               	rrcf	___almod@divisor+2,f,c
  1974  0014FA  3218               	rrcf	___almod@divisor+1,f,c
  1975  0014FC  3217               	rrcf	___almod@divisor,f,c
  1976  0014FE  2E1B               	decfsz	___almod@counter,f,c
  1977  001500  D7E7               	goto	u790
  1978  001502                     l233:
  1979  001502  501C               	movf	___almod@sign,w,c
  1980  001504  B4D8               	btfsc	status,2,c
  1981  001506  D008               	goto	l234
  1982  001508  1E16               	comf	___almod@dividend+3,f,c
  1983  00150A  1E15               	comf	___almod@dividend+2,f,c
  1984  00150C  1E14               	comf	___almod@dividend+1,f,c
  1985  00150E  6C13               	negf	___almod@dividend,c
  1986  001510  0E00               	movlw	0
  1987  001512  2214               	addwfc	___almod@dividend+1,f,c
  1988  001514  2215               	addwfc	___almod@dividend+2,f,c
  1989  001516  2216               	addwfc	___almod@dividend+3,f,c
  1990  001518                     l234:
  1991  001518  C013  F013         	movff	___almod@dividend,?___almod
  1992  00151C  C014  F014         	movff	___almod@dividend+1,?___almod+1
  1993  001520  C015  F015         	movff	___almod@dividend+2,?___almod+2
  1994  001524  C016  F016         	movff	___almod@dividend+3,?___almod+3
  1995  001528  0012               	return	
  1996  00152A                     __end_of___almod:
  1997                           	opt stack 0
  1998                           tblptru	equ	0xFF8
  1999                           wreg	equ	0xFE8
  2000                           status	equ	0xFD8
  2001                           
  2002 ;; *************** function ___aldiv *****************
  2003 ;; Defined at:
  2004 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  dividend        4   28[COMRAM] long 
  2007 ;;  divisor         4   32[COMRAM] long 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  quotient        4   38[COMRAM] long 
  2010 ;;  sign            1   37[COMRAM] unsigned char 
  2011 ;;  counter         1   36[COMRAM] unsigned char 
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  4   28[COMRAM] long 
  2014 ;; Registers used:
  2015 ;;		wreg, status,2, status,0
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2021 ;;      Params:         8       0       0       0       0       0       0       0       0
  2022 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2023 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2024 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2025 ;;Total ram usage:       14 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:    2
  2028 ;; This function calls:
  2029 ;;		Nothing
  2030 ;; This function is called by:
  2031 ;;		_writeValueLcd
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text6
  2036  001304                     __ptext6:
  2037                           	opt stack 0
  2038  001304                     ___aldiv:
  2039                           	opt stack 27
  2040                           
  2041                           ;incstack = 0
  2042  001304  0E00               	movlw	0
  2043  001306  6E26               	movwf	___aldiv@sign,c
  2044  001308  AE24               	btfss	___aldiv@divisor+3,7,c
  2045  00130A  D00A               	goto	l212
  2046  00130C  1E24               	comf	___aldiv@divisor+3,f,c
  2047  00130E  1E23               	comf	___aldiv@divisor+2,f,c
  2048  001310  1E22               	comf	___aldiv@divisor+1,f,c
  2049  001312  6C21               	negf	___aldiv@divisor,c
  2050  001314  0E00               	movlw	0
  2051  001316  2222               	addwfc	___aldiv@divisor+1,f,c
  2052  001318  2223               	addwfc	___aldiv@divisor+2,f,c
  2053  00131A  2224               	addwfc	___aldiv@divisor+3,f,c
  2054  00131C  0E01               	movlw	1
  2055  00131E  6E26               	movwf	___aldiv@sign,c
  2056  001320                     l212:
  2057  001320  AE20               	btfss	___aldiv@dividend+3,7,c
  2058  001322  D00A               	goto	l213
  2059  001324  1E20               	comf	___aldiv@dividend+3,f,c
  2060  001326  1E1F               	comf	___aldiv@dividend+2,f,c
  2061  001328  1E1E               	comf	___aldiv@dividend+1,f,c
  2062  00132A  6C1D               	negf	___aldiv@dividend,c
  2063  00132C  0E00               	movlw	0
  2064  00132E  221E               	addwfc	___aldiv@dividend+1,f,c
  2065  001330  221F               	addwfc	___aldiv@dividend+2,f,c
  2066  001332  2220               	addwfc	___aldiv@dividend+3,f,c
  2067  001334  0E01               	movlw	1
  2068  001336  1A26               	xorwf	___aldiv@sign,f,c
  2069  001338                     l213:
  2070  001338  0E00               	movlw	0
  2071  00133A  6E27               	movwf	___aldiv@quotient,c
  2072  00133C  0E00               	movlw	0
  2073  00133E  6E28               	movwf	___aldiv@quotient+1,c
  2074  001340  0E00               	movlw	0
  2075  001342  6E29               	movwf	___aldiv@quotient+2,c
  2076  001344  0E00               	movlw	0
  2077  001346  6E2A               	movwf	___aldiv@quotient+3,c
  2078  001348  5021               	movf	___aldiv@divisor,w,c
  2079  00134A  1022               	iorwf	___aldiv@divisor+1,w,c
  2080  00134C  1023               	iorwf	___aldiv@divisor+2,w,c
  2081  00134E  1024               	iorwf	___aldiv@divisor+3,w,c
  2082  001350  B4D8               	btfsc	status,2,c
  2083  001352  D02A               	goto	l220
  2084  001354  0E01               	movlw	1
  2085  001356  6E25               	movwf	___aldiv@counter,c
  2086  001358  D006               	goto	l215
  2087  00135A  90D8               	bcf	status,0,c
  2088  00135C  3621               	rlcf	___aldiv@divisor,f,c
  2089  00135E  3622               	rlcf	___aldiv@divisor+1,f,c
  2090  001360  3623               	rlcf	___aldiv@divisor+2,f,c
  2091  001362  3624               	rlcf	___aldiv@divisor+3,f,c
  2092  001364  2A25               	incf	___aldiv@counter,f,c
  2093  001366                     l215:
  2094  001366  AE24               	btfss	___aldiv@divisor+3,7,c
  2095  001368  D7F8               	goto	l216
  2096  00136A                     u730:
  2097  00136A  90D8               	bcf	status,0,c
  2098  00136C  3627               	rlcf	___aldiv@quotient,f,c
  2099  00136E  3628               	rlcf	___aldiv@quotient+1,f,c
  2100  001370  3629               	rlcf	___aldiv@quotient+2,f,c
  2101  001372  362A               	rlcf	___aldiv@quotient+3,f,c
  2102  001374  5021               	movf	___aldiv@divisor,w,c
  2103  001376  5C1D               	subwf	___aldiv@dividend,w,c
  2104  001378  5022               	movf	___aldiv@divisor+1,w,c
  2105  00137A  581E               	subwfb	___aldiv@dividend+1,w,c
  2106  00137C  5023               	movf	___aldiv@divisor+2,w,c
  2107  00137E  581F               	subwfb	___aldiv@dividend+2,w,c
  2108  001380  5024               	movf	___aldiv@divisor+3,w,c
  2109  001382  5820               	subwfb	___aldiv@dividend+3,w,c
  2110  001384  A0D8               	btfss	status,0,c
  2111  001386  D009               	goto	l219
  2112  001388  5021               	movf	___aldiv@divisor,w,c
  2113  00138A  5E1D               	subwf	___aldiv@dividend,f,c
  2114  00138C  5022               	movf	___aldiv@divisor+1,w,c
  2115  00138E  5A1E               	subwfb	___aldiv@dividend+1,f,c
  2116  001390  5023               	movf	___aldiv@divisor+2,w,c
  2117  001392  5A1F               	subwfb	___aldiv@dividend+2,f,c
  2118  001394  5024               	movf	___aldiv@divisor+3,w,c
  2119  001396  5A20               	subwfb	___aldiv@dividend+3,f,c
  2120  001398  8027               	bsf	___aldiv@quotient,0,c
  2121  00139A                     l219:
  2122  00139A  90D8               	bcf	status,0,c
  2123  00139C  3224               	rrcf	___aldiv@divisor+3,f,c
  2124  00139E  3223               	rrcf	___aldiv@divisor+2,f,c
  2125  0013A0  3222               	rrcf	___aldiv@divisor+1,f,c
  2126  0013A2  3221               	rrcf	___aldiv@divisor,f,c
  2127  0013A4  2E25               	decfsz	___aldiv@counter,f,c
  2128  0013A6  D7E1               	goto	u730
  2129  0013A8                     l220:
  2130  0013A8  5026               	movf	___aldiv@sign,w,c
  2131  0013AA  B4D8               	btfsc	status,2,c
  2132  0013AC  D008               	goto	l221
  2133  0013AE  1E2A               	comf	___aldiv@quotient+3,f,c
  2134  0013B0  1E29               	comf	___aldiv@quotient+2,f,c
  2135  0013B2  1E28               	comf	___aldiv@quotient+1,f,c
  2136  0013B4  6C27               	negf	___aldiv@quotient,c
  2137  0013B6  0E00               	movlw	0
  2138  0013B8  2228               	addwfc	___aldiv@quotient+1,f,c
  2139  0013BA  2229               	addwfc	___aldiv@quotient+2,f,c
  2140  0013BC  222A               	addwfc	___aldiv@quotient+3,f,c
  2141  0013BE                     l221:
  2142  0013BE  C027  F01D         	movff	___aldiv@quotient,?___aldiv
  2143  0013C2  C028  F01E         	movff	___aldiv@quotient+1,?___aldiv+1
  2144  0013C6  C029  F01F         	movff	___aldiv@quotient+2,?___aldiv+2
  2145  0013CA  C02A  F020         	movff	___aldiv@quotient+3,?___aldiv+3
  2146  0013CE  0012               	return	
  2147  0013D0                     __end_of___aldiv:
  2148                           	opt stack 0
  2149                           tblptru	equ	0xFF8
  2150                           wreg	equ	0xFE8
  2151                           status	equ	0xFD8
  2152                           
  2153 ;; *************** function _writeStringLcd *****************
  2154 ;; Defined at:
  2155 ;;		line 47 in file "lcd.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;  s               2   20[COMRAM] PTR unsigned char 
  2158 ;;		 -> STR_14(2), STR_13(10), STR_12(2), STR_11(10), 
  2159 ;;		 -> STR_10(2), STR_9(10), STR_8(2), STR_7(10), 
  2160 ;;		 -> STR_6(2), STR_5(10), STR_4(2), STR_3(10), 
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;		None
  2163 ;; Return value:  Size  Location     Type
  2164 ;;                  1    wreg      void 
  2165 ;; Registers used:
  2166 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2167 ;; Tracked objects:
  2168 ;;		On entry : 0/0
  2169 ;;		On exit  : 0/0
  2170 ;;		Unchanged: 0/0
  2171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2172 ;;      Params:         2       0       0       0       0       0       0       0       0
  2173 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2174 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2175 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2176 ;;Total ram usage:        2 bytes
  2177 ;; Hardware stack levels used:    1
  2178 ;; Hardware stack levels required when called:    4
  2179 ;; This function calls:
  2180 ;;		_writeLcd
  2181 ;; This function is called by:
  2182 ;;		_main
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186                           	psect	text7
  2187  001726                     __ptext7:
  2188                           	opt stack 0
  2189  001726                     _writeStringLcd:
  2190                           	opt stack 26
  2191                           
  2192                           ;lcd.c: 48: LATBbits.LATB4 = 1;
  2193                           
  2194                           ;incstack = 0
  2195  001726  888A               	bsf	3978,4,c	;volatile
  2196                           
  2197                           ;lcd.c: 49: while (*s)
  2198  001728  D00A               	goto	l131
  2199  00172A                     
  2200                           ;lcd.c: 50: writeLcd(*s++);
  2201  00172A  C015  FFF6         	movff	writeStringLcd@s,tblptrl
  2202  00172E  C016  FFF7         	movff	writeStringLcd@s+1,tblptrh
  2203  001732                     	if	0	;tblptru may be non-zero
  2204  001732                     	endif
  2205  001732                     	if	0	;tblptru may be non-zero
  2206  001732                     	endif
  2207  001732  0008               	tblrd		*
  2208  001734  50F5               	movf	tablat,w,c
  2209  001736  EC54  F00B         	call	_writeLcd
  2210  00173A  4A15               	infsnz	writeStringLcd@s,f,c
  2211  00173C  2A16               	incf	writeStringLcd@s+1,f,c
  2212  00173E                     l131:
  2213  00173E  C015  FFF6         	movff	writeStringLcd@s,tblptrl
  2214  001742  C016  FFF7         	movff	writeStringLcd@s+1,tblptrh
  2215  001746                     	if	0	;tblptru may be non-zero
  2216  001746                     	endif
  2217  001746                     	if	0	;tblptru may be non-zero
  2218  001746                     	endif
  2219  001746  0008               	tblrd		*
  2220  001748  50F5               	movf	tablat,w,c
  2221  00174A  0900               	iorlw	0
  2222  00174C  B4D8               	btfsc	status,2,c
  2223  00174E  0012               	return	
  2224  001750  D7EC               	goto	l132
  2225  001752                     __end_of_writeStringLcd:
  2226                           	opt stack 0
  2227                           tblptru	equ	0xFF8
  2228                           tblptrh	equ	0xFF7
  2229                           tblptrl	equ	0xFF6
  2230                           tablat	equ	0xFF5
  2231                           wreg	equ	0xFE8
  2232                           status	equ	0xFD8
  2233                           
  2234 ;; *************** function _writeCStringLcd *****************
  2235 ;; Defined at:
  2236 ;;		line 41 in file "lcd.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;  s               2   20[COMRAM] PTR const unsigned char 
  2239 ;;		 -> STR_2(17), STR_1(5), 
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;		None
  2242 ;; Return value:  Size  Location     Type
  2243 ;;                  1    wreg      void 
  2244 ;; Registers used:
  2245 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2246 ;; Tracked objects:
  2247 ;;		On entry : 0/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2251 ;;      Params:         2       0       0       0       0       0       0       0       0
  2252 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2253 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2254 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2255 ;;Total ram usage:        2 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; Hardware stack levels required when called:    4
  2258 ;; This function calls:
  2259 ;;		_writeLcd
  2260 ;; This function is called by:
  2261 ;;		_main
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           	psect	text8
  2266  001752                     __ptext8:
  2267                           	opt stack 0
  2268  001752                     _writeCStringLcd:
  2269                           	opt stack 26
  2270                           
  2271                           ;lcd.c: 42: LATBbits.LATB4 = 1;
  2272                           
  2273                           ;incstack = 0
  2274  001752  888A               	bsf	3978,4,c	;volatile
  2275                           
  2276                           ;lcd.c: 43: while (*s)
  2277  001754  D00A               	goto	l125
  2278  001756                     
  2279                           ;lcd.c: 44: writeLcd(*s++);
  2280  001756  C015  FFF6         	movff	writeCStringLcd@s,tblptrl
  2281  00175A  C016  FFF7         	movff	writeCStringLcd@s+1,tblptrh
  2282  00175E                     	if	0	;tblptru may be non-zero
  2283  00175E                     	endif
  2284  00175E                     	if	0	;tblptru may be non-zero
  2285  00175E                     	endif
  2286  00175E  0008               	tblrd		*
  2287  001760  50F5               	movf	tablat,w,c
  2288  001762  EC54  F00B         	call	_writeLcd
  2289  001766  4A15               	infsnz	writeCStringLcd@s,f,c
  2290  001768  2A16               	incf	writeCStringLcd@s+1,f,c
  2291  00176A                     l125:
  2292  00176A  C015  FFF6         	movff	writeCStringLcd@s,tblptrl
  2293  00176E  C016  FFF7         	movff	writeCStringLcd@s+1,tblptrh
  2294  001772                     	if	0	;tblptru may be non-zero
  2295  001772                     	endif
  2296  001772                     	if	0	;tblptru may be non-zero
  2297  001772                     	endif
  2298  001772  0008               	tblrd		*
  2299  001774  50F5               	movf	tablat,w,c
  2300  001776  0900               	iorlw	0
  2301  001778  B4D8               	btfsc	status,2,c
  2302  00177A  0012               	return	
  2303  00177C  D7EC               	goto	l126
  2304  00177E                     __end_of_writeCStringLcd:
  2305                           	opt stack 0
  2306                           tblptru	equ	0xFF8
  2307                           tblptrh	equ	0xFF7
  2308                           tblptrl	equ	0xFF6
  2309                           tablat	equ	0xFF5
  2310                           wreg	equ	0xFE8
  2311                           status	equ	0xFD8
  2312                           
  2313 ;; *************** function _initConfigs *****************
  2314 ;; Defined at:
  2315 ;;		line 13 in file "preset.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;		None
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;		None
  2320 ;; Return value:  Size  Location     Type
  2321 ;;                  1    wreg      void 
  2322 ;; Registers used:
  2323 ;;		wreg, status,2, status,0, cstack
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/0
  2326 ;;		On exit  : 0/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2329 ;;      Params:         0       0       0       0       0       0       0       0       0
  2330 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2331 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2332 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2333 ;;Total ram usage:        2 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; Hardware stack levels required when called:    5
  2336 ;; This function calls:
  2337 ;;		_clearLcd
  2338 ;;		_writeLcd
  2339 ;; This function is called by:
  2340 ;;		_main
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344                           	psect	text9
  2345  0015C6                     __ptext9:
  2346                           	opt stack 0
  2347  0015C6                     _initConfigs:
  2348                           	opt stack 25
  2349                           
  2350                           ;preset.c: 14: UCON<3>=0;
  2351                           
  2352                           ;incstack = 0
  2353  0015C6  506D               	movf	3949,w,c	;volatile
  2354                           
  2355                           ;preset.c: 15: CMCON = 0b00000111;
  2356  0015C8  0E07               	movlw	7
  2357  0015CA  6EB4               	movwf	4020,c	;volatile
  2358                           
  2359                           ;preset.c: 16: TRISC = 0b11111000;
  2360  0015CC  0EF8               	movlw	248
  2361  0015CE  6E94               	movwf	3988,c	;volatile
  2362                           
  2363                           ;preset.c: 17: TRISD = 0b00000001;
  2364  0015D0  0E01               	movlw	1
  2365  0015D2  6E95               	movwf	3989,c	;volatile
  2366                           
  2367                           ;preset.c: 18: TRISE = 0b1111;
  2368  0015D4  0E0F               	movlw	15
  2369  0015D6  6E96               	movwf	3990,c	;volatile
  2370                           
  2371                           ;preset.c: 20: TRISA = 0b10111111;
  2372  0015D8  0EBF               	movlw	191
  2373  0015DA  6E92               	movwf	3986,c	;volatile
  2374                           
  2375                           ;preset.c: 21: ADCON1 = 0b00001001;
  2376  0015DC  0E09               	movlw	9
  2377  0015DE  6EC1               	movwf	4033,c	;volatile
  2378                           
  2379                           ;preset.c: 22: ADCON2 = 0b10000110;
  2380  0015E0  0E86               	movlw	134
  2381  0015E2  6EC0               	movwf	4032,c	;volatile
  2382                           
  2383                           ;preset.c: 24: TRISB = 0b11000000;
  2384  0015E4  0EC0               	movlw	192
  2385  0015E6  6E93               	movwf	3987,c	;volatile
  2386                           
  2387                           ;preset.c: 25: LATBbits.LATB5 = 0;
  2388  0015E8  9A8A               	bcf	3978,5,c	;volatile
  2389                           
  2390                           ;preset.c: 26: LATBbits.LATB4 = 0;
  2391  0015EA  988A               	bcf	3978,4,c	;volatile
  2392                           
  2393                           ;preset.c: 27: _delay((unsigned long)((50)*((16000000)/4000.0)));
  2394  0015EC  0E02               	movlw	2
  2395  0015EE  6E17               	movwf	(??_initConfigs+1)& (0+255),c
  2396  0015F0  0E04               	movlw	4
  2397  0015F2  6E16               	movwf	??_initConfigs& (0+255),c
  2398  0015F4  0EBA               	movlw	186
  2399  0015F6                     u1207:
  2400  0015F6  2EE8               	decfsz	wreg,f,c
  2401  0015F8  D7FE               	bra	u1207
  2402  0015FA  2E16               	decfsz	??_initConfigs& (0+255),f,c
  2403  0015FC  D7FC               	bra	u1207
  2404  0015FE  2E17               	decfsz	(??_initConfigs+1)& (0+255),f,c
  2405  001600  D7FA               	bra	u1207
  2406  001602  D000               	nop2	
  2407                           
  2408                           ;preset.c: 28: writeLcd(0x02);
  2409  001604  0E02               	movlw	2
  2410  001606  EC54  F00B         	call	_writeLcd
  2411                           
  2412                           ;preset.c: 29: _delay((unsigned long)((5)*((16000000)/4000.0)));
  2413  00160A  0E1A               	movlw	26
  2414  00160C  6E16               	movwf	??_initConfigs& (0+255),c
  2415  00160E  0EF8               	movlw	248
  2416  001610                     u1217:
  2417  001610  2EE8               	decfsz	wreg,f,c
  2418  001612  D7FE               	bra	u1217
  2419  001614  2E16               	decfsz	??_initConfigs& (0+255),f,c
  2420  001616  D7FC               	bra	u1217
  2421  001618  D000               	nop2	
  2422                           
  2423                           ;preset.c: 30: writeLcd(0x28);
  2424  00161A  0E28               	movlw	40
  2425  00161C  EC54  F00B         	call	_writeLcd
  2426                           
  2427                           ;preset.c: 31: writeLcd(0x01);
  2428  001620  0E01               	movlw	1
  2429  001622  EC54  F00B         	call	_writeLcd
  2430                           
  2431                           ;preset.c: 32: writeLcd(0x0c);
  2432  001626  0E0C               	movlw	12
  2433  001628  EC54  F00B         	call	_writeLcd
  2434                           
  2435                           ;preset.c: 33: writeLcd(0x06);
  2436  00162C  0E06               	movlw	6
  2437  00162E  EC54  F00B         	call	_writeLcd
  2438                           
  2439                           ;preset.c: 34: clearLcd();
  2440  001632  ECD1  F00B         	call	_clearLcd	;wreg free
  2441                           
  2442                           ;preset.c: 35: writeLcd(0x0C);
  2443  001636  0E0C               	movlw	12
  2444  001638  EC54  F00B         	call	_writeLcd
  2445                           
  2446                           ;preset.c: 37: T0CON = 0b00000111;
  2447  00163C  0E07               	movlw	7
  2448  00163E  6ED5               	movwf	4053,c	;volatile
  2449                           
  2450                           ;preset.c: 38: INTCON = 0b11100000;
  2451  001640  0EE0               	movlw	224
  2452  001642  6EF2               	movwf	intcon,c	;volatile
  2453                           
  2454                           ;preset.c: 51: LATD = LATD & 0b00000001;
  2455  001644  508C               	movf	3980,w,c	;volatile
  2456  001646  0B01               	andlw	1
  2457  001648  6E8C               	movwf	3980,c	;volatile
  2458                           
  2459                           ;preset.c: 52: LATC = LATC & 0b11111000;
  2460  00164A  508B               	movf	3979,w,c	;volatile
  2461  00164C  0BF8               	andlw	248
  2462  00164E  6E8B               	movwf	3979,c	;volatile
  2463  001650  0012               	return		;funcret
  2464  001652                     __end_of_initConfigs:
  2465                           	opt stack 0
  2466                           tblptru	equ	0xFF8
  2467                           tblptrh	equ	0xFF7
  2468                           tblptrl	equ	0xFF6
  2469                           tablat	equ	0xFF5
  2470                           intcon	equ	0xFF2
  2471                           wreg	equ	0xFE8
  2472                           status	equ	0xFD8
  2473                           
  2474 ;; *************** function _clearLcd *****************
  2475 ;; Defined at:
  2476 ;;		line 25 in file "lcd.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;		None
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;		None
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  1    wreg      void 
  2483 ;; Registers used:
  2484 ;;		wreg, status,2, status,0, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2490 ;;      Params:         0       0       0       0       0       0       0       0       0
  2491 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2492 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2493 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2494 ;;Total ram usage:        1 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    4
  2497 ;; This function calls:
  2498 ;;		_writeLcd
  2499 ;; This function is called by:
  2500 ;;		_main
  2501 ;;		_initConfigs
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           	psect	text10
  2506  0017A2                     __ptext10:
  2507                           	opt stack 0
  2508  0017A2                     _clearLcd:
  2509                           	opt stack 25
  2510                           
  2511                           ;lcd.c: 26: LATBbits.LATB4 = 0;
  2512                           
  2513                           ;incstack = 0
  2514  0017A2  988A               	bcf	3978,4,c	;volatile
  2515                           
  2516                           ;lcd.c: 27: writeLcd(0x1);
  2517  0017A4  0E01               	movlw	1
  2518  0017A6  EC54  F00B         	call	_writeLcd
  2519                           
  2520                           ;lcd.c: 28: _delay((unsigned long)((2)*((16000000)/4000.0)));
  2521  0017AA  0E0B               	movlw	11
  2522  0017AC  6E15               	movwf	??_clearLcd& (0+255),c
  2523  0017AE  0E62               	movlw	98
  2524  0017B0                     u1227:
  2525  0017B0  2EE8               	decfsz	wreg,f,c
  2526  0017B2  D7FE               	bra	u1227
  2527  0017B4  2E15               	decfsz	??_clearLcd& (0+255),f,c
  2528  0017B6  D7FC               	bra	u1227
  2529  0017B8  D000               	nop2	
  2530  0017BA  0012               	return		;funcret
  2531  0017BC                     __end_of_clearLcd:
  2532                           	opt stack 0
  2533                           tblptru	equ	0xFF8
  2534                           tblptrh	equ	0xFF7
  2535                           tblptrl	equ	0xFF6
  2536                           tablat	equ	0xFF5
  2537                           intcon	equ	0xFF2
  2538                           wreg	equ	0xFE8
  2539                           status	equ	0xFD8
  2540                           
  2541 ;; *************** function _gotoLcd *****************
  2542 ;; Defined at:
  2543 ;;		line 31 in file "lcd.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;  pos             1    wreg     unsigned char 
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;  pos             1   20[COMRAM] unsigned char 
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  1    wreg      void 
  2550 ;; Registers used:
  2551 ;;		wreg, status,2, status,0, cstack
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2557 ;;      Params:         0       0       0       0       0       0       0       0       0
  2558 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2559 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2560 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2561 ;;Total ram usage:        1 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; Hardware stack levels required when called:    4
  2564 ;; This function calls:
  2565 ;;		_writeLcd
  2566 ;; This function is called by:
  2567 ;;		_main
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           	psect	text11
  2572  0017CA                     __ptext11:
  2573                           	opt stack 0
  2574  0017CA                     _gotoLcd:
  2575                           	opt stack 26
  2576                           
  2577                           ;incstack = 0
  2578                           ;gotoLcd@pos stored from wreg
  2579  0017CA  6E15               	movwf	gotoLcd@pos,c
  2580                           
  2581                           ;lcd.c: 32: LATBbits.LATB4 = 0;
  2582  0017CC  988A               	bcf	3978,4,c	;volatile
  2583                           
  2584                           ;lcd.c: 33: writeLcd(pos);
  2585  0017CE  5015               	movf	gotoLcd@pos,w,c
  2586  0017D0  EC54  F00B         	call	_writeLcd
  2587  0017D4  0012               	return		;funcret
  2588  0017D6                     __end_of_gotoLcd:
  2589                           	opt stack 0
  2590                           tblptru	equ	0xFF8
  2591                           tblptrh	equ	0xFF7
  2592                           tblptrl	equ	0xFF6
  2593                           tablat	equ	0xFF5
  2594                           intcon	equ	0xFF2
  2595                           wreg	equ	0xFE8
  2596                           status	equ	0xFD8
  2597                           
  2598 ;; *************** function _writeLcd *****************
  2599 ;; Defined at:
  2600 ;;		line 16 in file "lcd.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;  c               1    wreg     unsigned char 
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;  c               1   19[COMRAM] unsigned char 
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, status,2, status,0, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2614 ;;      Params:         0       0       0       0       0       0       0       0       0
  2615 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2616 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2617 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2618 ;;Total ram usage:        2 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; Hardware stack levels required when called:    3
  2621 ;; This function calls:
  2622 ;;		_sendLcd
  2623 ;; This function is called by:
  2624 ;;		_initConfigs
  2625 ;;		_clearLcd
  2626 ;;		_gotoLcd
  2627 ;;		_writeCStringLcd
  2628 ;;		_writeStringLcd
  2629 ;;		_writeValueLcd
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           	psect	text12
  2634  0016A8                     __ptext12:
  2635                           	opt stack 0
  2636  0016A8                     _writeLcd:
  2637                           	opt stack 26
  2638                           
  2639                           ;incstack = 0
  2640                           ;writeLcd@c stored from wreg
  2641  0016A8  6E14               	movwf	writeLcd@c,c
  2642                           
  2643                           ;lcd.c: 17: LATB = (unsigned char)((LATB & 0xF0) | (0x0F & c>>4));
  2644  0016AA  C014  F013         	movff	writeLcd@c,??_writeLcd
  2645  0016AE  3A13               	swapf	??_writeLcd,f,c
  2646  0016B0  0E0F               	movlw	15
  2647  0016B2  1613               	andwf	??_writeLcd,f,c
  2648  0016B4  0E0F               	movlw	15
  2649  0016B6  1613               	andwf	??_writeLcd,f,c
  2650  0016B8  508A               	movf	3978,w,c	;volatile
  2651  0016BA  0BF0               	andlw	240
  2652  0016BC  1013               	iorwf	??_writeLcd,w,c
  2653  0016BE  6E8A               	movwf	3978,c	;volatile
  2654                           
  2655                           ;lcd.c: 18: sendLcd();
  2656  0016C0  ECF1  F00B         	call	_sendLcd	;wreg free
  2657                           
  2658                           ;lcd.c: 19: _delay((unsigned long)((5)*((16000000)/4000000.0)));
  2659  0016C4  0E06               	movlw	6
  2660  0016C6                     u1237:
  2661  0016C6  2EE8               	decfsz	wreg,f,c
  2662  0016C8  D7FE               	bra	u1237
  2663  0016CA  D000               	nop2	
  2664                           
  2665                           ;lcd.c: 20: LATB = (unsigned char)((LATB & 0xF0) | (0x0F & c));
  2666  0016CC  C014  F013         	movff	writeLcd@c,??_writeLcd
  2667  0016D0  0E0F               	movlw	15
  2668  0016D2  1613               	andwf	??_writeLcd,f,c
  2669  0016D4  508A               	movf	3978,w,c	;volatile
  2670  0016D6  0BF0               	andlw	240
  2671  0016D8  1013               	iorwf	??_writeLcd,w,c
  2672  0016DA  6E8A               	movwf	3978,c	;volatile
  2673                           
  2674                           ;lcd.c: 21: sendLcd();
  2675  0016DC  ECF1  F00B         	call	_sendLcd	;wreg free
  2676                           
  2677                           ;lcd.c: 22: _delay((unsigned long)((5)*((16000000)/4000.0)));
  2678  0016E0  0E1A               	movlw	26
  2679  0016E2  6E13               	movwf	??_writeLcd& (0+255),c
  2680  0016E4  0EF8               	movlw	248
  2681  0016E6                     u1247:
  2682  0016E6  2EE8               	decfsz	wreg,f,c
  2683  0016E8  D7FE               	bra	u1247
  2684  0016EA  2E13               	decfsz	??_writeLcd& (0+255),f,c
  2685  0016EC  D7FC               	bra	u1247
  2686  0016EE  D000               	nop2	
  2687  0016F0  0012               	return		;funcret
  2688  0016F2                     __end_of_writeLcd:
  2689                           	opt stack 0
  2690                           tblptru	equ	0xFF8
  2691                           tblptrh	equ	0xFF7
  2692                           tblptrl	equ	0xFF6
  2693                           tablat	equ	0xFF5
  2694                           intcon	equ	0xFF2
  2695                           wreg	equ	0xFE8
  2696                           status	equ	0xFD8
  2697                           
  2698 ;; *************** function _sendLcd *****************
  2699 ;; Defined at:
  2700 ;;		line 11 in file "lcd.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;		None
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;		None
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  1    wreg      void 
  2707 ;; Registers used:
  2708 ;;		None
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2714 ;;      Params:         0       0       0       0       0       0       0       0       0
  2715 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2716 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2717 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2718 ;;Total ram usage:        0 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; Hardware stack levels required when called:    2
  2721 ;; This function calls:
  2722 ;;		Nothing
  2723 ;; This function is called by:
  2724 ;;		_writeLcd
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text13
  2729  0017E2                     __ptext13:
  2730                           	opt stack 0
  2731  0017E2                     _sendLcd:
  2732                           	opt stack 26
  2733                           
  2734                           ;lcd.c: 12: LATBbits.LATB5 = 1;
  2735                           
  2736                           ;incstack = 0
  2737  0017E2  8A8A               	bsf	3978,5,c	;volatile
  2738                           
  2739                           ;lcd.c: 13: LATBbits.LATB5 = 0;
  2740  0017E4  9A8A               	bcf	3978,5,c	;volatile
  2741  0017E6  0012               	return		;funcret
  2742  0017E8                     __end_of_sendLcd:
  2743                           	opt stack 0
  2744                           tblptru	equ	0xFF8
  2745                           tblptrh	equ	0xFF7
  2746                           tblptrl	equ	0xFF6
  2747                           tablat	equ	0xFF5
  2748                           intcon	equ	0xFF2
  2749                           wreg	equ	0xFE8
  2750                           status	equ	0xFD8
  2751                           
  2752 ;; *************** function _adc_read *****************
  2753 ;; Defined at:
  2754 ;;		line 11 in file "adc.c"
  2755 ;; Parameters:    Size  Location     Type
  2756 ;;  canal           1    wreg     unsigned char 
  2757 ;; Auto vars:     Size  Location     Type
  2758 ;;  canal           1   22[COMRAM] unsigned char 
  2759 ;;  y               1   24[COMRAM] unsigned char 
  2760 ;;  x               1   23[COMRAM] unsigned char 
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  2   18[COMRAM] unsigned int 
  2763 ;; Registers used:
  2764 ;;		wreg, status,2, status,0
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2770 ;;      Params:         2       0       0       0       0       0       0       0       0
  2771 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2772 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2773 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2774 ;;Total ram usage:        7 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    2
  2777 ;; This function calls:
  2778 ;;		Nothing
  2779 ;; This function is called by:
  2780 ;;		_main
  2781 ;; This function uses a non-reentrant model
  2782 ;;
  2783                           
  2784                           	psect	text14
  2785  0016F2                     __ptext14:
  2786                           	opt stack 0
  2787  0016F2                     _adc_read:
  2788                           	opt stack 28
  2789                           
  2790                           ;incstack = 0
  2791                           ;adc_read@canal stored from wreg
  2792  0016F2  6E17               	movwf	adc_read@canal,c
  2793                           
  2794                           ;adc.c: 12: unsigned char x, y;
  2795                           ;adc.c: 13: ADCON0 = (unsigned char)((canal << 2) | 0x01);
  2796  0016F4  4417               	rlncf	adc_read@canal,w,c
  2797  0016F6  46E8               	rlncf	wreg,f,c
  2798  0016F8  0BFC               	andlw	252
  2799  0016FA  0901               	iorlw	1
  2800  0016FC  6EC2               	movwf	4034,c	;volatile
  2801                           
  2802                           ;adc.c: 14: ADCON0bits.GO_DONE = 1;
  2803  0016FE  82C2               	bsf	4034,1,c	;volatile
  2804  001700  B2C2               	btfsc	4034,1,c	;volatile
  2805  001702  D7FE               	goto	l102
  2806                           
  2807                           ;adc.c: 16: x = (unsigned char)(ADRESH & 0x03);
  2808  001704  50C4               	movf	4036,w,c	;volatile
  2809  001706  0B03               	andlw	3
  2810  001708  6E18               	movwf	adc_read@x,c
  2811                           
  2812                           ;adc.c: 17: y = ADRESL;
  2813  00170A  CFC3 F019          	movff	4035,adc_read@y	;volatile
  2814                           
  2815                           ;adc.c: 18: return (unsigned int) (x << 8 | y);
  2816  00170E  5019               	movf	adc_read@y,w,c
  2817  001710  C018  F015         	movff	adc_read@x,??_adc_read
  2818  001714  6A16               	clrf	(??_adc_read+1)& (0+255),c
  2819  001716  C015  F016         	movff	??_adc_read,??_adc_read+1
  2820  00171A  6A15               	clrf	??_adc_read,c
  2821  00171C  1015               	iorwf	??_adc_read,w,c
  2822  00171E  6E13               	movwf	?_adc_read,c
  2823  001720  5016               	movf	??_adc_read+1,w,c
  2824  001722  6E14               	movwf	?_adc_read+1,c
  2825  001724  0012               	return	
  2826  001726                     __end_of_adc_read:
  2827                           	opt stack 0
  2828                           tblptru	equ	0xFF8
  2829                           tblptrh	equ	0xFF7
  2830                           tblptrl	equ	0xFF6
  2831                           tablat	equ	0xFF5
  2832                           intcon	equ	0xFF2
  2833                           wreg	equ	0xFE8
  2834                           status	equ	0xFD8
  2835                           
  2836 ;; *************** function ___lwtoft *****************
  2837 ;; Defined at:
  2838 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  c               2   26[COMRAM] unsigned int 
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;		None
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  3   26[COMRAM] float 
  2845 ;; Registers used:
  2846 ;;		wreg, status,2, status,0, cstack
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2852 ;;      Params:         3       0       0       0       0       0       0       0       0
  2853 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2855 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2856 ;;Total ram usage:        3 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    3
  2859 ;; This function calls:
  2860 ;;		___ftpack
  2861 ;; This function is called by:
  2862 ;;		_main
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           	psect	text15
  2867  00177E                     __ptext15:
  2868                           	opt stack 0
  2869  00177E                     ___lwtoft:
  2870                           	opt stack 27
  2871                           
  2872                           ;incstack = 0
  2873  00177E  C01B  F013         	movff	___lwtoft@c,___ftpack@arg
  2874  001782  C01C  F014         	movff	___lwtoft@c+1,___ftpack@arg+1
  2875  001786  6A15               	clrf	___ftpack@arg+2,c
  2876  001788  0E8E               	movlw	142
  2877  00178A  6E16               	movwf	___ftpack@exp,c
  2878  00178C  0E00               	movlw	0
  2879  00178E  6E17               	movwf	___ftpack@sign,c
  2880  001790  ECE8  F009         	call	___ftpack	;wreg free
  2881  001794  C013  F01B         	movff	?___ftpack,?___lwtoft
  2882  001798  C014  F01C         	movff	?___ftpack+1,?___lwtoft+1
  2883  00179C  C015  F01D         	movff	?___ftpack+2,?___lwtoft+2
  2884  0017A0  0012               	return	
  2885  0017A2                     __end_of___lwtoft:
  2886                           	opt stack 0
  2887                           tblptru	equ	0xFF8
  2888                           tblptrh	equ	0xFF7
  2889                           tblptrl	equ	0xFF6
  2890                           tablat	equ	0xFF5
  2891                           intcon	equ	0xFF2
  2892                           wreg	equ	0xFE8
  2893                           status	equ	0xFD8
  2894                           
  2895 ;; *************** function ___ftdiv *****************
  2896 ;; Defined at:
  2897 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;  f1              3   44[COMRAM] float 
  2900 ;;  f2              3   47[COMRAM] float 
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  f3              3   54[COMRAM] float 
  2903 ;;  sign            1   58[COMRAM] unsigned char 
  2904 ;;  exp             1   57[COMRAM] unsigned char 
  2905 ;;  cntr            1   53[COMRAM] unsigned char 
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  3   44[COMRAM] float 
  2908 ;; Registers used:
  2909 ;;		wreg, status,2, status,0, cstack
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2915 ;;      Params:         6       0       0       0       0       0       0       0       0
  2916 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2917 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2918 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2919 ;;Total ram usage:       15 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:    3
  2922 ;; This function calls:
  2923 ;;		___ftpack
  2924 ;; This function is called by:
  2925 ;;		_main
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text16
  2930  00121E                     __ptext16:
  2931                           	opt stack 0
  2932  00121E                     ___ftdiv:
  2933                           	opt stack 27
  2934                           
  2935                           ;incstack = 0
  2936  00121E  C02F  F033         	movff	___ftdiv@f1+2,??___ftdiv
  2937  001222  6A34               	clrf	(??___ftdiv+1)& (0+255),c
  2938  001224  6A35               	clrf	(??___ftdiv+2)& (0+255),c
  2939  001226  342E               	rlcf	___ftdiv@f1+1,w,c
  2940  001228  3633               	rlcf	??___ftdiv& (0+255),f,c
  2941  00122A  E301               	bnc	u1021
  2942  00122C  8034               	bsf	(??___ftdiv+1)& (0+255),0,c
  2943  00122E                     u1021:
  2944  00122E  5033               	movf	??___ftdiv,w,c
  2945  001230  6E3A               	movwf	___ftdiv@exp,c
  2946  001232  503A               	movf	___ftdiv@exp,w,c
  2947  001234  A4D8               	btfss	status,2,c
  2948  001236  D007               	goto	l435
  2949  001238  0E00               	movlw	0
  2950  00123A  6E2D               	movwf	?___ftdiv,c
  2951  00123C  0E00               	movlw	0
  2952  00123E  6E2E               	movwf	?___ftdiv+1,c
  2953  001240  0E00               	movlw	0
  2954  001242  6E2F               	movwf	?___ftdiv+2,c
  2955  001244  0012               	return	
  2956  001246                     l435:
  2957  001246  C032  F033         	movff	___ftdiv@f2+2,??___ftdiv
  2958  00124A  6A34               	clrf	(??___ftdiv+1)& (0+255),c
  2959  00124C  6A35               	clrf	(??___ftdiv+2)& (0+255),c
  2960  00124E  3431               	rlcf	___ftdiv@f2+1,w,c
  2961  001250  3633               	rlcf	??___ftdiv& (0+255),f,c
  2962  001252  E301               	bnc	u1041
  2963  001254  8034               	bsf	(??___ftdiv+1)& (0+255),0,c
  2964  001256                     u1041:
  2965  001256  5033               	movf	??___ftdiv,w,c
  2966  001258  6E3B               	movwf	___ftdiv@sign,c
  2967  00125A  503B               	movf	___ftdiv@sign,w,c
  2968  00125C  A4D8               	btfss	status,2,c
  2969  00125E  D007               	goto	l437
  2970  001260  0E00               	movlw	0
  2971  001262  6E2D               	movwf	?___ftdiv,c
  2972  001264  0E00               	movlw	0
  2973  001266  6E2E               	movwf	?___ftdiv+1,c
  2974  001268  0E00               	movlw	0
  2975  00126A  6E2F               	movwf	?___ftdiv+2,c
  2976  00126C  0012               	return	
  2977  00126E                     l437:
  2978  00126E  0E00               	movlw	0
  2979  001270  6E37               	movwf	___ftdiv@f3,c
  2980  001272  0E00               	movlw	0
  2981  001274  6E38               	movwf	___ftdiv@f3+1,c
  2982  001276  0E00               	movlw	0
  2983  001278  6E39               	movwf	___ftdiv@f3+2,c
  2984  00127A  503B               	movf	___ftdiv@sign,w,c
  2985  00127C  0F89               	addlw	137
  2986  00127E  5E3A               	subwf	___ftdiv@exp,f,c
  2987  001280  C02F  F03B         	movff	___ftdiv@f1+2,___ftdiv@sign
  2988  001284  5032               	movf	___ftdiv@f2+2,w,c
  2989  001286  1A3B               	xorwf	___ftdiv@sign,f,c
  2990  001288  0E80               	movlw	128
  2991  00128A  163B               	andwf	___ftdiv@sign,f,c
  2992  00128C  8E2E               	bsf	___ftdiv@f1+1,7,c
  2993  00128E  0EFF               	movlw	255
  2994  001290  162D               	andwf	___ftdiv@f1,f,c
  2995  001292  0EFF               	movlw	255
  2996  001294  162E               	andwf	___ftdiv@f1+1,f,c
  2997  001296  0E00               	movlw	0
  2998  001298  162F               	andwf	___ftdiv@f1+2,f,c
  2999  00129A  8E31               	bsf	___ftdiv@f2+1,7,c
  3000  00129C  0EFF               	movlw	255
  3001  00129E  1630               	andwf	___ftdiv@f2,f,c
  3002  0012A0  0EFF               	movlw	255
  3003  0012A2  1631               	andwf	___ftdiv@f2+1,f,c
  3004  0012A4  0E00               	movlw	0
  3005  0012A6  1632               	andwf	___ftdiv@f2+2,f,c
  3006  0012A8  0E18               	movlw	24
  3007  0012AA  6E36               	movwf	___ftdiv@cntr,c
  3008  0012AC  90D8               	bcf	status,0,c
  3009  0012AE  3637               	rlcf	___ftdiv@f3,f,c
  3010  0012B0  3638               	rlcf	___ftdiv@f3+1,f,c
  3011  0012B2  3639               	rlcf	___ftdiv@f3+2,f,c
  3012  0012B4  5030               	movf	___ftdiv@f2,w,c
  3013  0012B6  5C2D               	subwf	___ftdiv@f1,w,c
  3014  0012B8  5031               	movf	___ftdiv@f2+1,w,c
  3015  0012BA  582E               	subwfb	___ftdiv@f1+1,w,c
  3016  0012BC  5032               	movf	___ftdiv@f2+2,w,c
  3017  0012BE  582F               	subwfb	___ftdiv@f1+2,w,c
  3018  0012C0  A0D8               	btfss	status,0,c
  3019  0012C2  D007               	goto	l439
  3020  0012C4  5030               	movf	___ftdiv@f2,w,c
  3021  0012C6  5E2D               	subwf	___ftdiv@f1,f,c
  3022  0012C8  5031               	movf	___ftdiv@f2+1,w,c
  3023  0012CA  5A2E               	subwfb	___ftdiv@f1+1,f,c
  3024  0012CC  5032               	movf	___ftdiv@f2+2,w,c
  3025  0012CE  5A2F               	subwfb	___ftdiv@f1+2,f,c
  3026  0012D0  8037               	bsf	___ftdiv@f3,0,c
  3027  0012D2                     l439:
  3028  0012D2  90D8               	bcf	status,0,c
  3029  0012D4  362D               	rlcf	___ftdiv@f1,f,c
  3030  0012D6  362E               	rlcf	___ftdiv@f1+1,f,c
  3031  0012D8  362F               	rlcf	___ftdiv@f1+2,f,c
  3032  0012DA  2E36               	decfsz	___ftdiv@cntr,f,c
  3033  0012DC  D7E7               	goto	l438
  3034  0012DE  C037  F013         	movff	___ftdiv@f3,___ftpack@arg
  3035  0012E2  C038  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3036  0012E6  C039  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3037  0012EA  C03A  F016         	movff	___ftdiv@exp,___ftpack@exp
  3038  0012EE  C03B  F017         	movff	___ftdiv@sign,___ftpack@sign
  3039  0012F2  ECE8  F009         	call	___ftpack	;wreg free
  3040  0012F6  C013  F02D         	movff	?___ftpack,?___ftdiv
  3041  0012FA  C014  F02E         	movff	?___ftpack+1,?___ftdiv+1
  3042  0012FE  C015  F02F         	movff	?___ftpack+2,?___ftdiv+2
  3043  001302  0012               	return	
  3044  001304                     __end_of___ftdiv:
  3045                           	opt stack 0
  3046                           tblptru	equ	0xFF8
  3047                           tblptrh	equ	0xFF7
  3048                           tblptrl	equ	0xFF6
  3049                           tablat	equ	0xFF5
  3050                           intcon	equ	0xFF2
  3051                           wreg	equ	0xFE8
  3052                           status	equ	0xFD8
  3053                           
  3054 ;; *************** function ___ftpack *****************
  3055 ;; Defined at:
  3056 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;  arg             3   18[COMRAM] unsigned um
  3059 ;;  exp             1   21[COMRAM] unsigned char 
  3060 ;;  sign            1   22[COMRAM] unsigned char 
  3061 ;; Auto vars:     Size  Location     Type
  3062 ;;		None
  3063 ;; Return value:  Size  Location     Type
  3064 ;;                  3   18[COMRAM] float 
  3065 ;; Registers used:
  3066 ;;		wreg, status,2, status,0
  3067 ;; Tracked objects:
  3068 ;;		On entry : 0/0
  3069 ;;		On exit  : 0/0
  3070 ;;		Unchanged: 0/0
  3071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3072 ;;      Params:         5       0       0       0       0       0       0       0       0
  3073 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3074 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3075 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3076 ;;Total ram usage:        8 bytes
  3077 ;; Hardware stack levels used:    1
  3078 ;; Hardware stack levels required when called:    2
  3079 ;; This function calls:
  3080 ;;		Nothing
  3081 ;; This function is called by:
  3082 ;;		___ftdiv
  3083 ;;		___ftmul
  3084 ;;		___lwtoft
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           	psect	text17
  3089  0013D0                     __ptext17:
  3090                           	opt stack 0
  3091  0013D0                     ___ftpack:
  3092                           	opt stack 26
  3093                           
  3094                           ;incstack = 0
  3095  0013D0  5016               	movf	___ftpack@exp,w,c
  3096  0013D2  B4D8               	btfsc	status,2,c
  3097  0013D4  D005               	goto	u610
  3098  0013D6  5013               	movf	___ftpack@arg,w,c
  3099  0013D8  1014               	iorwf	___ftpack@arg+1,w,c
  3100  0013DA  1015               	iorwf	___ftpack@arg+2,w,c
  3101  0013DC  A4D8               	btfss	status,2,c
  3102  0013DE  D00C               	goto	l371
  3103  0013E0                     u610:
  3104  0013E0  0E00               	movlw	0
  3105  0013E2  6E13               	movwf	?___ftpack,c
  3106  0013E4  0E00               	movlw	0
  3107  0013E6  6E14               	movwf	?___ftpack+1,c
  3108  0013E8  0E00               	movlw	0
  3109  0013EA  6E15               	movwf	?___ftpack+2,c
  3110  0013EC  0012               	return	
  3111  0013EE  2A16               	incf	___ftpack@exp,f,c
  3112  0013F0  90D8               	bcf	status,0,c
  3113  0013F2  3215               	rrcf	___ftpack@arg+2,f,c
  3114  0013F4  3214               	rrcf	___ftpack@arg+1,f,c
  3115  0013F6  3213               	rrcf	___ftpack@arg,f,c
  3116  0013F8                     l371:
  3117  0013F8  0E00               	movlw	0
  3118  0013FA  1413               	andwf	___ftpack@arg,w,c
  3119  0013FC  6E18               	movwf	??___ftpack& (0+255),c
  3120  0013FE  0E00               	movlw	0
  3121  001400  1414               	andwf	___ftpack@arg+1,w,c
  3122  001402  6E19               	movwf	(??___ftpack+1)& (0+255),c
  3123  001404  0EFE               	movlw	254
  3124  001406  1415               	andwf	___ftpack@arg+2,w,c
  3125  001408  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  3126  00140A  5018               	movf	??___ftpack,w,c
  3127  00140C  1019               	iorwf	??___ftpack+1,w,c
  3128  00140E  101A               	iorwf	??___ftpack+2,w,c
  3129  001410  B4D8               	btfsc	status,2,c
  3130  001412  D00C               	goto	l374
  3131  001414  D7EC               	goto	l372
  3132  001416  2A16               	incf	___ftpack@exp,f,c
  3133  001418  0E01               	movlw	1
  3134  00141A  2613               	addwf	___ftpack@arg,f,c
  3135  00141C  0E00               	movlw	0
  3136  00141E  2214               	addwfc	___ftpack@arg+1,f,c
  3137  001420  0E00               	movlw	0
  3138  001422  2215               	addwfc	___ftpack@arg+2,f,c
  3139  001424  90D8               	bcf	status,0,c
  3140  001426  3215               	rrcf	___ftpack@arg+2,f,c
  3141  001428  3214               	rrcf	___ftpack@arg+1,f,c
  3142  00142A  3213               	rrcf	___ftpack@arg,f,c
  3143  00142C                     l374:
  3144  00142C  0E00               	movlw	0
  3145  00142E  1413               	andwf	___ftpack@arg,w,c
  3146  001430  6E18               	movwf	??___ftpack& (0+255),c
  3147  001432  0E00               	movlw	0
  3148  001434  1414               	andwf	___ftpack@arg+1,w,c
  3149  001436  6E19               	movwf	(??___ftpack+1)& (0+255),c
  3150  001438  0EFF               	movlw	255
  3151  00143A  1415               	andwf	___ftpack@arg+2,w,c
  3152  00143C  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  3153  00143E  5018               	movf	??___ftpack,w,c
  3154  001440  1019               	iorwf	??___ftpack+1,w,c
  3155  001442  101A               	iorwf	??___ftpack+2,w,c
  3156  001444  B4D8               	btfsc	status,2,c
  3157  001446  D006               	goto	l377
  3158  001448  D7E6               	goto	l375
  3159  00144A  0616               	decf	___ftpack@exp,f,c
  3160  00144C  90D8               	bcf	status,0,c
  3161  00144E  3613               	rlcf	___ftpack@arg,f,c
  3162  001450  3614               	rlcf	___ftpack@arg+1,f,c
  3163  001452  3615               	rlcf	___ftpack@arg+2,f,c
  3164  001454                     l377:
  3165  001454  BE14               	btfsc	___ftpack@arg+1,7,c
  3166  001456  D003               	goto	u650
  3167  001458  0E02               	movlw	2
  3168  00145A  6016               	cpfslt	___ftpack@exp,c
  3169  00145C  D7F6               	goto	l378
  3170  00145E                     u650:
  3171  00145E  A016               	btfss	___ftpack@exp,0,c
  3172  001460  9E14               	bcf	___ftpack@arg+1,7,c
  3173  001462  90D8               	bcf	status,0,c
  3174  001464  3216               	rrcf	___ftpack@exp,f,c
  3175  001466  5016               	movf	___ftpack@exp,w,c
  3176  001468  1215               	iorwf	___ftpack@arg+2,f,c
  3177  00146A  5017               	movf	___ftpack@sign,w,c
  3178  00146C  A4D8               	btfss	status,2,c
  3179  00146E  8E15               	bsf	___ftpack@arg+2,7,c
  3180  001470  C013  F013         	movff	___ftpack@arg,?___ftpack
  3181  001474  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  3182  001478  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  3183  00147C  0012               	return	
  3184  00147E                     __end_of___ftpack:
  3185                           	opt stack 0
  3186                           tblptru	equ	0xFF8
  3187                           tblptrh	equ	0xFF7
  3188                           tblptrl	equ	0xFF6
  3189                           tablat	equ	0xFF5
  3190                           intcon	equ	0xFF2
  3191                           wreg	equ	0xFE8
  3192                           status	equ	0xFD8
  3193                           
  3194 ;; *************** function _high_priority_interrupt *****************
  3195 ;; Defined at:
  3196 ;;		line 56 in file "preset.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;		None
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      void 
  3203 ;; Registers used:
  3204 ;;		wreg, status,2, cstack
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3210 ;;      Params:         0       0       0       0       0       0       0       0       0
  3211 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3212 ;;      Temps:         18       0       0       0       0       0       0       0       0
  3213 ;;      Totals:        18       0       0       0       0       0       0       0       0
  3214 ;;Total ram usage:       18 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    1
  3217 ;; This function calls:
  3218 ;;		_tmr0_flag
  3219 ;; This function is called by:
  3220 ;;		Interrupt level 2
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	intcode
  3225  000008                     __pintcode:
  3226                           	opt stack 0
  3227  000008                     _high_priority_interrupt:
  3228                           	opt stack 25
  3229                           
  3230                           ;incstack = 0
  3231  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3232  00000A  ED95  F00A         	call	int_func,f	;refresh shadow registers
  3233                           tblptru	equ	0xFF8
  3234                           tblptrh	equ	0xFF7
  3235                           tblptrl	equ	0xFF6
  3236                           tablat	equ	0xFF5
  3237                           intcon	equ	0xFF2
  3238                           wreg	equ	0xFE8
  3239                           status	equ	0xFD8
  3240                           
  3241                           	psect	intcode_body
  3242  00152A                     __pintcode_body:
  3243                           	opt stack 25
  3244  00152A                     int_func:
  3245                           	opt stack 25
  3246  00152A  0006               	pop		; remove dummy address from shadow register refresh
  3247  00152C  CFFA F001          	movff	pclath,??_high_priority_interrupt
  3248  001530  CFFB F002          	movff	pclatu,??_high_priority_interrupt+1
  3249  001534  CFE9 F003          	movff	fsr0l,??_high_priority_interrupt+2
  3250  001538  CFEA F004          	movff	fsr0h,??_high_priority_interrupt+3
  3251  00153C  CFE1 F005          	movff	fsr1l,??_high_priority_interrupt+4
  3252  001540  CFE2 F006          	movff	fsr1h,??_high_priority_interrupt+5
  3253  001544  CFD9 F007          	movff	fsr2l,??_high_priority_interrupt+6
  3254  001548  CFDA F008          	movff	fsr2h,??_high_priority_interrupt+7
  3255  00154C  CFF3 F009          	movff	prodl,??_high_priority_interrupt+8
  3256  001550  CFF4 F00A          	movff	prodh,??_high_priority_interrupt+9
  3257  001554  CFF6 F00B          	movff	tblptrl,??_high_priority_interrupt+10
  3258  001558  CFF7 F00C          	movff	tblptrh,??_high_priority_interrupt+11
  3259  00155C  CFF8 F00D          	movff	tblptru,??_high_priority_interrupt+12
  3260  001560  CFF5 F00E          	movff	tablat,??_high_priority_interrupt+13
  3261  001564  C04C  F00F         	movff	btemp,??_high_priority_interrupt+14
  3262  001568  C04D  F010         	movff	btemp+1,??_high_priority_interrupt+15
  3263  00156C  C04E  F011         	movff	btemp+2,??_high_priority_interrupt+16
  3264  001570  C04F  F012         	movff	btemp+3,??_high_priority_interrupt+17
  3265                           
  3266                           ;preset.c: 57: if (INTCONbits.TMR0IF)
  3267  001574  B4F2               	btfsc	intcon,2,c	;volatile
  3268                           
  3269                           ;preset.c: 58: tmr0_flag();
  3270  001576  ECEB  F00B         	call	_tmr0_flag	;wreg free
  3271  00157A  C012  F04F         	movff	??_high_priority_interrupt+17,btemp+3
  3272  00157E  C011  F04E         	movff	??_high_priority_interrupt+16,btemp+2
  3273  001582  C010  F04D         	movff	??_high_priority_interrupt+15,btemp+1
  3274  001586  C00F  F04C         	movff	??_high_priority_interrupt+14,btemp
  3275  00158A  C00E  FFF5         	movff	??_high_priority_interrupt+13,tablat
  3276  00158E  C00D  FFF8         	movff	??_high_priority_interrupt+12,tblptru
  3277  001592  C00C  FFF7         	movff	??_high_priority_interrupt+11,tblptrh
  3278  001596  C00B  FFF6         	movff	??_high_priority_interrupt+10,tblptrl
  3279  00159A  C00A  FFF4         	movff	??_high_priority_interrupt+9,prodh
  3280  00159E  C009  FFF3         	movff	??_high_priority_interrupt+8,prodl
  3281  0015A2  C008  FFDA         	movff	??_high_priority_interrupt+7,fsr2h
  3282  0015A6  C007  FFD9         	movff	??_high_priority_interrupt+6,fsr2l
  3283  0015AA  C006  FFE2         	movff	??_high_priority_interrupt+5,fsr1h
  3284  0015AE  C005  FFE1         	movff	??_high_priority_interrupt+4,fsr1l
  3285  0015B2  C004  FFEA         	movff	??_high_priority_interrupt+3,fsr0h
  3286  0015B6  C003  FFE9         	movff	??_high_priority_interrupt+2,fsr0l
  3287  0015BA  C002  FFFB         	movff	??_high_priority_interrupt+1,pclatu
  3288  0015BE  C001  FFFA         	movff	??_high_priority_interrupt,pclath
  3289  0015C2  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3290  0015C4  0011               	retfie		f
  3291  0015C6                     __end_of_high_priority_interrupt:
  3292                           	opt stack 0
  3293                           pclatu	equ	0xFFB
  3294                           pclath	equ	0xFFA
  3295                           tblptru	equ	0xFF8
  3296                           tblptrh	equ	0xFF7
  3297                           tblptrl	equ	0xFF6
  3298                           tablat	equ	0xFF5
  3299                           prodh	equ	0xFF4
  3300                           prodl	equ	0xFF3
  3301                           intcon	equ	0xFF2
  3302                           fsr0h	equ	0xFEA
  3303                           fsr0l	equ	0xFE9
  3304                           wreg	equ	0xFE8
  3305                           fsr1h	equ	0xFE2
  3306                           fsr1l	equ	0xFE1
  3307                           fsr2h	equ	0xFDA
  3308                           fsr2l	equ	0xFD9
  3309                           status	equ	0xFD8
  3310                           
  3311 ;; *************** function _tmr0_flag *****************
  3312 ;; Defined at:
  3313 ;;		line 10 in file "timer.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;		None
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;		None
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      void 
  3320 ;; Registers used:
  3321 ;;		wreg, status,2
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3327 ;;      Params:         0       0       0       0       0       0       0       0       0
  3328 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3329 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3330 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3331 ;;Total ram usage:        0 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_high_priority_interrupt
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text19
  3341  0017D6                     __ptext19:
  3342                           	opt stack 0
  3343  0017D6                     _tmr0_flag:
  3344                           	opt stack 25
  3345                           
  3346                           ;timer.c: 11: INTCONbits.TMR0IF = 0;
  3347                           
  3348                           ;incstack = 0
  3349  0017D6  94F2               	bcf	intcon,2,c	;volatile
  3350                           
  3351                           ;timer.c: 12: TMR0L = 0xD2;
  3352  0017D8  0ED2               	movlw	210
  3353  0017DA  6ED6               	movwf	4054,c	;volatile
  3354                           
  3355                           ;timer.c: 13: TMR0H = 0x39;
  3356  0017DC  0E39               	movlw	57
  3357  0017DE  6ED7               	movwf	4055,c	;volatile
  3358  0017E0  0012               	return		;funcret
  3359  0017E2                     __end_of_tmr0_flag:
  3360                           	opt stack 0
  3361                           pclatu	equ	0xFFB
  3362                           pclath	equ	0xFFA
  3363                           tblptru	equ	0xFF8
  3364                           tblptrh	equ	0xFF7
  3365                           tblptrl	equ	0xFF6
  3366                           tablat	equ	0xFF5
  3367                           prodh	equ	0xFF4
  3368                           prodl	equ	0xFF3
  3369                           intcon	equ	0xFF2
  3370                           fsr0h	equ	0xFEA
  3371                           fsr0l	equ	0xFE9
  3372                           wreg	equ	0xFE8
  3373                           fsr1h	equ	0xFE2
  3374                           fsr1l	equ	0xFE1
  3375                           fsr2h	equ	0xFDA
  3376                           fsr2l	equ	0xFD9
  3377                           status	equ	0xFD8
  3378                           pclatu	equ	0xFFB
  3379                           pclath	equ	0xFFA
  3380                           tblptru	equ	0xFF8
  3381                           tblptrh	equ	0xFF7
  3382                           tblptrl	equ	0xFF6
  3383                           tablat	equ	0xFF5
  3384                           prodh	equ	0xFF4
  3385                           prodl	equ	0xFF3
  3386                           intcon	equ	0xFF2
  3387                           fsr0h	equ	0xFEA
  3388                           fsr0l	equ	0xFE9
  3389                           wreg	equ	0xFE8
  3390                           fsr1h	equ	0xFE2
  3391                           fsr1l	equ	0xFE1
  3392                           fsr2h	equ	0xFDA
  3393                           fsr2l	equ	0xFD9
  3394                           status	equ	0xFD8
  3395                           
  3396                           	psect	rparam
  3397  0000                     pclatu	equ	0xFFB
  3398                           pclath	equ	0xFFA
  3399                           tblptru	equ	0xFF8
  3400                           tblptrh	equ	0xFF7
  3401                           tblptrl	equ	0xFF6
  3402                           tablat	equ	0xFF5
  3403                           prodh	equ	0xFF4
  3404                           prodl	equ	0xFF3
  3405                           intcon	equ	0xFF2
  3406                           fsr0h	equ	0xFEA
  3407                           fsr0l	equ	0xFE9
  3408                           wreg	equ	0xFE8
  3409                           fsr1h	equ	0xFE2
  3410                           fsr1l	equ	0xFE1
  3411                           fsr2h	equ	0xFDA
  3412                           fsr2l	equ	0xFD9
  3413                           status	equ	0xFD8
  3414                           
  3415                           	psect	temp
  3416  00004C                     btemp:
  3417                           	opt stack 0
  3418  00004C                     	ds	1
  3419  0000                     int$flags	set	btemp
  3420  0000                     wtemp6	set	btemp+1
  3421                           pclatu	equ	0xFFB
  3422                           pclath	equ	0xFFA
  3423                           tblptru	equ	0xFF8
  3424                           tblptrh	equ	0xFF7
  3425                           tblptrl	equ	0xFF6
  3426                           tablat	equ	0xFF5
  3427                           prodh	equ	0xFF4
  3428                           prodl	equ	0xFF3
  3429                           intcon	equ	0xFF2
  3430                           fsr0h	equ	0xFEA
  3431                           fsr0l	equ	0xFE9
  3432                           wreg	equ	0xFE8
  3433                           fsr1h	equ	0xFE2
  3434                           fsr1l	equ	0xFE1
  3435                           fsr2h	equ	0xFDA
  3436                           fsr2l	equ	0xFD9
  3437                           status	equ	0xFD8


Data Sizes:
    Strings     84
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     75      75
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    writeStringLcd@s	PTR unsigned char  size(2) Largest target is 10
		 -> STR_14(CODE[2]), STR_13(CODE[10]), STR_12(CODE[2]), STR_11(CODE[10]), 
		 -> STR_10(CODE[2]), STR_9(CODE[10]), STR_8(CODE[2]), STR_7(CODE[10]), 
		 -> STR_6(CODE[2]), STR_5(CODE[10]), STR_4(CODE[2]), STR_3(CODE[10]), 

    writeCStringLcd@s	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_2(CODE[17]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_writeValueLcd
    _writeValueLcd->___fttol
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    ___aldiv->___almod
    _writeStringLcd->_writeLcd
    _writeCStringLcd->_writeLcd
    _initConfigs->_clearLcd
    _clearLcd->_writeLcd
    _gotoLcd->_writeLcd
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul

Critical Paths under _high_priority_interrupt in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_priority_interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_priority_interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_priority_interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_priority_interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_priority_interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_priority_interrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_priority_interrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_priority_interrupt in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0   20233
                                             70 COMRAM     5     5      0
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                           _adc_read
                           _clearLcd
                            _gotoLcd
                        _initConfigs
                    _writeCStringLcd
                     _writeStringLcd
                      _writeValueLcd
 ---------------------------------------------------------------------------------
 (1) _writeValueLcd                                       11     8      3    8085
                                             59 COMRAM    11     8      3
                            ___aldiv
                            ___almod
                            ___ftmul
                            ___fttol
                             ___lmul
                           _writeLcd
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     370
                                             18 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     328
                                             44 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3943
                                             29 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
                           _adc_read (ARG)
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8    1664
                                             18 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     908
                                             28 COMRAM    14     6      8
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (1) _writeStringLcd                                       2     0      2     987
                                             20 COMRAM     2     0      2
                           _writeLcd
 ---------------------------------------------------------------------------------
 (1) _writeCStringLcd                                      2     0      2     227
                                             20 COMRAM     2     0      2
                           _writeLcd
 ---------------------------------------------------------------------------------
 (1) _initConfigs                                          2     2      0      60
                                             21 COMRAM     2     2      0
                           _clearLcd
                           _writeLcd
 ---------------------------------------------------------------------------------
 (2) _clearLcd                                             1     1      0      30
                                             20 COMRAM     1     1      0
                           _writeLcd
 ---------------------------------------------------------------------------------
 (1) _gotoLcd                                              1     1      0      45
                                             20 COMRAM     1     1      0
                           _writeLcd
 ---------------------------------------------------------------------------------
 (2) _writeLcd                                             2     2      0      30
                                             18 COMRAM     2     2      0
                            _sendLcd
 ---------------------------------------------------------------------------------
 (3) _sendLcd                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_read                                             7     5      2      68
                                             18 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2905
                                             26 COMRAM     3     0      3
                           ___ftpack
                           _adc_read (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3745
                                             44 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                           _adc_read (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2427
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_priority_interrupt                             18    18      0       0
                                              0 COMRAM    18    18      0
                          _tmr0_flag
 ---------------------------------------------------------------------------------
 (6) _tmr0_flag                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftdiv
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       _adc_read (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
       _adc_read (ARG)
     _adc_read (ARG)
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
       _adc_read (ARG)
     _adc_read (ARG)
   ___lwtoft
     ___ftpack
     _adc_read (ARG)
   _adc_read
   _clearLcd
     _writeLcd
       _sendLcd
   _gotoLcd
     _writeLcd
       _sendLcd
   _initConfigs
     _clearLcd
       _writeLcd
         _sendLcd
     _writeLcd
       _sendLcd
   _writeCStringLcd
     _writeLcd
       _sendLcd
   _writeStringLcd
     _writeLcd
       _sendLcd
   _writeValueLcd
     ___aldiv
       ___almod (ARG)
     ___almod
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       _adc_read (ARG)
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         _adc_read (ARG)
     ___lmul
     _writeLcd
       _sendLcd

 _high_priority_interrupt (ROOT)
   _tmr0_flag

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5E     4B      4B       1       79.8%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 21 10:29:59 2018

                  writeValueLcd@x 0043                  writeValueLcd@val 003C  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                             l102 1700                               l131 173E  
                             l132 172A                               l220 13A8  
                             l212 1320                               l125 176A  
                             l221 13BE                               l213 1338  
                             l126 1756                               l215 1366  
                             l216 135A                               l232 14F4  
                             l233 1502                               l225 149A  
                             l137 0D5E                               l234 1518  
                             l226 14AE                               l138 0EC6  
                             l219 139A                               l139 0E28  
                             l228 14CC                               l229 14C0  
                             l168 1662                               l169 1676  
                             l450 1152                               l371 13F8  
                             l435 1246                               l372 13EE  
                             l452 117A                               l437 126E  
                             l453 11AC                               l374 142C  
                             l438 12AC                               l454 11BC  
                             l375 1416                               l439 12D2  
                             l471 1062                               l456 11D4  
                             l480 10F0                               l377 1454  
                             l457 11E4                               l473 10D8  
                             l378 144A                               l482 1118  
                             l474 10C8                               l479 10FC  
                    __CFG_CPB$OFF 000000                               u610 13E0  
                    __CFG_CPD$OFF 000000                               u650 145E  
                             u730 136A                               u900 1080  
                             u821 113A                               u841 1162  
                             u905 1078                               u940 1102  
                             u790 14D0                               u881 1046  
                             u980 0D74                               u990 0D8A  
               ??_writeCStringLcd 0017                               wreg 000FE8  
                    __CFG_FOSC$HS 000000                      __CFG_LVP$OFF 000000  
                    ___ftdiv@cntr 0036                      ___ftdiv@sign 003B  
                    __CFG_WDT$OFF 000000                              STR_1 084E  
                            STR_2 0801                              STR_3 0812  
                            STR_4 0853                              STR_5 0826  
                            STR_6 0853                              STR_7 083A  
                            STR_8 0853                              STR_9 081C  
                            u1021 122E                              u1041 1256  
                            u1107 08AC                              u1117 08C4  
                            u1207 15F6                              u1127 0902  
                            u1217 1610                              u1137 091A  
                            u1227 17B0                              u1147 09C8  
                            u1237 16C6                              u1157 0A64  
                            u1077 0860                              _LATB 000F8A  
                            u1247 16E6                              u1167 0B00  
                            u1087 0878                              _LATC 000F8B  
                            _LATD 000F8C                              u1177 0B9C  
                            u1097 0890                              u1187 0C38  
                            u1197 0CD4                     __CFG_DEBUG$ON 000000  
                            _UCON 000F6D                      __CFG_PWRT$ON 000000  
                            _main 0856                      ___ftpack@arg 0013  
                    ___ftpack@exp 0016                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            fsr0l 000FE9                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 004C  
                            prodh 000FF4                              prodl 000FF3  
                            start 000E                      ?_initConfigs 0001  
                   __CFG_MCLRE$ON 000000                      ___ftmul@cntr 002B  
                    ___param_bank 000000                      ___ftmul@sign 002C  
                    ___fttol@exp1 003B                      ___fttol@lval 0037  
                   __CFG_PLLDIV$4 000000                   __end_of___aldiv 13D0  
                 __end_of___almod 152A                             ?_main 0001  
                           STR_10 0853                             STR_11 0830  
                           STR_12 0853                             STR_13 0844  
                           STR_14 0853                   __end_of___ftdiv 1304  
                           _CMCON 000FB4                   __end_of___ftmul 121E  
                           _T0CON 000FD5                   __end_of___fttol 112A  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
             ___lmul@multiplicand 0017                     __CFG_WRT3$OFF 000000  
                  __CFG_EBTR0$OFF 000000                    __CFG_EBTR1$OFF 000000  
                  __CFG_EBTR2$OFF 000000                    __CFG_EBTR3$OFF 000000  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
                 __end_of_gotoLcd 17D6                     ___ftpack@sign 0017  
                 __end_of_sendLcd 17E8                             pclath 000FFA  
                           tablat 000FF5                             status 000FD8  
                           wtemp6 004D                    __CFG_ICPRT$OFF 000000  
                 __initialization 17BC                   writeStringLcd@s 0015  
                    __end_of_main 0CE2                  ??_writeStringLcd 0017  
                          ??_main 0047                     ___fttol@sign1 0036  
                   __activetblptr 000002                            _ADCON0 000FC2  
                          _ADCON1 000FC1                            _ADCON2 000FC0  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                __end_of___ftpack 147E                  __end_of_adc_read 1726  
                          _INTCON 000FF2                  __end_of___lwtoft 17A2  
                __end_of_clearLcd 17BC                    __CFG_XINST$OFF 000000  
                          ___lmul 1652                         ??___aldiv 0025  
                       ??___almod 001B                    __CFG_STVREN$ON 000000  
                       ??___ftdiv 0033                         ??___ftmul 0024  
                       ??___fttol 0031             ___ftmul@f3_as_product 0028  
                       ??_gotoLcd 0015                         ??_sendLcd 0013  
                    __mediumconst 0000                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                writeCStringLcd@s 0015                  __end_of_writeLcd 16F2  
                      __accesstop 0060           __end_of__initialization 17BC  
                   ___rparam_used 000001                        ___ftdiv@f1 002D  
                      ___ftdiv@f2 0030                        ___ftdiv@f3 0037  
                      ___ftmul@f1 001E                        ___ftmul@f2 0021  
          __size_of_writeValueLcd 0354                        ___fttol@f1 002D  
                 _writeCStringLcd 1752                    __pcstackCOMRAM 0001  
            __size_of_initConfigs 008C                        ___lwtoft@c 001B  
__size_of_high_priority_interrupt 15BE                           ?___lmul 0013  
              __size_of_tmr0_flag 000C                    ___lmul@product 001B  
                       ?___ftpack 0013                         ?_adc_read 0013  
                       ?___lwtoft 001B                         ?_clearLcd 0001  
                   _writeValueLcd 0CE2           __end_of_writeCStringLcd 177E  
                         __Hparam 0000                           __Lparam 0000  
                         ___aldiv 1304                           ___almod 147E  
                 __size_of___lmul 0056                           ___ftdiv 121E  
                         ___ftmul 112A                           ___fttol 1036  
                    __psmallconst 0800                           __pcinit 17BC  
                      ??___ftpack 0018                           __ramtop 0800  
                      ??_adc_read 0015                         ?_writeLcd 0001  
                         __ptext0 0856                           __ptext1 0CE2  
                         __ptext2 1652                           __ptext3 1036  
                         __ptext4 112A                           __ptext5 147E  
                         __ptext6 1304                           __ptext7 1726  
                         __ptext8 1752                           __ptext9 15C6  
                      ??___lwtoft 001E                           _gotoLcd 17CA  
                  ?_writeValueLcd 003C                           _sendLcd 17E2  
                ___aldiv@dividend 001D                        ??_clearLcd 0015  
                  __pintcode_body 152A              end_of_initialization 17BC  
               __end_of_tmr0_flag 17E2                     __Lmediumconst 0000  
                         int_func 152A                  ___aldiv@quotient 0027  
         _high_priority_interrupt 0008                        ??_writeLcd 0013  
                ?_writeCStringLcd 0015                       ___ftdiv@exp 003A  
                     ___ftmul@exp 0027                    __end_of___lmul 16A8  
                 ??_writeValueLcd 003F               start_initialization 17BC  
         __size_of_writeStringLcd 002C                        gotoLcd@pos 0015  
                   ??_initConfigs 0016                          ??___lmul 001B  
       ??_high_priority_interrupt 0001                 __size_of___ftpack 00AE  
               __size_of_adc_read 0034                 __size_of___lwtoft 0024  
               __size_of_clearLcd 001A                     adc_read@canal 0017  
                       adc_read@x 0018                         adc_read@y 0019  
                       __pintcode 0008                          ?___aldiv 001D  
                        ?___almod 0013                          ?___ftdiv 002D  
                        ?___ftmul 001E                          ?___fttol 002D  
             __end_of_initConfigs 1652                  ___almod@dividend 0013  
                     __smallconst 0800                          ?_gotoLcd 0001  
               __size_of_writeLcd 004A                          ?_sendLcd 0001  
 __end_of_high_priority_interrupt 15C6                   ___aldiv@divisor 0021  
                 ___aldiv@counter 0025                          _LATBbits 000F8A  
                        _LATCbits 000F8B                          _LATDbits 000F8C  
                       _tmr0_flag 17D6                        _ADCON0bits 000FC2  
                       main@valor 0049                    _writeStringLcd 1726  
               ___lmul@multiplier 0013                        ?_tmr0_flag 0001  
                        __Hrparam 0000                          __Lrparam 0000  
                     _initConfigs 15C6                  __size_of___aldiv 00CC  
                __size_of___almod 00AC                  __size_of___ftdiv 00E6  
                __size_of___ftmul 00F4                  __size_of___fttol 00F4  
                        ___ftpack 13D0                          _adc_read 16F2  
                        ___lwtoft 177E            __end_of_writeStringLcd 1752  
                __size_of_gotoLcd 000C                          _clearLcd 17A2  
                __size_of_sendLcd 0006                          __ptext10 17A2  
                        __ptext11 17CA                          __ptext12 16A8  
                        __ptext13 17E2                          __ptext14 16F2  
                        __ptext15 177E                          __ptext16 121E  
                        __ptext17 13D0                          __ptext19 17D6  
                 ___almod@divisor 0017                   ___almod@counter 001B  
                   __size_of_main 048C                          int$flags 004C  
        __size_of_writeCStringLcd 002C                          _writeLcd 16A8  
           __CFG_CPUDIV$OSC1_PLL2 000000                   ?_writeStringLcd 0015  
                      _INTCONbits 000FF2             __end_of_writeValueLcd 1036  
                        intlevel2 0000                       ??_tmr0_flag 0001  
                       writeLcd@c 0014                      ___aldiv@sign 0026  
                    ___almod@sign 001C          ?_high_priority_interrupt 0001  
